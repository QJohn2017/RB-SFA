Notebook[{
Cell[BoxData[
 RowBox[{"\[IndentingNewLine]", "\[IndentingNewLine]", 
  "\[IndentingNewLine]"}]], "Input",
 CellChangeTimes->{}],

Cell[TextData[StyleBox["RB-SFA: Rotating Bicircular High Harmonic Generation \
in the Strong Field Approximation",
 FontSize->24]], "Text",
 CellChangeTimes->{}],

Cell["\<\
\[Copyright] Emilio Pisanty, 2014
\
\>", "Text"],

Cell[TextData[{
 "This software calculates the polarization properties of the harmonic \
spectra produced by multi-colour circularly polarized fields, by explicitly \
performing the temporal integrations of the Lewenstein model for high \
harmonic generation. It was used to support the calculations in the paper\n\n \
   Spin conservation in bicircular high harmonic generation. E. Pisanty and \
M. Ivanov. arXiv:1404.6242.\n\nIt was built primarily for this setting but \
the code is general and it should be applicable to a wide range of SFA \
calculations.\n\nThe program consists of this Mathematica notebook, a PDF \
printout, the data used for the paper, and PDFs of the graph output. It is \
available under the CC-BY-SA 4.0 license. If you use this code or its results \
in a publication, please cite both the arXiv preprint above (or any journal \
publication which has superseded it) and the GitHub repository where the \
latest version will be available. An example citation is \n\n    E. Pisanty. \
RB-SFA: Rotating Bicircular High Harmonic Generation in the Strong Field \
Approximation. https://github.com/episanty/RB-SFA (2014).\n\nTo get started, \
run the initialization cells on this notebook. (Don\[CloseCurlyQuote]t try to \
run the whole notebook, which can take about 5-10 minutes recalculating the \
example data.) The data used in the paper is provided in gzipped format as ",
 StyleBox["data dump of detuning scan.txt.gz", "Code",
  FontWeight->"Plain"],
 "; to use it simply unzip it using your utility of choice, place it in the \
same directory as this notebook, and it will be ready to be imported by the \
code below."
}], "Text"],

Cell[BoxData[
 RowBox[{"\[IndentingNewLine]", "\[IndentingNewLine]"}]], "Input",
 CellChangeTimes->{}],

Cell[TextData[{
 "This code calculates the harmonic dipole as per the original Lewenstein ",
 StyleBox["et al.",
  FontSlant->"Italic"],
 " paper,\n\n    M. Lewenstein, Ph. Balcou, M.Yu. Ivanov, A. L\
\[CloseCurlyQuote]Huillier and P.B. Corkum. Theory of high-harmonic \
generation by low-frequency laser fields.",
 StyleBox[" ",
  FontSlant->"Italic"],
 ButtonBox["Phys. Rev. A 49 no. 3, 2117-2132 (1994).",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["http://dx.doi.org/10.1103/PhysRevA.49.2117"], None},
  ButtonNote->"http://dx.doi.org/10.1103/PhysRevA.49.2117"],
 "\n    \nThe time-dependent dipole is given by\n\n          ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{
     StyleBox["D",
      FontWeight->"Bold"], "(", "t", ")"}], "=", 
    RowBox[{
     RowBox[{"\[ImaginaryI]", 
      RowBox[{
       SubsuperscriptBox["\[Integral]", "0", "t"], 
       RowBox[{
        RowBox[{"\[DifferentialD]", 
         RowBox[{"t", "'"}]}], 
        RowBox[{"\[Integral]", 
         RowBox[{
          RowBox[{
           SuperscriptBox["\[DifferentialD]", "3"], 
           StyleBox["p",
            FontWeight->"Bold"]}], " ", 
          RowBox[{
           StyleBox["d",
            FontWeight->"Bold"], "(", 
           RowBox[{
            StyleBox["p",
             FontWeight->"Bold"], "+", 
            RowBox[{
             StyleBox["A",
              FontWeight->"Bold"], "(", "t", ")"}]}], ")"}], " ", "\[Times]", 
          " ", 
          RowBox[{
           RowBox[{
            StyleBox["F",
             FontWeight->"Bold"], "(", 
            RowBox[{"t", "'"}], ")"}], "\[CenterDot]", 
           RowBox[{
            StyleBox["d",
             FontWeight->"Bold"], "(", 
            RowBox[{
             StyleBox["p",
              FontWeight->"Bold"], "+", 
             RowBox[{
              StyleBox["A",
               FontWeight->"Bold"], "(", 
              RowBox[{"t", "'"}], ")"}]}], ")"}]}], "\[Times]", 
          RowBox[{"exp", "[", 
           RowBox[{
            RowBox[{"-", "\[ImaginaryI]"}], " ", 
            RowBox[{"S", "(", 
             RowBox[{"p", ",", "t", ",", 
              RowBox[{"t", "'"}]}], ")"}]}], "]"}]}]}]}]}]}], "+", 
     RowBox[{"c", ".", "c", "."}]}]}], TraditionalForm]]],
 "\n\nHere ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    StyleBox["F",
     FontWeight->"Bold"], "(", "t", ")"}], TraditionalForm]]],
 "is the time-dependent applied electric field, with vector potential ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    StyleBox["A",
     FontWeight->"Bold"], "(", "t", ")"}], TraditionalForm]]],
 "; the electron charge is taken to be ",
 Cell[BoxData[
  FormBox[
   RowBox[{"-", "1"}], TraditionalForm]]],
 ". The integration time ",
 Cell[BoxData[
  FormBox[
   RowBox[{"t", "'"}], TraditionalForm]]],
 " can be interpreted as the ionization time and the integration limit ",
 Cell[BoxData[
  FormBox["t", TraditionalForm]]],
 " represents the recollision time. (Upon applying the saddle-point \
approximation to the temporal integrals these notions apply exactly to the \
corresponding quantum orbits.) The ionization and recollision events are \
governed by the corresponding dipole matrix elements, which are taken for a \
hydrogenic 1s-type orbital with characteristic momentum \[Kappa] and \
ionization potential ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    FractionBox["1", "2"], 
    SuperscriptBox["\[Kappa]", "2"]}], TraditionalForm]]],
 ":\n\n    ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{
     StyleBox["d",
      FontWeight->"Bold"], "(", 
     StyleBox["p",
      FontWeight->"Bold"], ")"}], "=", 
    RowBox[{
     RowBox[{
      TemplateBox[{StyleBox["p", FontWeight -> "Bold"]},
       "Bra"], 
      OverscriptBox[
       StyleBox["d",
        FontWeight->"Bold"], "^"], 
      TemplateBox[{"g"},
       "Ket"]}], "=", 
     RowBox[{
      FractionBox[
       RowBox[{"8", "\[ImaginaryI]"}], "\[Pi]"], 
      FractionBox[
       RowBox[{
        SqrtBox[
         RowBox[{"2", 
          SuperscriptBox["\[Kappa]", "5"]}]], 
        StyleBox["p",
         FontWeight->"Bold"]}], 
       SuperscriptBox[
        RowBox[{"(", 
         RowBox[{
          SuperscriptBox[
           StyleBox["p",
            FontWeight->"Bold"], "2"], "+", 
          SuperscriptBox["\[Kappa]", "2"]}], ")"}], "3"]]}]}]}], 
   TraditionalForm]]],
 ".\n\n(Taken from B. Podolsky & L. Pauling. ",
 ButtonBox["Phys. Rev. 34 no. 1, 109\[Dash]116 (1929)",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["http://dx.doi.org/10.1103/PhysRev.34.109"], None},
  ButtonNote->"http://dx.doi.org/10.1103/PhysRev.34.109"],
 ".)\n\nThe action \n\n    ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{"S", "(", 
     RowBox[{
      StyleBox["p",
       FontWeight->"Bold"], ",", "t", ",", 
      RowBox[{"t", "'"}]}], ")"}], "=", 
    RowBox[{
     SubsuperscriptBox["\[Integral]", 
      RowBox[{"t", "'"}], "t"], 
     RowBox[{
      RowBox[{"\[DifferentialD]", 
       RowBox[{"t", "''"}]}], 
      RowBox[{"(", 
       RowBox[{
        RowBox[{
         FractionBox["1", "2"], 
         SuperscriptBox["\[Kappa]", "2"]}], "+", 
        RowBox[{
         FractionBox["1", "2"], 
         SuperscriptBox[
          RowBox[{"(", 
           RowBox[{
            StyleBox["p",
             FontWeight->"Bold"], "+", 
            RowBox[{
             StyleBox["A",
              FontWeight->"Bold"], "(", 
             RowBox[{"t", "''"}], ")"}]}], ")"}], "2"]}]}], ")"}]}]}]}], 
   TraditionalForm]]],
 " \n\nis the governing factor of the integral. It is highly oscillatory and \
must be dealt with carefully. The momentum integral is approximated using the \
saddle point method; this is valid and straightforward since there is one \
unique saddle point,\n\n    ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{
     StyleBox["p",
      FontWeight->"Bold"], "(", 
     RowBox[{"t", ",", 
      RowBox[{"t", "'"}]}], ")"}], "=", 
    RowBox[{"-", 
     FractionBox[
      RowBox[{
       SubsuperscriptBox["\[Integral]", 
        RowBox[{"t", "'"}], "t"], 
       RowBox[{
        RowBox[{
         StyleBox["A",
          FontWeight->"Bold"], "(", 
         RowBox[{"t", "''"}], ")"}], 
        RowBox[{"\[DifferentialD]", 
         RowBox[{"t", "''"}]}]}]}], 
      RowBox[{"t", "-", 
       RowBox[{"t", "'"}]}]]}]}], TraditionalForm]]],
 ".\n    \nAfter the momentum has been integrated via the saddle point \
method, the time-dependent dipole is given by\n\n          ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{
     StyleBox["D",
      FontWeight->"Bold"], "(", "t", ")"}], "=", 
    RowBox[{
     RowBox[{"\[ImaginaryI]", 
      RowBox[{
       SubsuperscriptBox["\[Integral]", "0", "t"], 
       RowBox[{
        RowBox[{"\[DifferentialD]", 
         RowBox[{"t", "'"}]}], 
        SuperscriptBox[
         RowBox[{"(", 
          FractionBox[
           RowBox[{"2", "\[Pi]"}], 
           RowBox[{"\[Epsilon]", "+", 
            RowBox[{"\[ImaginaryI]", "(", 
             RowBox[{"t", "-", 
              RowBox[{"t", "'"}]}], ")"}]}]], ")"}], 
         RowBox[{"3", "/", "2"}]], " ", 
        RowBox[{
         StyleBox["d",
          FontWeight->"Bold"], "(", 
         RowBox[{
          RowBox[{
           StyleBox["p",
            FontWeight->"Bold"], "(", 
           RowBox[{"t", ",", 
            RowBox[{"t", "'"}]}], ")"}], "+", 
          RowBox[{
           StyleBox["A",
            FontWeight->"Bold"], "(", "t", ")"}]}], ")"}], " ", "\[Times]", 
        " ", 
        RowBox[{
         RowBox[{
          StyleBox["F",
           FontWeight->"Bold"], "(", 
          RowBox[{"t", "'"}], ")"}], "\[CenterDot]", 
         RowBox[{
          StyleBox["d",
           FontWeight->"Bold"], "(", 
          RowBox[{
           RowBox[{
            StyleBox["p",
             FontWeight->"Bold"], "(", 
            RowBox[{"t", ",", 
             RowBox[{"t", "'"}]}], ")"}], "+", 
           RowBox[{
            StyleBox["A",
             FontWeight->"Bold"], "(", 
            RowBox[{"t", "'"}], ")"}]}], ")"}]}], "\[Times]", 
        RowBox[{"exp", "[", 
         RowBox[{
          RowBox[{"-", "\[ImaginaryI]"}], " ", 
          RowBox[{"S", "(", 
           RowBox[{
            RowBox[{
             StyleBox["p",
              FontWeight->"Bold"], "(", 
             RowBox[{"t", ",", 
              RowBox[{"t", "'"}]}], ")"}], ",", "t", ",", 
            RowBox[{"t", "'"}]}], ")"}]}], "]"}]}]}]}], "+", 
     RowBox[{"c", ".", "c", "."}]}]}], TraditionalForm]]],
 "\n          \nA regularization factor ",
 Cell[BoxData[
  FormBox["\[Epsilon]", TraditionalForm]]],
 " has been introduced to prevent divergence of the prefactor as ",
 Cell[BoxData[
  FormBox[
   RowBox[{"t", "'"}], TraditionalForm]]],
 " approaches ",
 Cell[BoxData[
  FormBox["t", TraditionalForm]]],
 ".\n\nThe integral is performed with respect to the excursion time ",
 Cell[BoxData[
  FormBox[
   RowBox[{"\[Tau]", "=", 
    RowBox[{"t", "-", 
     RowBox[{"t", "'"}]}]}], TraditionalForm]]],
 " for simplicity. To reduce integration time, a gating function ",
 Cell[BoxData[
  FormBox[
   RowBox[{"gate", "[", 
    RowBox[{"\[Omega]", " ", "\[Tau]"}], "]"}], TraditionalForm]]],
 " has been introduced, and the integration time has been cut short to a \
controllable length. This is physically reasonable as the wavepacket \
spreading (which scales as ",
 Cell[BoxData[
  FormBox[
   SuperscriptBox["\[Tau]", 
    RowBox[{
     RowBox[{"-", "3"}], "/", "2"}]], TraditionalForm]]],
 ") makes the contributions after the gate negligible, and it also represents \
the fact that the contributions of trajectories with longer excursion times \
are much harder to phase match, as their harmonic phase is very sensitively \
dependent on ionization."
}], "Text",
 CellChangeTimes->{}],

Cell[BoxData["\[IndentingNewLine]"], "Input",
 CellChangeTimes->{}],

Cell[TextData[{
 "The field and the vector potential.\n\nAs explained in the preprint, this \
is essentially a superposition of two elliptical fields: a fundamental at \
frequency \[Omega]1, with ellipticity controlled by a waveplate angle \
\[Alpha], and its (presumably) second harmonic at frequency \[Omega]2, with \
ellipticity controlled by waveplate angle \[Beta]. The elliptical fundamental \
is split into a superposition of right- and left-circular fields and the \
counter-rotating field (left-circular) is detuned by a fractional detuning \
\[Delta], to a frequency ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{"(", 
     RowBox[{"1", "+", "\[Delta]"}], ")"}], "\[Omega]1"}], 
   TraditionalForm]]],
 ". The amplitudes of both fields are in principle equal, but they can be \
independently controlled. \n\nThere are also two important phases, \[Phi]1 \
and \[Phi]2. In many cases, \[Phi]1 will only produce a rotation of the total \
field, but \[Phi]2 can change the shape of the field and thus affect the \
physics. The effect of \[Phi]2 on the spectrum is an avenue of future \
research."
}], "Text",
 CellChangeTimes->{}],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"A", "[", 
    RowBox[{"t_", ",", 
     RowBox[{"{", 
      RowBox[{
      "\[Omega]1_", ",", "\[Omega]2_", ",", "\[Delta]_", ",", "F1_", ",", 
       "F2_", ",", "\[Alpha]_", ",", "\[Beta]_", ",", "\[Phi]1_", ",", 
       "\[Phi]2_", ",", "envelope_"}], "}"}]}], "]"}], ":=", 
   RowBox[{
    RowBox[{"envelope", "[", "t", "]"}], 
    RowBox[{"(", 
     RowBox[{
      RowBox[{
       FractionBox["F2", "\[Omega]2"], 
       RowBox[{"{", 
        RowBox[{
         RowBox[{
          RowBox[{"Cos", "[", "\[Beta]", "]"}], 
          RowBox[{"Cos", "[", 
           RowBox[{
            RowBox[{"\[Omega]2", " ", "t"}], "-", "\[Phi]1"}], "]"}]}], ",", 
         RowBox[{
          RowBox[{"Sin", "[", "\[Beta]", "]"}], 
          RowBox[{"Sin", "[", 
           RowBox[{
            RowBox[{"\[Omega]2", " ", "t"}], "-", "\[Phi]1"}], "]"}]}]}], 
        "}"}]}], "+", 
      RowBox[{
       FractionBox["F1", 
        SqrtBox["2"]], 
       RowBox[{"(", 
        RowBox[{
         RowBox[{
          FractionBox["1", "\[Omega]1"], 
          RowBox[{"Cos", "[", 
           RowBox[{"\[Alpha]", "-", 
            FractionBox["\[Pi]", "4"]}], "]"}], 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"Cos", "[", 
             RowBox[{
              RowBox[{"\[Omega]1", " ", "t"}], "+", "\[Phi]1"}], "]"}], ",", 
            RowBox[{"-", 
             RowBox[{"Sin", "[", 
              RowBox[{
               RowBox[{"\[Omega]1", " ", "t"}], "+", "\[Phi]1"}], "]"}]}]}], 
           "}"}]}], "+", 
         RowBox[{
          FractionBox["1", 
           RowBox[{
            RowBox[{"(", 
             RowBox[{"1", "+", "\[Delta]"}], ")"}], "\[Omega]1", " "}]], 
          RowBox[{"Sin", "[", 
           RowBox[{"\[Alpha]", "-", 
            FractionBox["\[Pi]", "4"]}], "]"}], 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"Cos", "[", 
             RowBox[{
              RowBox[{
               RowBox[{"(", 
                RowBox[{"1", "+", "\[Delta]"}], ")"}], "\[Omega]1", " ", 
               "t"}], "-", "\[Phi]1", "+", "\[Phi]2"}], "]"}], ",", 
            RowBox[{"+", 
             RowBox[{"Sin", "[", 
              RowBox[{
               RowBox[{
                RowBox[{"(", 
                 RowBox[{"1", "+", "\[Delta]"}], ")"}], "\[Omega]1", " ", 
                "t"}], " ", "-", "\[Phi]1", "+", "\[Phi]2"}], "]"}]}]}], 
           "}"}]}]}], ")"}]}]}], ")"}]}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"F", "[", 
    RowBox[{"t_", ",", 
     RowBox[{"{", 
      RowBox[{
      "\[Omega]1_", ",", "\[Omega]2_", ",", "\[Delta]_", ",", "F1_", ",", 
       "F2_", ",", "\[Alpha]_", ",", "\[Beta]_", ",", "\[Phi]1_", ",", 
       "\[Phi]2_", ",", "envelope_"}], "}"}]}], "]"}], "=", 
   RowBox[{"-", 
    RowBox[{"D", "[", 
     RowBox[{
      RowBox[{"A", "[", 
       RowBox[{"t", ",", 
        RowBox[{"{", 
         RowBox[{
         "\[Omega]1", ",", "\[Omega]2", ",", "\[Delta]", ",", "F1", ",", "F2",
           ",", "\[Alpha]", ",", "\[Beta]", ",", "\[Phi]1", ",", "\[Phi]2", 
          ",", "envelope"}], "}"}]}], "]"}], ",", "t"}], "]"}]}]}], 
  ";"}]}], "Input",
 InitializationCell->True],

Cell[BoxData["\[IndentingNewLine]"], "Input",
 CellChangeTimes->{}],

Cell["The dipole transition matrix element.", "Text",
 CellChangeTimes->{}],

Cell[BoxData[
 RowBox[{
  RowBox[{"dipole", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"px_", ",", "py_"}], "}"}], ",", "\[Kappa]_"}], "]"}], ":=", 
  RowBox[{
   FractionBox[
    RowBox[{"8", "\[ImaginaryI]"}], "\[Pi]"], 
   FractionBox[
    RowBox[{
     SqrtBox[
      RowBox[{"2", 
       SuperscriptBox["\[Kappa]", "5"]}]], 
     RowBox[{"{", 
      RowBox[{"px", ",", "py"}], "}"}]}], 
    SuperscriptBox[
     RowBox[{"(", 
      RowBox[{
       SuperscriptBox["px", "2"], "+", 
       SuperscriptBox["py", "2"], "+", 
       SuperscriptBox["\[Kappa]", "2"]}], ")"}], "3"]]}]}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{}],

Cell[BoxData["\[IndentingNewLine]"], "Input",
 CellChangeTimes->{}],

Cell["Various field envelopes.", "Text",
 CellChangeTimes->{}],

Cell[BoxData[{
 RowBox[{
  RowBox[{"flatTopEnvelope", "[", 
   RowBox[{"\[Omega]_", ",", "num_", ",", "nRamp_"}], "]"}], ":=", 
  RowBox[{"Function", "[", 
   RowBox[{"t", ",", 
    RowBox[{"Piecewise", "[", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"0", ",", 
         RowBox[{"t", "<", "0"}]}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{
         SuperscriptBox[
          RowBox[{"Sin", "[", 
           FractionBox[
            RowBox[{"\[Omega]", " ", "t"}], 
            RowBox[{"4", "nRamp"}]], "]"}], "2"], ",", 
         RowBox[{"0", "\[LessEqual]", "t", "<", 
          RowBox[{
           FractionBox[
            RowBox[{"2", " ", "\[Pi]"}], "\[Omega]"], " ", "nRamp"}]}]}], 
        "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"1", ",", 
         RowBox[{
          RowBox[{
           FractionBox[
            RowBox[{"2", " ", "\[Pi]"}], "\[Omega]"], "nRamp"}], 
          "\[LessEqual]", "t", "<", 
          RowBox[{
           FractionBox[
            RowBox[{"2", " ", "\[Pi]"}], "\[Omega]"], 
           RowBox[{"(", 
            RowBox[{"num", "-", "nRamp"}], ")"}]}]}]}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{
         SuperscriptBox[
          RowBox[{"Sin", "[", 
           FractionBox[
            RowBox[{"\[Omega]", " ", 
             RowBox[{"(", 
              RowBox[{
               RowBox[{
                FractionBox[
                 RowBox[{"2", " ", "\[Pi]"}], "\[Omega]"], "num"}], "-", 
               "t"}], ")"}]}], 
            RowBox[{"4", "nRamp"}]], "]"}], "2"], ",", 
         RowBox[{
          RowBox[{
           FractionBox[
            RowBox[{"2", " ", "\[Pi]"}], "\[Omega]"], 
           RowBox[{"(", 
            RowBox[{"num", "-", "nRamp"}], ")"}]}], "\[LessEqual]", "t", "<", 
          
          RowBox[{
           FractionBox[
            RowBox[{"2", " ", "\[Pi]"}], "\[Omega]"], "num"}]}]}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"0", ",", 
         RowBox[{
          RowBox[{
           FractionBox[
            RowBox[{"2", " ", "\[Pi]"}], "\[Omega]"], " ", "num"}], 
          "\[LessEqual]", "t"}]}], "}"}]}], "}"}], "]"}]}], 
   "]"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"flatEnvelope", "[", 
   RowBox[{"\[Omega]_", ",", "num_"}], "]"}], ":=", 
  RowBox[{"Function", "[", 
   RowBox[{"t", ",", "1"}], 
   RowBox[{"(*", 
    RowBox[{"Piecewise", "[", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"0", ",", 
         RowBox[{"t", "<", "0"}]}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"1", ",", 
         RowBox[{"0", "\[LessEqual]", "t", "<", 
          RowBox[{
           FractionBox[
            RowBox[{"2", " ", "\[Pi]"}], "\[Omega]"], "num"}]}]}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"0", ",", 
         RowBox[{
          RowBox[{
           FractionBox[
            RowBox[{"2", " ", "\[Pi]"}], "\[Omega]"], " ", "num"}], 
          "\[LessEqual]", "t"}]}], "}"}]}], "}"}], "]"}], "*)"}], 
   "]"}]}]}], "Input",
 InitializationCell->True,
 CellChangeTimes->{}],

Cell[BoxData["\[IndentingNewLine]"], "Input",
 CellChangeTimes->{}],

Cell["\<\
This is a visualization function which helps picture the field in different \
configurations\
\>", "Text",
 CellChangeTimes->{}],

Cell[BoxData[
 RowBox[{"(*", 
  RowBox[{
   StyleBox[
    RowBox[{
     StyleBox["Dynamic",
      FontSize->14], "Module"}]], 
   StyleBox["[",
    FontSize->14], 
   StyleBox["\[IndentingNewLine]",
    FontSize->14], 
   RowBox[{
    StyleBox[
     RowBox[{"{", 
      RowBox[{
       RowBox[{"F1", "=", "1"}], ",", 
       RowBox[{"F2", "=", "1"}], ",", 
       RowBox[{"\[Omega]2", "=", 
        RowBox[{"2", " ", "2", "\[Pi]"}]}], ",", 
       RowBox[{"\[Omega]1", "=", 
        RowBox[{"2", "\[Pi]"}]}], ",", "\[Alpha]", ",", "\[Beta]", ",", 
       RowBox[{"n", "=", "15"}], ",", 
       RowBox[{"envelope", "=", 
        RowBox[{"1", "&"}]}]}], "}"}],
     FontSize->14], 
    StyleBox[",",
     FontSize->14], "\[IndentingNewLine]", 
    RowBox[{"Manipulate", 
     StyleBox["[",
      FontSize->14], 
     StyleBox["\[IndentingNewLine]",
      FontSize->14], 
     RowBox[{
      RowBox[{
       StyleBox[
        RowBox[{"\[Alpha]", "=", 
         RowBox[{"a", " ", "\[Degree]"}]}],
        FontSize->14], 
       StyleBox[";",
        FontSize->14], 
       StyleBox[
        RowBox[{"\[Beta]", "=", 
         RowBox[{"b", " ", "\[Degree]"}]}],
        FontSize->14], 
       StyleBox[";",
        FontSize->14], "\[IndentingNewLine]", 
       RowBox[{"Show", "[", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"ParametricPlot", "[", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"F", "[", 
            RowBox[{"t", ",", 
             RowBox[{"{", 
              RowBox[{
              "\[Omega]1", ",", "\[Omega]2", ",", "\[Delta]", ",", "F1", ",", 
               "F2", ",", "\[Alpha]", ",", "\[Beta]", ",", "\[Phi]1", ",", 
               "\[Phi]2", ",", "envelope"}], "}"}]}], "]"}], 
           "\[IndentingNewLine]", ",", 
           RowBox[{"{", 
            RowBox[{"t", ",", "0", ",", "15"}], "}"}], "\[IndentingNewLine]", 
           ",", 
           RowBox[{"PlotRange", "\[Rule]", "2"}], "\[IndentingNewLine]", ",", 
           
           RowBox[{"Frame", "\[Rule]", "True"}], "\[IndentingNewLine]", ",", 
           RowBox[{"Axes", "\[Rule]", "None"}], "\[IndentingNewLine]", ",", 
           RowBox[{"ImageSize", "\[Rule]", "600"}], "\[IndentingNewLine]", 
           ",", 
           RowBox[{"PlotPoints", "\[Rule]", "100"}]}], "\[IndentingNewLine]", 
          "]"}], ",", "\[IndentingNewLine]", 
         RowBox[{"Graphics", "[", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"PointSize", "[", "Large", "]"}], ",", 
            "\[IndentingNewLine]", 
            RowBox[{"Point", "[", 
             RowBox[{"F", "[", 
              RowBox[{"tm", ",", 
               RowBox[{"{", 
                RowBox[{
                "\[Omega]1", ",", "\[Omega]2", ",", "\[Delta]", ",", "F1", 
                 ",", "F2", ",", "\[Alpha]", ",", "\[Beta]", ",", "\[Phi]1", 
                 ",", "\[Phi]2", ",", "envelope"}], "}"}]}], "]"}], "]"}]}], 
           "\[IndentingNewLine]", "}"}], "]"}]}], "\[IndentingNewLine]", 
        "]"}]}], "\[IndentingNewLine]", ",", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"tm", ",", "6", ",", 
          StyleBox["\"\<t\>\"",
           FontSize->14]}], 
         StyleBox["}",
          FontSize->14]}], 
        StyleBox[",",
         FontSize->14], 
        StyleBox["0",
         FontSize->14], 
        StyleBox[",",
         FontSize->14], 
        StyleBox["15",
         FontSize->14], 
        StyleBox[",",
         FontSize->14], 
        StyleBox[
         RowBox[{"ControlType", "\[Rule]", "Slider"}],
         FontSize->14], 
        StyleBox[",",
         FontSize->14], 
        StyleBox[
         RowBox[{"ImageSize", "\[Rule]", "600"}],
         FontSize->14], 
        StyleBox[",",
         FontSize->14], 
        StyleBox[
         RowBox[{"Appearance", "\[Rule]", "\"\<Labeled\>\""}],
         FontSize->14]}], 
       StyleBox["}",
        FontSize->14]}], 
      StyleBox["\[IndentingNewLine]",
       FontSize->14], 
      StyleBox[",",
       FontSize->14], 
      StyleBox[
       RowBox[{"{", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{
          "\[Delta]", ",", "0", ",", 
           "\"\<\!\(\*FractionBox[\(\[Omega]'\), \(\[Omega]\)]\)-1\>\""}], 
          "}"}], ",", 
         RowBox[{"-", "0.1"}], ",", "0.1", ",", 
         RowBox[{"ControlType", "\[Rule]", "Slider"}], ",", 
         RowBox[{"ImageSize", "\[Rule]", "600"}], ",", 
         RowBox[{"Appearance", "\[Rule]", "\"\<Labeled\>\""}]}], "}"}],
       FontSize->14], 
      StyleBox["\[IndentingNewLine]",
       FontSize->14], 
      StyleBox[",",
       FontSize->14], 
      StyleBox[
       RowBox[{"{", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"a", ",", "45", ",", "\"\<\[Alpha]\>\""}], "}"}], ",", 
         RowBox[{"-", "90"}], ",", "90", ",", 
         RowBox[{"ControlType", "\[Rule]", "Slider"}], ",", 
         RowBox[{"ImageSize", "\[Rule]", "600"}], ",", 
         RowBox[{"Appearance", "\[Rule]", "\"\<Labeled\>\""}]}], "}"}],
       FontSize->14], 
      StyleBox["\[IndentingNewLine]",
       FontSize->14], 
      StyleBox[",",
       FontSize->14], 
      StyleBox[
       RowBox[{"{", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"b", ",", "45", ",", "\"\<\[Beta]\>\""}], "}"}], ",", 
         RowBox[{"-", "90"}], ",", "90", ",", 
         RowBox[{"ControlType", "\[Rule]", "Slider"}], ",", 
         RowBox[{"ImageSize", "\[Rule]", "600"}], ",", 
         RowBox[{"Appearance", "\[Rule]", "\"\<Labeled\>\""}]}], "}"}],
       FontSize->14], 
      StyleBox["\[IndentingNewLine]",
       FontSize->14], 
      StyleBox[",",
       FontSize->14], 
      StyleBox[
       RowBox[{"{", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{
          "\[Phi]1", ",", "0", ",", 
           "\"\<\!\(\*SubscriptBox[\(\[Phi]\), \(1\)]\)\>\""}], "}"}], ",", 
         "0", ",", 
         RowBox[{"2", "\[Pi]"}], ",", 
         RowBox[{"ControlType", "\[Rule]", "Slider"}], ",", 
         RowBox[{"ImageSize", "\[Rule]", "600"}], ",", 
         RowBox[{"Appearance", "\[Rule]", "\"\<Labeled\>\""}]}], "}"}],
       FontSize->14], 
      StyleBox["\[IndentingNewLine]",
       FontSize->14], 
      StyleBox[",",
       FontSize->14], 
      StyleBox[
       RowBox[{"{", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{
          "\[Phi]2", ",", "1", ",", 
           "\"\<\!\(\*SubscriptBox[\(\[Phi]\), \(2\)]\)\>\""}], "}"}], ",", 
         "0", ",", 
         RowBox[{"2", "\[Pi]"}], ",", 
         RowBox[{"ControlType", "\[Rule]", "Slider"}], ",", 
         RowBox[{"ImageSize", "\[Rule]", "600"}], ",", 
         RowBox[{"Appearance", "\[Rule]", "\"\<Labeled\>\""}]}], "}"}],
       FontSize->14]}], 
     StyleBox["\[IndentingNewLine]",
      FontSize->14], 
     StyleBox["]",
      FontSize->14]}]}], 
   StyleBox["\[IndentingNewLine]",
    FontSize->14], 
   StyleBox["]",
    FontSize->14]}], "*)"}]], "Input",
 CellChangeTimes->{}],

Cell[BoxData[
 RowBox[{"\[IndentingNewLine]", "\[IndentingNewLine]", 
  "\[IndentingNewLine]"}]], "Input",
 CellChangeTimes->{}],

Cell["\<\
The standard options for the duration of the pulse and the resolution are\
\>", "Text",
 CellChangeTimes->{}],

Cell[BoxData[
 RowBox[{
  RowBox[{"standardOptions", "=", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"\"\<npp\>\"", "\[Rule]", "90"}], ",", 
     RowBox[{"\"\<nTop\>\"", "\[Rule]", "10"}], ",", 
     RowBox[{"\"\<nRamp\>\"", "\[Rule]", "3"}], ",", 
     RowBox[{"\"\<num\>\"", "\[Rule]", "Automatic"}], ",", 
     RowBox[{"\"\<\[Omega]1\>\"", "\[Rule]", "0.057"}]}], "}"}]}], 
  ";"}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{}],

Cell[TextData[{
 "npp dictates how many sampling points are used per laser cycle (at \
frequency \[Omega]1, of the infrared laser), and it should be at least twice \
the highest harmonic of interest. For a flat top envelope, nRamp and nTop \
give the durations of the on- and off- ramps, and of the flat top, in laser \
cycles. The total duration is ",
 Cell[BoxData[
  FormBox[
   RowBox[{"num", "=", 
    RowBox[{
     RowBox[{"2", "nRamp"}], "+", "nTop"}]}], TraditionalForm]]],
 ", and can be specified independently. \[Omega]1 is the frequency of the \
fundamental laser, in atomic units."
}], "Text",
 CellChangeTimes->{}],

Cell["", "Text",
 CellChangeTimes->{}],

Cell["", "Text",
 CellChangeTimes->{}],

Cell[TextData[{
 "harmonicOrderAxis produces a list that can be used as a harmonic order axis \
for the given pulse parameters. \n\nThe length can be fine-tuned (to match \
exactly a spectrum, for instance, and get a matrix of the correct shape) \
using the ",
 Cell[BoxData[
  FormBox["correction", TraditionalForm]]],
 " option, or a TargetLength can be directly specified."
}], "Text",
 CellChangeTimes->{}],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"Options", "[", "harmonicOrderAxis", "]"}], "=", 
   RowBox[{"standardOptions", "~", "Join", "~", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"\"\<correction\>\"", "\[Rule]", "1"}], ",", 
      RowBox[{"\"\<TargetLength\>\"", "\[Rule]", "Automatic"}]}], "}"}]}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"harmonicOrderAxis", "::", "target"}], "=", 
   "\"\<Invalid TargetLength option `1`. This must be a positive integer or \
Automatic.\>\""}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"harmonicOrderAxis", "[", 
   RowBox[{"OptionsPattern", "[", "]"}], "]"}], ":=", 
  RowBox[{"Module", "[", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"nTop", ",", "nRamp", ",", "num", ",", "npp"}], "}"}], ",", 
    "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"nTop", "=", 
      RowBox[{"OptionValue", "[", "\"\<nTop\>\"", "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"nRamp", "=", 
      RowBox[{"OptionValue", "[", "\"\<nRamp\>\"", "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"num", "=", 
      RowBox[{
       RowBox[{"2", "nRamp"}], "+", "nTop"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"npp", "=", 
      RowBox[{"OptionValue", "[", "\"\<npp\>\"", "]"}]}], ";", 
     "\[IndentingNewLine]", "\[IndentingNewLine]", 
     RowBox[{"Piecewise", "[", 
      RowBox[{
       RowBox[{"{", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{
           RowBox[{
            FractionBox["1", "num"], 
            RowBox[{"Range", "[", 
             RowBox[{"0.", ",", 
              RowBox[{
               RowBox[{"Round", "[", 
                FractionBox[
                 RowBox[{
                  RowBox[{"npp", " ", "num"}], "+", "1"}], "2."], "]"}], "-", 
               "1", "+", 
               RowBox[{"OptionValue", "[", "\"\<correction\>\"", "]"}]}]}], 
             "]"}]}], ",", 
           RowBox[{
            RowBox[{"OptionValue", "[", "\"\<TargetLength\>\"", "]"}], "===", 
            "Automatic"}]}], "}"}], ",", "\[IndentingNewLine]", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{
            FractionBox[
             RowBox[{"Round", "[", 
              FractionBox[
               RowBox[{
                RowBox[{"npp", " ", "num"}], "+", "1"}], "2."], "]"}], "num"], 
            FractionBox[
             RowBox[{"Range", "[", 
              RowBox[{"0", ",", 
               RowBox[{
                RowBox[{"OptionValue", "[", "\"\<TargetLength\>\"", "]"}], 
                "-", "1"}]}], "]"}], 
             RowBox[{"OptionValue", "[", "\"\<TargetLength\>\"", "]"}]]}], 
           ",", 
           RowBox[{
            RowBox[{"IntegerQ", "[", 
             RowBox[{"OptionValue", "[", "\"\<TargetLength\>\"", "]"}], "]"}],
             "&&", 
            RowBox[{
             RowBox[{"OptionValue", "[", "\"\<TargetLength\>\"", "]"}], 
             "\[GreaterEqual]", "0"}]}]}], "}"}]}], "\[IndentingNewLine]", 
        "}"}], ",", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"Message", "[", 
         RowBox[{
          RowBox[{"harmonicOrderAxis", "::", "target"}], ",", 
          RowBox[{"OptionValue", "[", "\"\<TargetLength\>\"", "]"}]}], "]"}], 
        ";", 
        RowBox[{"Abort", "[", "]"}]}]}], "\[IndentingNewLine]", "]"}]}]}], 
   "\[IndentingNewLine]", "]"}]}]}], "Input",
 InitializationCell->True,
 CellChangeTimes->{}],

Cell[BoxData["\[IndentingNewLine]"], "Input",
 CellChangeTimes->{}],

Cell["\<\
timeAxis produces a list that can be used as a time axis for the given pulse \
parameters.\
\>", "Text",
 CellChangeTimes->{}],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"Options", "[", "timeAxis", "]"}], "=", 
   RowBox[{"standardOptions", "~", "Join", "~", 
    RowBox[{"{", 
     RowBox[{"\"\<Scale\>\"", "\[Rule]", "\"\<AtomicUnits\>\""}], "}"}]}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"timeAxis", "::", "scale"}], "=", 
   "\"\<Invalid Scale option `1`. Available values are \\\"AtomicUnits\\\" \
and \\\"LaserPeriods\\\"\>\""}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"timeAxis", "[", 
   RowBox[{"OptionsPattern", "[", "]"}], "]"}], ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"T", ",", "num"}], "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"T", "=", 
      FractionBox[
       RowBox[{"2", "\[Pi]"}], 
       RowBox[{"OptionValue", "[", "\"\<\[Omega]1\>\"", "]"}]]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"num", "=", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"OptionValue", "[", "\"\<num\>\"", "]"}], "===", 
         "Automatic"}], ",", 
        RowBox[{
         RowBox[{"OptionValue", "[", "\"\<nTop\>\"", "]"}], "+", 
         RowBox[{"2", 
          RowBox[{"OptionValue", "[", "\"\<nRamp\>\"", "]"}]}]}], ",", 
        RowBox[{"OptionValue", "[", "\"\<num\>\"", "]"}]}], "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"Piecewise", "[", 
       RowBox[{
        RowBox[{"{", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"1", ",", 
            RowBox[{
             RowBox[{"OptionValue", "[", "\"\<Scale\>\"", "]"}], "\[Equal]", 
             "\"\<AtomicUnits\>\""}]}], "}"}], ",", "\[IndentingNewLine]", 
          RowBox[{"{", 
           RowBox[{
            FractionBox["1", "T"], ",", 
            RowBox[{
             RowBox[{"OptionValue", "[", "\"\<Scale\>\"", "]"}], "\[Equal]", 
             "\"\<LaserPeriods\>\""}]}], "}"}]}], "\[IndentingNewLine]", 
         "}"}], ",", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"Message", "[", 
          RowBox[{
           RowBox[{"timeAxis", "::", "scale"}], ",", 
           RowBox[{"OptionValue", "[", "\"\<Scale\>\"", "]"}]}], "]"}], ";", 
         RowBox[{"Abort", "[", "]"}]}]}], "\[IndentingNewLine]", "]"}], 
      "\[Times]", 
      RowBox[{"Table", "[", 
       RowBox[{"t", "\[IndentingNewLine]", ",", 
        RowBox[{"{", 
         RowBox[{"t", ",", "0", ",", 
          RowBox[{"num", 
           FractionBox[
            RowBox[{"2", "\[Pi]"}], 
            RowBox[{"OptionValue", "[", "\"\<\[Omega]1\>\"", "]"}]]}], ",", 
          RowBox[{
           FractionBox["num", 
            RowBox[{
             RowBox[{"num", "\[Times]", 
              RowBox[{"OptionValue", "[", "\"\<npp\>\"", "]"}]}], "+", "1"}]], 
           FractionBox[
            RowBox[{"2", "\[Pi]"}], 
            RowBox[{"OptionValue", "[", "\"\<\[Omega]1\>\"", "]"}]]}]}], 
         "}"}]}], "\[IndentingNewLine]", "]"}]}]}]}], "\[IndentingNewLine]", 
   "]"}]}]}], "Input",
 InitializationCell->True,
 CellChangeTimes->{}],

Cell[BoxData[
 RowBox[{"\[IndentingNewLine]", "\[IndentingNewLine]"}]], "Input",
 CellChangeTimes->{}],

Cell[TextData[{
 "getSpectrum takes a time-dependent dipole list and returns its Fourier \
transform in absolute-value-squared. It takes as options\n  ",
 StyleBox["\[CenterDot]",
  FontWeight->"Bold"],
 " pulse parameters \[Omega]1, num and npp,\n  ",
 StyleBox["\[CenterDot]",
  FontWeight->"Bold"],
 " a polarization parameter \[Epsilon], which gives an unpolarized spectrum \
when given False, or polarizes along an ellipticity \[Epsilon] if that is a \
number (this is meant primarily to select right- and left-circularly \
polarized spectra using ",
 Cell[BoxData[
  FormBox[
   RowBox[{"\[Epsilon]", "=", "1"}], TraditionalForm]]],
 " and ",
 Cell[BoxData[
  FormBox[
   RowBox[{"\[Epsilon]", "=", 
    RowBox[{"-", "1"}]}], TraditionalForm]]],
 " respectively),\n  ",
 StyleBox["\[CenterDot]",
  FontWeight->"Bold"],
 " a DifferentiationOrder, which can return the dipole value (default,",
 Cell[BoxData[
  FormBox[
   RowBox[{"=", "0"}], TraditionalForm]]],
 "), velocity (",
 Cell[BoxData[
  FormBox[
   RowBox[{"=", "1"}], TraditionalForm]]],
 "), or acceleration (",
 Cell[BoxData[
  FormBox[
   RowBox[{"=", "2"}], TraditionalForm]]],
 "), \n  \[CenterDot] a power of \[Omega], \[Omega]Power, with which to \
multiply the spectrum before returning it (which should be equivalent to \
DifferentiationOrder except for pathological cases), and\n  \[CenterDot] a \
Part function to apply immediately after differentiation (default is the \
identity function, but Re, Im, or ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SuperscriptBox[
     RowBox[{"Abs", "[", "#", "]"}], "2"], "&"}], TraditionalForm]]],
 " are reasonable choices).\nIf no option is passed to ",
 Cell[BoxData[
  FormBox["\[Omega]Power", TraditionalForm]]],
 " and DifferentiationOrder, the pulse parameters do not really affect the \
output, except by a global factor of num."
}], "Text",
 CellChangeTimes->{}],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"Options", "[", "getSpectrum", "]"}], "=", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"\"\<\[Epsilon]\>\"", "\[Rule]", "False"}], ",", 
      RowBox[{"\"\<Part\>\"", "\[Rule]", 
       RowBox[{"(", 
        RowBox[{"#", "&"}], ")"}]}], ",", 
      RowBox[{"\"\<\[Omega]Power\>\"", "\[Rule]", "0"}], ",", 
      RowBox[{"\"\<DifferentiationOrder\>\"", "\[Rule]", "0"}]}], "}"}], "~", 
    "Join", "~", "standardOptions"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"getSpectrum", "::", "diffOrd"}], "=", 
   "\"\<Invalid differentiation order `1`.\>\""}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"getSpectrum", "::", "\[Omega]Pow"}], "=", 
   "\"\<Invalid \[Omega] power `1`.\>\""}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"getSpectrum", "[", 
   RowBox[{"dipoleList_", ",", 
    RowBox[{"OptionsPattern", "[", "]"}]}], "]"}], ":=", 
  RowBox[{"Module", "[", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
     "\[Epsilon]", ",", "differentiatedList", ",", "depth", ",", 
      "\[IndentingNewLine]", 
      RowBox[{"\[Delta]t", "=", 
       FractionBox[
        RowBox[{"2", 
         RowBox[{"\[Pi]", "/", 
          RowBox[{"OptionValue", "[", "\"\<\[Omega]1\>\"", "]"}]}]}], 
        RowBox[{"OptionValue", "[", "\"\<npp\>\"", "]"}]]}], ",", 
      "\[IndentingNewLine]", 
      RowBox[{"num", "=", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{"NumberQ", "[", 
          RowBox[{"OptionValue", "[", "\"\<num\>\"", "]"}], "]"}], ",", 
         RowBox[{"OptionValue", "[", "\"\<num\>\"", "]"}], ",", 
         RowBox[{
          RowBox[{"2", 
           RowBox[{"OptionValue", "[", "\"\<nRamp\>\"", "]"}]}], "+", 
          RowBox[{"OptionValue", "[", "\"\<nTop\>\"", "]"}]}]}], "]"}]}]}], 
     "\[IndentingNewLine]", "}"}], ",", "\[IndentingNewLine]", 
    "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"differentiatedList", "=", 
      RowBox[{
       RowBox[{"OptionValue", "[", "\"\<Part\>\"", "]"}], "[", 
       RowBox[{"Piecewise", "[", 
        RowBox[{
         RowBox[{"{", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"dipoleList", ",", 
             RowBox[{
              RowBox[{
              "OptionValue", "[", "\"\<DifferentiationOrder\>\"", "]"}], 
              "\[Equal]", "0"}]}], "}"}], ",", "\[IndentingNewLine]", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{
              FractionBox["1", 
               RowBox[{"2", "\[Delta]t"}]], 
              RowBox[{"(", 
               RowBox[{
                RowBox[{"Most", "[", 
                 RowBox[{"Most", "[", "dipoleList", "]"}], "]"}], "-", 
                RowBox[{"Rest", "[", 
                 RowBox[{"Rest", "[", "dipoleList", "]"}], "]"}]}], ")"}]}], 
             ",", 
             RowBox[{
              RowBox[{
              "OptionValue", "[", "\"\<DifferentiationOrder\>\"", "]"}], 
              "\[Equal]", "1"}]}], "}"}], ",", "\[IndentingNewLine]", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{
              FractionBox["1", 
               SuperscriptBox["\[Delta]t", "2"]], 
              RowBox[{"(", 
               RowBox[{
                RowBox[{"Most", "[", 
                 RowBox[{"Most", "[", "dipoleList", "]"}], "]"}], "-", 
                RowBox[{"2", 
                 RowBox[{"Most", "[", 
                  RowBox[{"Rest", "[", "dipoleList", "]"}], "]"}]}], "+", 
                RowBox[{"Rest", "[", 
                 RowBox[{"Rest", "[", "dipoleList", "]"}], "]"}]}], ")"}]}], 
             ",", 
             RowBox[{
              RowBox[{
              "OptionValue", "[", "\"\<DifferentiationOrder\>\"", "]"}], 
              "\[Equal]", "2"}]}], "}"}]}], "}"}], ",", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"Message", "[", 
           RowBox[{
            RowBox[{"getSpectrum", "::", "diffOrd"}], ",", 
            RowBox[{
            "OptionValue", "[", "\"\<DifferentiationOrder\>\"", "]"}]}], 
           "]"}], ";", 
          RowBox[{"Abort", "[", "]"}]}]}], "\[IndentingNewLine]", "]"}], 
       "]"}]}], ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{"NumberQ", "[", 
        RowBox[{"OptionValue", "[", "\"\<\[Omega]Power\>\"", "]"}], "]"}], 
       ",", 
       RowBox[{"Null", ";"}], ",", 
       RowBox[{
        RowBox[{"Message", "[", 
         RowBox[{
          RowBox[{"getSpectrum", "::", "\[Omega]Pow"}], ",", 
          RowBox[{"OptionValue", "[", "\"\<\[Omega]Power\>\"", "]"}]}], "]"}],
         ";", 
        RowBox[{"Abort", "[", "]"}]}]}], "  ", "]"}], ";", 
     "\[IndentingNewLine]", "\[IndentingNewLine]", 
     RowBox[{"num", " ", 
      RowBox[{"Table", "[", "\[IndentingNewLine]", 
       RowBox[{
        SuperscriptBox[
         RowBox[{"(", 
          RowBox[{
           FractionBox[
            RowBox[{"OptionValue", "[", "\"\<\[Omega]1\>\"", "]"}], "num"], 
           " ", "k"}], ")"}], 
         RowBox[{"2", 
          RowBox[{"OptionValue", "[", "\"\<\[Omega]Power\>\"", "]"}]}]], ",", 
        
        RowBox[{"{", 
         RowBox[{"k", ",", "1", ",", 
          RowBox[{"Round", "[", 
           FractionBox[
            RowBox[{"Length", "[", "differentiatedList", "]"}], "2"], "]"}]}],
          "}"}]}], "\[IndentingNewLine]", "]"}], "\[Times]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"NumberQ", "[", 
         RowBox[{"\[Epsilon]", "=", 
          RowBox[{"OptionValue", "[", "\"\<\[Epsilon]\>\"", "]"}]}], "]"}], 
        ",", "\[IndentingNewLine]", 
        RowBox[{"(*", 
         RowBox[{"polarized", " ", "spectrum"}], "*)"}], 
        "\[IndentingNewLine]", 
        SuperscriptBox[
         RowBox[{"Abs", "[", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{
            RowBox[{"Transpose", "[", 
             RowBox[{"Table", "[", "\[IndentingNewLine]", 
              RowBox[{
               RowBox[{"Fourier", "[", "\[IndentingNewLine]", 
                RowBox[{
                 RowBox[{"Re", "[", 
                  RowBox[{"differentiatedList", "\[LeftDoubleBracket]", 
                   RowBox[{"All", ",", "i"}], "\[RightDoubleBracket]"}], 
                  "]"}], "\[IndentingNewLine]", ",", 
                 RowBox[{"FourierParameters", "\[Rule]", 
                  RowBox[{"{", 
                   RowBox[{
                    RowBox[{"-", "1"}], ",", " ", "1"}], "}"}]}]}], 
                "\[IndentingNewLine]", "]"}], "\[IndentingNewLine]", ",", 
               RowBox[{"{", 
                RowBox[{"i", ",", "1", ",", "2"}], "}"}]}], "]"}], "]"}], 
            "\[LeftDoubleBracket]", 
            RowBox[{"1", ";;", 
             RowBox[{"Round", "[", 
              RowBox[{
               RowBox[{"Length", "[", "differentiatedList", "]"}], "/", "2"}],
               "]"}]}], "\[RightDoubleBracket]"}], ".", 
           FractionBox[
            RowBox[{"{", 
             RowBox[{"1", ",", 
              RowBox[{"\[ImaginaryI]", " ", "\[Epsilon]"}]}], "}"}], 
            SqrtBox[
             RowBox[{"1", "+", 
              SuperscriptBox[
               RowBox[{"Abs", "[", "\[Epsilon]", "]"}], "2"]}]]]}], 
          "\[IndentingNewLine]", "]"}], "2"], "\[IndentingNewLine]", ",", 
        "\[IndentingNewLine]", 
        RowBox[{"(*", 
         RowBox[{"unpolarized", " ", "spectrum"}], "*)"}], 
        "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"depth", "=", 
          RowBox[{
           RowBox[{
            RowBox[{"If", "[", 
             RowBox[{
              RowBox[{
               RowBox[{"Length", "[", "#", "]"}], ">", "1"}], ",", 
              RowBox[{
              "#", "\[LeftDoubleBracket]", "2", "\[RightDoubleBracket]"}], 
              ",", 
              RowBox[{
              "#", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}]}], 
             "]"}], "&"}], "[", 
           RowBox[{"Dimensions", "[", "dipoleList", "]"}], "]"}]}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"Sum", "[", 
          RowBox[{
           SuperscriptBox[
            RowBox[{"Abs", "[", "\[IndentingNewLine]", 
             RowBox[{
              RowBox[{"Fourier", "[", "\[IndentingNewLine]", 
               RowBox[{
                RowBox[{"If", "[", 
                 RowBox[{
                  RowBox[{"depth", ">", "1"}], ",", 
                  RowBox[{"Re", "[", 
                   RowBox[{"differentiatedList", "\[LeftDoubleBracket]", 
                    RowBox[{"All", ",", "i"}], "\[RightDoubleBracket]"}], 
                   "]"}], ",", 
                  RowBox[{"Re", "[", 
                   RowBox[{
                   "differentiatedList", "\[LeftDoubleBracket]", "i", 
                    "\[RightDoubleBracket]"}], "]"}]}], "]"}], 
                "\[IndentingNewLine]", 
                RowBox[{"(*", 
                 RowBox[{
                  RowBox[{
                  "funky", " ", "depth", " ", "thing", " ", "so", " ", "this",
                    " ", "can", " ", "take", " ", "lists", " ", "of", " ", 
                   "numbers", " ", "and", " ", "lists", " ", "of", " ", 
                   "vectors"}], ",", " ", 
                  RowBox[{"of", " ", "arbitrary", " ", 
                   RowBox[{"length", ".", " ", "Makes"}], " ", "for", " ", 
                   "easier", " ", 
                   RowBox[{"benchmarking", "."}]}]}], "*)"}], 
                "\[IndentingNewLine]", ",", 
                RowBox[{"FourierParameters", "\[Rule]", 
                 RowBox[{"{", 
                  RowBox[{
                   RowBox[{"-", "1"}], ",", " ", "1"}], "}"}]}]}], 
               "\[IndentingNewLine]", "]"}], "\[LeftDoubleBracket]", 
              RowBox[{"1", ";;", 
               RowBox[{"Round", "[", 
                FractionBox[
                 RowBox[{"Length", "[", "differentiatedList", "]"}], "2"], 
                "]"}]}], "\[RightDoubleBracket]"}], "\[IndentingNewLine]", 
             "]"}], "2"], ",", 
           RowBox[{"{", 
            RowBox[{"i", ",", "1", ",", "depth"}], "}"}]}], "]"}]}]}], 
       "\[IndentingNewLine]", "]"}]}]}]}], "\[IndentingNewLine]", 
   "]"}]}]}], "Input",
 InitializationCell->True,
 CellChangeTimes->{}],

Cell["The following can be used to benchmark this code ", "Text",
 CellChangeTimes->{}],

Cell[BoxData[
 RowBox[{"(*", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"npp", "=", "5000"}], ",", 
      RowBox[{"num", "=", "4"}], ",", 
      RowBox[{"\[Omega]", "=", "2"}]}], "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{"ListLinePlot", "[", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"Transpose", "[", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"harmonicOrderAxis", "[", 
          RowBox[{
           RowBox[{"\"\<correction\>\"", "\[Rule]", "0"}], ",", 
           RowBox[{"\"\<npp\>\"", "\[Rule]", "npp"}], ",", 
           RowBox[{"\"\<nRamp\>\"", "\[Rule]", "0"}], ",", 
           RowBox[{"\"\<nTop\>\"", "\[Rule]", "num"}]}], 
          RowBox[{"(*", 
           RowBox[{",", 
            RowBox[{"\"\<\[Omega]1\>\"", "\[Rule]", "\[Omega]"}]}], "*)"}], 
          "]"}], ",", "\[IndentingNewLine]", 
         RowBox[{"getSpectrum", "[", " ", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"Table", "[", "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{
              RowBox[{
               RowBox[{"{", 
                RowBox[{"1", ",", "0"}], "}"}], 
               RowBox[{"Sin", "[", 
                RowBox[{"\[Omega]", " ", "t"}], "]"}]}], "+", 
              RowBox[{
               RowBox[{"{", 
                RowBox[{"0", ",", "1"}], "}"}], 
               RowBox[{"Sin", "[", 
                RowBox[{"2", " ", "\[Omega]", " ", "t"}], "]"}]}], "+", 
              RowBox[{
               RowBox[{"{", 
                RowBox[{"0", ",", "1"}], "}"}], 
               RowBox[{"Sin", "[", 
                RowBox[{"3", " ", "\[Omega]", " ", "t"}], "]"}]}]}], 
             "\[IndentingNewLine]", ",", 
             RowBox[{"{", 
              RowBox[{"t", ",", "0", ",", 
               RowBox[{"num", " ", 
                FractionBox[
                 RowBox[{"2", "\[Pi]"}], "\[Omega]"]}], ",", 
               RowBox[{
                FractionBox["1", 
                 RowBox[{" ", "npp"}]], 
                FractionBox[
                 RowBox[{"2", "\[Pi]"}], "\[Omega]"]}]}], "}"}]}], "]"}], 
           "\[IndentingNewLine]", ",", 
           RowBox[{"\"\<DifferentiationOrder\>\"", "\[Rule]", "0"}], ",", 
           RowBox[{"\"\<\[Omega]Power\>\"", "\[Rule]", "0"}], ",", 
           RowBox[{"\"\<\[Omega]1\>\"", "\[Rule]", "\[Omega]"}], ",", 
           RowBox[{"\"\<num\>\"", "\[Rule]", "num"}], ",", 
           RowBox[{"\"\<npp\>\"", "\[Rule]", "npp"}]}], "]"}]}], 
        "\[IndentingNewLine]", "}"}], "]"}], "\[IndentingNewLine]", ",", 
      RowBox[{"PlotRange", "\[Rule]", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"0", ",", "4"}], "}"}], ",", "Full"}], "}"}]}], 
      "\[IndentingNewLine]", ",", 
      RowBox[{"ImageSize", "\[Rule]", "400"}], "\[IndentingNewLine]", ",", 
      RowBox[{"Frame", "\[Rule]", "True"}]}], "\[IndentingNewLine]", "]"}]}], 
   "\[IndentingNewLine]", "]"}], "*)"}]], "Input",
 CellChangeTimes->{}],

Cell[BoxData["\[IndentingNewLine]"], "Input",
 CellChangeTimes->{}],

Cell["\<\
spectrumPlotter takes a spectrum and a list of options and returns a plot of \
the spectrum. The available options are
  \[CenterDot] an Axis option, which will give the harmonic order as a \
horizontal axis by default, and an arbitrary scale with any other option,
  \[CenterDot] all the options of harmonicOrderAxis, which will be passed to \
the call that makes the horizontal axis, and
  \[CenterDot] all the options of ListLinePlot, which will be used to format \
the plot.\
\>", "Text",
 CellChangeTimes->{}],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"Options", "[", "spectrumPlotter", "]"}], "=", 
   RowBox[{"Join", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"\"\<Axis\>\"", "\[Rule]", "\"\<HarmonicOrder\>\""}], "}"}], 
     ",", 
     RowBox[{"Options", "[", "harmonicOrderAxis", "]"}], ",", 
     RowBox[{"Options", "[", "ListLinePlot", "]"}]}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"spectrumPlotter", "[", 
   RowBox[{"spectrum_", ",", 
    RowBox[{"options", ":", 
     RowBox[{"OptionsPattern", "[", "]"}]}]}], "]"}], ":=", 
  RowBox[{"ListPlot", "[", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"OptionValue", "[", "\"\<Axis\>\"", "]"}], "===", 
          "\"\<HarmonicOrder\>\""}], ",", "\[IndentingNewLine]", 
         RowBox[{"harmonicOrderAxis", "[", 
          RowBox[{
           RowBox[{"\"\<TargetLength\>\"", "\[Rule]", 
            RowBox[{"Length", "[", "spectrum", "]"}]}], ",", 
           RowBox[{"Sequence", "@@", 
            RowBox[{"FilterRules", "[", 
             RowBox[{
              RowBox[{
               RowBox[{"{", "options", "}"}], "~", "Join", "~", 
               RowBox[{"Options", "[", "spectrumPlotter", "]"}]}], ",", 
              RowBox[{"Options", "[", "harmonicOrderAxis", "]"}]}], "]"}]}]}],
           "]"}], ",", "\[IndentingNewLine]", 
         RowBox[{"Range", "[", 
          RowBox[{"Length", "[", "spectrum", "]"}], "]"}]}], 
        "\[IndentingNewLine]", "]"}], ",", "\[IndentingNewLine]", 
       RowBox[{"Log", "[", 
        RowBox[{"10", ",", "spectrum"}], "]"}]}], "\[IndentingNewLine]", 
      "}"}], "\[Transpose]"}], "\[IndentingNewLine]", ",", 
    RowBox[{"Sequence", "@@", 
     RowBox[{"FilterRules", "[", 
      RowBox[{
       RowBox[{"{", "options", "}"}], ",", 
       RowBox[{"Options", "[", "ListLinePlot", "]"}]}], "]"}]}], 
    "\[IndentingNewLine]", ",", 
    RowBox[{"Joined", "\[Rule]", "True"}], "\[IndentingNewLine]", ",", 
    RowBox[{"PlotRange", "\[Rule]", "Full"}], "\[IndentingNewLine]", ",", 
    RowBox[{"PlotStyle", "\[Rule]", "Thick"}], "\[IndentingNewLine]", ",", 
    RowBox[{"Frame", "\[Rule]", "True"}], "\[IndentingNewLine]", ",", 
    RowBox[{"Axes", "\[Rule]", "False"}], "\[IndentingNewLine]", ",", 
    RowBox[{"ImageSize", "\[Rule]", "800"}]}], "\[IndentingNewLine]", 
   "]"}]}]}], "Input",
 InitializationCell->True,
 CellChangeTimes->{}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"spectrumPlotter", "[", 
  RowBox[{
   RowBox[{"getSpectrum", "[", "testDipoleList", "]"}], ",", 
   RowBox[{"PlotRange", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"9", ",", "24"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"-", "12"}], ",", 
        RowBox[{"-", "3"}]}], "}"}]}], "}"}]}]}], "]"}]], "Input",
 CellChangeTimes->{}],

Cell[BoxData[
 GraphicsBox[{{}, 
   {RGBColor[0.368417, 0.506779, 0.709798], PointSize[0.008333333333333333], 
    Thickness[Large], LineBox[CompressedData["
1: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
     "]]}, {}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{False, False},
  AxesLabel->{None, None},
  AxesOrigin->{9.075, -3.045},
  DisplayFunction->Identity,
  Frame->{{True, True}, {True, True}},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  ImageSize->800,
  Method->{},
  PlotRange->{{9, 24}, {-12, -3}},
  PlotRangeClipping->True,
  PlotRangePadding->{{0, 0}, {0, 0}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{}]
}, Open  ]],

Cell[BoxData["\[IndentingNewLine]"], "Input",
 CellChangeTimes->{}],

Cell["\<\
biColorSpectrum takes a time-dependent dipole list and produces overlaid \
plots of the right- and left-circular components of the spectrum, in red and \
blue respectively. It takes all the options of getSpectrum and \
spectrumPlotter, which are passed directly to the corresponding calls, as \
well as the options of Show, which can be used to modify the plot appearance.\
\
\>", "Text",
 CellChangeTimes->{}],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"Options", "[", "biColorSpectrum", "]"}], "=", 
   RowBox[{"Join", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"PlotRange", "\[Rule]", "All"}], "}"}], ",", 
     RowBox[{"Options", "[", "Show", "]"}], ",", 
     RowBox[{"Options", "[", "spectrumPlotter", "]"}], ",", 
     RowBox[{"DeleteCases", "[", 
      RowBox[{
       RowBox[{"Options", "[", "getSpectrum", "]"}], ",", 
       RowBox[{"\"\<\[Epsilon]\>\"", "\[Rule]", "False"}]}], "]"}]}], "]"}]}],
   ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"biColorSpectrum", "[", 
   RowBox[{"dipoleList_", ",", 
    RowBox[{"options", ":", 
     RowBox[{"OptionsPattern", "[", "]"}]}]}], "]"}], ":=", 
  RowBox[{"Show", "[", 
   RowBox[{
    RowBox[{"{", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"spectrumPlotter", "[", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"getSpectrum", "[", 
         RowBox[{"dipoleList", ",", 
          RowBox[{"\"\<\[Epsilon]\>\"", "\[Rule]", "1"}], ",", 
          RowBox[{"Sequence", "@@", 
           RowBox[{"FilterRules", "[", 
            RowBox[{
             RowBox[{"{", "options", "}"}], ",", 
             RowBox[{"Options", "[", "getSpectrum", "]"}]}], "]"}]}]}], "]"}],
         ",", "\[IndentingNewLine]", 
        RowBox[{"PlotStyle", "\[Rule]", "Red"}], ",", 
        RowBox[{"Sequence", "@@", 
         RowBox[{"FilterRules", "[", 
          RowBox[{
           RowBox[{"{", "options", "}"}], ",", 
           RowBox[{"Options", "[", "spectrumPlotter", "]"}]}], "]"}]}]}], 
       "]"}], ",", "\[IndentingNewLine]", 
      RowBox[{"spectrumPlotter", "[", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"getSpectrum", "[", 
         RowBox[{"dipoleList", ",", 
          RowBox[{"\"\<\[Epsilon]\>\"", "\[Rule]", 
           RowBox[{"-", "1"}]}], ",", 
          RowBox[{"Sequence", "@@", 
           RowBox[{"FilterRules", "[", 
            RowBox[{
             RowBox[{"{", "options", "}"}], ",", 
             RowBox[{"Options", "[", "getSpectrum", "]"}]}], "]"}]}]}], "]"}],
         ",", "\[IndentingNewLine]", 
        RowBox[{"PlotStyle", "\[Rule]", "Blue"}], ",", 
        RowBox[{"Sequence", "@@", 
         RowBox[{"FilterRules", "[", 
          RowBox[{
           RowBox[{"{", "options", "}"}], ",", 
           RowBox[{"Options", "[", "spectrumPlotter", "]"}]}], "]"}]}]}], 
       "]"}]}], "\[IndentingNewLine]", "}"}], "\[IndentingNewLine]", ",", 
    RowBox[{"PlotRange", "\[Rule]", 
     RowBox[{"OptionValue", "[", "PlotRange", "]"}]}], "\[IndentingNewLine]", 
    ",", 
    RowBox[{"Sequence", "@@", 
     RowBox[{"FilterRules", "[", 
      RowBox[{
       RowBox[{"{", "options", "}"}], ",", 
       RowBox[{"Options", "[", "Show", "]"}]}], "]"}]}]}], 
   "\[IndentingNewLine]", "]"}]}]}], "Input",
 InitializationCell->True,
 CellChangeTimes->{}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"biColorSpectrum", "[", "testDipoleList", "]"}]], "Input",
 CellChangeTimes->{}],

Cell[BoxData[
 GraphicsBox[{{{}, {{}, {}, 
     {RGBColor[1, 0, 0], PointSize[0.008333333333333333], AbsoluteThickness[
      1.6], LineBox[CompressedData["
1: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
D5jphPlzIIjrDPVqQh3R/+gCtvY=
       "]]}}, {}}, {{}, {{}, {}, 
     {RGBColor[0, 0, 1], PointSize[0.008333333333333333], AbsoluteThickness[
      1.6], LineBox[CompressedData["
1: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
r35QYj00x/2zF/i3cZtqPa3Q/wEGhNPk
       "]]}}, {}}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{False, False},
  AxesLabel->{None, None},
  AxesOrigin->{0, 0},
  DisplayFunction->Identity,
  Frame->{{True, True}, {True, True}},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  ImageSize->800,
  Method->{},
  PlotRange->All,
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.05], 
     Scaled[0.02]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{}]
}, Open  ]],

Cell[BoxData[
 RowBox[{"\[IndentingNewLine]", "\[IndentingNewLine]"}]], "Input",
 CellChangeTimes->{}],

Cell["\<\
The functions below can be used for rudimentary Gabor analysis of the signal. \
This is useful to check for certain artifacts (for example, if the ramps are \
too steep then the spectrum can get distorted by large contributions coming \
from the topmost periods of the on- and off-ramps.\
\>", "Text",
 CellChangeTimes->{}],

Cell[BoxData[""], "Input",
 CellChangeTimes->{}],

Cell[TextData[{
 "gaussianGate takes a central time ",
 Cell[BoxData[
  FormBox["t0", TraditionalForm]]],
 " and a width ",
 Cell[BoxData[
  FormBox["\[Sigma]", TraditionalForm]]],
 " and returns a gaussian gate (i.e. a list with a gaussian profile around \
that central time) which should multiply the time series to be analysed. Both \
arguments can be functions of the strings ",
 Cell[BoxData[
  FormBox["\"\<T\>\"", TraditionalForm]]],
 " and ",
 Cell[BoxData[
  FormBox["\"\<\[Omega]1\>\"", TraditionalForm]]],
 ", which will be substituted for a single cycle of the laser fundamental and \
its frequency, respectively."
}], "Text",
 CellChangeTimes->{}],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"Options", "[", "gaussianGate", "]"}], "=", "standardOptions"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"gaussianGate", "[", 
   RowBox[{"t0_", ",", "\[Sigma]_"}], "]"}], ":=", 
  RowBox[{"gaussianGate", "[", 
   RowBox[{"t0", ",", "\[Sigma]", ",", 
    RowBox[{"Sequence", "@@", 
     RowBox[{"Options", "[", "gaussianGate", "]"}]}]}], 
   "]"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"gaussianGate", "[", 
   RowBox[{"t0_", ",", "\[Sigma]_", ",", 
    RowBox[{"options", ":", 
     RowBox[{"OptionsPattern", "[", "]"}]}]}], "]"}], ":=", 
  RowBox[{"Table", "[", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"Exp", "[", 
      RowBox[{
       RowBox[{"-", 
        FractionBox["1", "2"]}], 
       FractionBox[
        SuperscriptBox[
         RowBox[{"(", 
          RowBox[{"t", "-", "t0"}], ")"}], "2"], 
        SuperscriptBox["\[Sigma]", "2"]]}], "]"}], "/.", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"\"\<\[Omega]1\>\"", "\[Rule]", 
        RowBox[{"OptionValue", "[", "\"\<\[Omega]1\>\"", "]"}]}], ",", 
       RowBox[{"\"\<T\>\"", "\[Rule]", 
        RowBox[{"2", 
         RowBox[{"\[Pi]", "/", 
          RowBox[{"OptionValue", "[", "\"\<\[Omega]1\>\"", "]"}]}]}]}]}], 
      "}"}]}], "\[IndentingNewLine]", ",", 
    RowBox[{"{", 
     RowBox[{"t", ",", 
      RowBox[{"timeAxis", "[", "options", "]"}]}], "}"}]}], 
   "\[IndentingNewLine]", "]"}]}]}], "Input",
 InitializationCell->True,
 CellChangeTimes->{}],

Cell[BoxData[""], "Input",
 CellChangeTimes->{}],

Cell[TextData[{
 "getGaborSpectrum takes a time-dependent dipole list, and returns the \
corresponding Gabor spectrogram data. Note that for long pulses and high \
resolutions (large npp) this can be quite expensive to compute.\n\nThe data \
is returned in a format that is amenable to Interpolation: that is, a list of \
entries of the form ",
 Cell[BoxData[
  FormBox[
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"t", ",", 
       RowBox[{"\[Omega]", "/", "\[Omega]1"}]}], "}"}], ",", 
     RowBox[{"f", "(", 
      RowBox[{"t", ",", "\[Omega]"}], ")"}]}], "}"}], TraditionalForm]]],
 ", where ",
 Cell[BoxData[
  FormBox["t", TraditionalForm]]],
 " is the time coordinate on the spectrogram, ",
 Cell[BoxData[
  FormBox[
   RowBox[{"\[Omega]", "/", "\[Omega]1"}], TraditionalForm]]],
 " is the harmonic order coordinate, and ",
 Cell[BoxData[
  FormBox[
   RowBox[{"f", "(", 
    RowBox[{"t", ",", "\[Omega]"}], ")"}], TraditionalForm]]],
 " is the signal density at that time-frequency pair.\n\nThis takes the \
standard pulse options and those of timeAxis and getSpectrum, which are \
passed to the respective calls."
}], "Text",
 CellChangeTimes->{}],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"Options", "[", "getGaborSpectrum", "]"}], "=", 
   RowBox[{"Join", "[", 
    RowBox[{"standardOptions", ",", 
     RowBox[{"Options", "[", "timeAxis", "]"}], ",", 
     RowBox[{"Options", "[", "getSpectrum", "]"}]}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"getGaborSpectrum", "[", 
   RowBox[{"dipoleList_", ",", "\[Sigma]_", ",", 
    RowBox[{"options", ":", 
     RowBox[{"OptionsPattern", "[", "]"}]}]}], "]"}], ":=", 
  RowBox[{"Flatten", "[", 
   RowBox[{
    RowBox[{"Table", "[", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{
       RowBox[{"Function", "[", 
        RowBox[{"spectrum", ",", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"{", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{
             RowBox[{
              RowBox[{"{", 
               RowBox[{"t", ",", "#"}], "}"}], "&"}], "/@", 
             RowBox[{"harmonicOrderAxis", "[", 
              RowBox[{
               RowBox[{"\"\<TargetLength\>\"", "\[Rule]", 
                RowBox[{"Length", "[", "spectrum", "]"}]}], ",", 
               RowBox[{"Sequence", "@@", 
                RowBox[{"FilterRules", "[", 
                 RowBox[{
                  RowBox[{"{", "options", "}"}], ",", 
                  RowBox[{"Options", "[", "harmonicOrderAxis", "]"}]}], 
                 "]"}]}]}], "]"}]}], ",", "\[IndentingNewLine]", "spectrum"}],
            "\[IndentingNewLine]", "}"}], "\[Transpose]"}]}], 
        "\[IndentingNewLine]", "]"}], "[", 
       RowBox[{"getSpectrum", "[", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"dipoleList", "\[Times]", 
          RowBox[{"gaussianGate", "[", 
           RowBox[{"t", ",", "\[Sigma]", ",", 
            RowBox[{"Sequence", "@@", 
             RowBox[{"FilterRules", "[", 
              RowBox[{
               RowBox[{"{", "options", "}"}], ",", 
               RowBox[{"Options", "[", "gaussianGate", "]"}]}], "]"}]}]}], 
           "]"}]}], "\[IndentingNewLine]", ",", 
         RowBox[{"Sequence", "@@", 
          RowBox[{"FilterRules", "[", 
           RowBox[{
            RowBox[{"{", "options", "}"}], ",", 
            RowBox[{"Options", "[", "getSpectrum", "]"}]}], "]"}]}]}], 
        "\[IndentingNewLine]", "]"}], "]"}], "\[IndentingNewLine]", ",", 
      RowBox[{"{", 
       RowBox[{"t", ",", 
        RowBox[{"timeAxis", "[", 
         RowBox[{"Sequence", "@@", 
          RowBox[{"FilterRules", "[", 
           RowBox[{
            RowBox[{"{", "options", "}"}], ",", 
            RowBox[{"Options", "[", "timeAxis", "]"}]}], "]"}]}], "]"}]}], 
       "}"}]}], "\[IndentingNewLine]", "]"}], ",", "1"}], "]"}]}]}], "Input",
 InitializationCell->True,
 CellChangeTimes->{}],

Cell[BoxData[""], "Input",
 CellChangeTimes->{}],

Cell[TextData[{
 "getGaborInterpolation performs a Gabor analysis and returns an interpolated \
function which is easier to handle. The options and input are the same as for \
getGaborSpectrum, with the addition of the options for Interpolation (i.e. \
InterpolationOrder, Method, and PeriodicInterpolation). The output is a pure \
function of time and harmonic order, and should be used as e.g. ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{"output", "=", 
     RowBox[{"getGaborInterpolation", "[", "...", "]"}]}], ";", "    ", 
    RowBox[{"output", "[", 
     RowBox[{"t", ",", 
      RowBox[{"\[Omega]", "/", "\[Omega]1"}]}], "]"}]}], TraditionalForm]]],
 "."
}], "Text",
 CellChangeTimes->{}],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"Options", "[", "getGaborInterpolation", "]"}], "=", 
   RowBox[{
    RowBox[{"Options", "[", "getGaborSpectrum", "]"}], "~", "Join", "~", 
    RowBox[{"Options", "[", "Interpolation", "]"}]}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"getGaborInterpolation", "[", 
   RowBox[{"dipoleList_", ",", "\[Sigma]_", ",", 
    RowBox[{"options", ":", 
     RowBox[{"OptionsPattern", "[", "]"}]}]}], "]"}], ":=", 
  RowBox[{"Interpolation", "[", 
   RowBox[{
    RowBox[{"getGaborSpectrum", "[", 
     RowBox[{"dipoleList", ",", "\[Sigma]", ",", "options"}], "]"}], ",", 
    RowBox[{"Sequence", "@@", 
     RowBox[{"FilterRules", "[", 
      RowBox[{
       RowBox[{"{", "options", "}"}], ",", 
       RowBox[{"Options", "[", "Interpolation", "]"}]}], "]"}]}]}], 
   "]"}]}]}], "Input",
 InitializationCell->True,
 CellChangeTimes->{}],

Cell["Sample usage:", "Text",
 CellChangeTimes->{}],

Cell[BoxData[
 RowBox[{"(*", 
  RowBox[{
   RowBox[{"AbsoluteTiming", "[", 
    RowBox[{
     RowBox[{"testDipoleList", "=", 
      RowBox[{"makeDipoleList", "[", "]"}]}], ";"}], "]"}], 
   RowBox[{"(*", 
    RowBox[{"{", 
     RowBox[{"96.415463", ",", "Null"}], "}"}], "*)"}], "\[IndentingNewLine]", 
   RowBox[{"AbsoluteTiming", "[", 
    RowBox[{
     RowBox[{"interpolation", "=", 
      RowBox[{"getGaborInterpolation", "[", 
       RowBox[{"testDipoleList", ",", 
        RowBox[{"0.05", "\"\<T\>\""}], ",", 
        RowBox[{"\"\<nTop\>\"", "\[Rule]", "10"}], ",", 
        RowBox[{"\"\<nRamp\>\"", "\[Rule]", "3"}], ",", 
        RowBox[{"\"\<\[Omega]1\>\"", "\[Rule]", "0.057"}], ",", 
        RowBox[{"\"\<npp\>\"", "\[Rule]", "90"}]}], "]"}]}], ";"}], "]"}], 
   RowBox[{"(*", 
    RowBox[{"{", 
     RowBox[{"394.716061", ",", "Null"}], "}"}], "*)"}], 
   "\[IndentingNewLine]", 
   RowBox[{"DensityPlot", "[", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"interpolation", "[", 
      RowBox[{"t", ",", "HO"}], "]"}], "\[IndentingNewLine]", 
     RowBox[{"(*", 
      RowBox[{",", 
       RowBox[{"{", 
        RowBox[{"t", ",", 
         RowBox[{"First", "[", 
          RowBox[{"timeAxis", "[", "]"}], "]"}], ",", 
         RowBox[{"Last", "[", 
          RowBox[{"timeAxis", "[", "]"}], "]"}]}], "}"}]}], "*)"}], 
     "\[IndentingNewLine]", ",", 
     RowBox[{"{", 
      RowBox[{"t", ",", 
       RowBox[{
        RowBox[{"(", 
         RowBox[{"5", "+", 
          FractionBox["1", "6"]}], ")"}], 
        FractionBox[
         RowBox[{"2", "\[Pi]"}], "0.057"]}], ",", 
       RowBox[{
        RowBox[{"(", 
         RowBox[{"5", "+", 
          FractionBox["1", "6"], "+", 
          FractionBox["2", "3"]}], ")"}], 
        FractionBox[
         RowBox[{"2", "\[Pi]"}], "0.057"]}]}], "}"}], "\[IndentingNewLine]", 
     ",", 
     RowBox[{"{", 
      RowBox[{"HO", ",", "11.5", ",", "30"}], "}"}], "\[IndentingNewLine]", 
     ",", 
     RowBox[{"PlotRange", "\[Rule]", "Full"}], "\[IndentingNewLine]", ",", 
     RowBox[{"PlotPoints", "\[Rule]", "500"}], "\[IndentingNewLine]", ",", 
     RowBox[{"PlotRangePadding", "\[Rule]", "0"}], "\[IndentingNewLine]", ",", 
     RowBox[{"PlotLegends", "\[Rule]", "Automatic"}], "\[IndentingNewLine]", 
     ",", 
     RowBox[{"ImageSize", "\[Rule]", "550"}], "\[IndentingNewLine]", ",", 
     RowBox[{"ColorFunction", "\[Rule]", 
      RowBox[{"ColorData", "[", "\"\<Jet\>\"", "]"}]}]}], 
    "\[IndentingNewLine]", "]"}]}], "*)"}]], "Input",
 CellChangeTimes->{}],

Cell[BoxData[
 RowBox[{"\[IndentingNewLine]", "\[IndentingNewLine]", "\[IndentingNewLine]", 
  "\[IndentingNewLine]", "\[IndentingNewLine]"}]], "Input",
 CellChangeTimes->{}],

Cell[TextData[{
 "makeDipoleList is the main numerical integration function.\n\nIt can be \
called directly (i.e. simply ",
 Cell[BoxData[
  FormBox[
   RowBox[{"makeDipoleList", "[", "]"}], TraditionalForm]]],
 "), which will use the default options. Any change can be indicated directly \
as needed - so, for instance, for a linearly polarized pulse, the call is ",
 Cell[BoxData[
  FormBox[
   RowBox[{"makeDipoleList", "[", 
    RowBox[{
     RowBox[{"\"\<\[Alpha]\>\"", "\[Rule]", 
      RowBox[{"0", "\[Degree]"}]}], ",", 
     RowBox[{"\"\<F2\>\"", "\[Rule]", "0"}]}], "]"}], TraditionalForm]]],
 " and whatever other options one requires.\n\nThe available options are:\n  ",
 StyleBox["\[CenterDot]",
  FontWeight->"Bold"],
 " the standard pulse options\n  ",
 StyleBox["\[CenterDot]",
  FontWeight->"Bold"],
 " nGate and nGateRamp, which control the length of the excursion time gate \
and its off-ramp\n  ",
 StyleBox["\[CenterDot]",
  FontWeight->"Bold"],
 " Gate, which controls the shape of the excursion time gate off-ramp\n  ",
 StyleBox["\[CenterDot]",
  FontWeight->"Bold"],
 " Envelope, which can be FlatTop or Flat\n  ",
 StyleBox["\[CenterDot]",
  FontWeight->"Bold"],
 " \[Epsilon]Correction, which controls the regularization correction \
\[Epsilon], in atomic units\n  ",
 StyleBox["\[CenterDot]",
  FontWeight->"Bold"],
 " \[Omega]2, set by default to a perfect second harmonic\n  ",
 StyleBox["\[CenterDot]",
  FontWeight->"Bold"],
 " \[Delta], set by default to zero\n  ",
 StyleBox["\[CenterDot]",
  FontWeight->"Bold"],
 " F1 and F2, in atomic units, set by default to equal intensities of ",
 Cell[BoxData[
  FormBox[
   RowBox[{"2", "\[Times]", 
    SuperscriptBox["10", "14"], 
    RowBox[{"W", "/", 
     SuperscriptBox["cm", "2"]}]}], TraditionalForm]]],
 "\n  ",
 StyleBox["\[CenterDot]",
  FontWeight->"Bold"],
 " \[Kappa], the ground state characteristic momentum in atomic units, set by \
default to 1.07 (i.e. ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SubscriptBox["I", "p"], "=", 
    RowBox[{
     RowBox[{"0.57", 
      RowBox[{"a", ".", "u", "."}]}], "=", 
     RowBox[{"15.57", " ", "eV"}]}]}], TraditionalForm]]],
 ", for argon)\n  ",
 StyleBox["\[CenterDot]",
  FontWeight->"Bold"],
 " the waveplate angles \[Alpha] and \[Beta], set by default to 45\[Degree] \
(i.e. circular polarization)\n  ",
 StyleBox["\[CenterDot]",
  FontWeight->"Bold"],
 " the phases \[Phi]1 and \[Phi]2, set by default to zero.\n  ",
 StyleBox["\[CenterDot]",
  FontWeight->"Bold"],
 " Test can be set to True to check that the output does not contain \
Indeterminate or other non-numeric output"
}], "Text",
 CellChangeTimes->{}],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"Options", "[", "makeDipoleList", "]"}], "=", 
   RowBox[{"standardOptions", "~", "Join", "~", 
    RowBox[{"{", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"\"\<nGate\>\"", "\[Rule]", "1"}], ",", 
      RowBox[{"\"\<nGateRamp\>\"", "\[Rule]", 
       RowBox[{"1", "/", "2"}]}], ",", 
      RowBox[{"\"\<\[Epsilon]Correction\>\"", "\[Rule]", "0.1"}], ",", 
      "\[IndentingNewLine]", 
      RowBox[{"\"\<Gate\>\"", "\[Rule]", "\"\<SineSquared\>\""}], ",", 
      RowBox[{"\"\<Envelope\>\"", "\[Rule]", "\"\<FlatTop\>\""}], ",", 
      RowBox[{"\"\<Test\>\"", "\[Rule]", "False"}], ",", 
      "\[IndentingNewLine]", 
      RowBox[{"\"\<\[Omega]2\>\"", "\[Rule]", "0.114"}], ",", 
      RowBox[{"\"\<\[Delta]\>\"", "\[Rule]", "0"}], ",", 
      RowBox[{"\"\<F1\>\"", "\[Rule]", "0.075"}], ",", 
      RowBox[{"\"\<F2\>\"", "\[Rule]", "0.075"}], ",", 
      RowBox[{"\"\<\[Kappa]\>\"", "\[Rule]", "1.07"}], ",", 
      RowBox[{"\"\<\[Phi]1\>\"", "\[Rule]", "0"}], ",", 
      RowBox[{"\"\<\[Phi]2\>\"", "\[Rule]", "0"}], ",", 
      RowBox[{"\"\<\[Alpha]\>\"", "\[Rule]", 
       RowBox[{"45", "\[Degree]"}]}], ",", 
      RowBox[{"\"\<\[Beta]\>\"", "\[Rule]", 
       RowBox[{"45", "\[Degree]"}]}]}], "\[IndentingNewLine]", "}"}]}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"makeDipoleList", "::", "env"}], "=", 
   "\"\<Wrong Envelope option `1`. Valid options are FlatTop and Flat.\>\""}],
   ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"makeDipoleList", "::", "gate"}], "=", 
   "\"\<Wrong Gate option `1`. Valid options are Linear and \
SineSquared.\>\""}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"makeDipoleList", "[", 
   RowBox[{"OptionsPattern", "[", "]"}], "]"}], ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", "\[IndentingNewLine]", 
     RowBox[{
     "nTop", ",", "nRamp", ",", "num", ",", "nGate", ",", "nGateRamp", ",", 
      "\[IndentingNewLine]", "\[Omega]1", ",", "\[Omega]2", ",", "\[Delta]", 
      ",", "F1", ",", "F2", ",", "\[Kappa]", ",", "\[Phi]1", ",", "\[Phi]2", 
      ",", "\[Alpha]", ",", "\[Beta]", ",", "\[Epsilon]", ",", "envelope", 
      ",", "\[IndentingNewLine]", "tol", ",", "gridPointQ", ",", "tInit", ",",
       "tFinal", ",", "npp", ",", "\[Delta]t", ",", "\[IndentingNewLine]", 
      "AInt", ",", "A2Int", ",", "AIntList", ",", "A2IntList", ",", "S", ",", 
      "ps", ",", "gate", ",", "\[IndentingNewLine]", "dipoleList"}], 
     "\[IndentingNewLine]", "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"nGate", "=", 
      RowBox[{"OptionValue", "[", "\"\<nGate\>\"", "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"nGateRamp", "=", 
      RowBox[{"OptionValue", "[", "\"\<nGateRamp\>\"", "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"nTop", "=", 
      RowBox[{"OptionValue", "[", "\"\<nTop\>\"", "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"nRamp", "=", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"OptionValue", "[", "\"\<Envelope\>\"", "]"}], "\[Equal]", 
         "\"\<Flat\>\""}], ",", "0", ",", 
        RowBox[{"OptionValue", "[", "\"\<nRamp\>\"", "]"}]}], "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"num", "=", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"NumberQ", "[", 
         RowBox[{"OptionValue", "[", "\"\<num\>\"", "]"}], "]"}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{"OptionValue", "[", "\"\<num\>\"", "]"}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"OptionValue", "[", "\"\<Envelope\>\"", "]"}], "\[Equal]", 
           "\"\<Flat\>\""}], ",", "nTop", ",", 
          RowBox[{"nTop", "+", 
           RowBox[{"2", "nRamp"}]}]}], "]"}]}], "\[IndentingNewLine]", 
       "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"\[Omega]1", "=", 
      RowBox[{"OptionValue", "[", "\"\<\[Omega]1\>\"", "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"\[Omega]2", "=", 
      RowBox[{"OptionValue", "[", "\"\<\[Omega]2\>\"", "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"\[Delta]", "=", 
      RowBox[{"OptionValue", "[", "\"\<\[Delta]\>\"", "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"F1", "=", 
      RowBox[{"OptionValue", "[", "\"\<F1\>\"", "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"F2", "=", 
      RowBox[{"OptionValue", "[", "\"\<F2\>\"", "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"\[Kappa]", "=", 
      RowBox[{"OptionValue", "[", "\"\<\[Kappa]\>\"", "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"\[Phi]1", "=", 
      RowBox[{"OptionValue", "[", "\"\<\[Phi]1\>\"", "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"\[Phi]2", "=", 
      RowBox[{"OptionValue", "[", "\"\<\[Phi]2\>\"", "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"\[Alpha]", "=", 
      RowBox[{"OptionValue", "[", "\"\<\[Alpha]\>\"", "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"\[Beta]", "=", 
      RowBox[{"OptionValue", "[", "\"\<\[Beta]\>\"", "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"\[Epsilon]", "=", 
      RowBox[{"OptionValue", "[", "\"\<\[Epsilon]Correction\>\"", "]"}]}], 
     ";", 
     RowBox[{"(*", 
      RowBox[{
      "To", " ", "avoid", " ", "conflict", " ", "with", " ", "spectrum", " ", 
       
       RowBox[{"polarization", "/", 
        RowBox[{"ellipticity", "."}]}]}], "*)"}], "\[IndentingNewLine]", 
     RowBox[{"Piecewise", "[", 
      RowBox[{
       RowBox[{"{", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{
           RowBox[{"envelope", "=", 
            RowBox[{"flatTopEnvelope", "[", 
             RowBox[{"\[Omega]1", ",", "num", ",", "nRamp"}], "]"}]}], 
           "\[IndentingNewLine]", ",", 
           RowBox[{
            RowBox[{"OptionValue", "[", "\"\<Envelope\>\"", "]"}], 
            "\[Equal]", "\"\<FlatTop\>\""}]}], "}"}], ",", 
         "\[IndentingNewLine]", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{
            RowBox[{"envelope", "=", 
             RowBox[{"flatEnvelope", "[", 
              RowBox[{"\[Omega]1", ",", "num"}], "]"}]}], ";", 
            RowBox[{"nRamp", "=", "0"}], ";", 
            RowBox[{"num", "=", "nTop"}]}], "\[IndentingNewLine]", ",", 
           RowBox[{
            RowBox[{"OptionValue", "[", "\"\<Envelope\>\"", "]"}], 
            "\[Equal]", "\"\<Flat\>\""}]}], "}"}]}], "\[IndentingNewLine]", 
        "}"}], ",", 
       RowBox[{
        RowBox[{"Message", "[", 
         RowBox[{
          RowBox[{"makeDipoleList", "::", "env"}], ",", 
          RowBox[{"OptionValue", "[", "\"\<Envelope\>\"", "]"}]}], "]"}], ";", 
        RowBox[{"Abort", "[", "]"}]}]}], "\[IndentingNewLine]", "]"}], ";", 
     "\[IndentingNewLine]", "\[IndentingNewLine]", 
     RowBox[{"tInit", "=", "0"}], ";", "\[IndentingNewLine]", 
     RowBox[{"tFinal", "=", 
      RowBox[{
       FractionBox[
        RowBox[{"2", "\[Pi]"}], "\[Omega]1"], " ", "num"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"npp", "=", 
      RowBox[{"OptionValue", "[", "\"\<npp\>\"", "]"}]}], ";", 
     RowBox[{"(*", 
      RowBox[{
       RowBox[{"no", ".", " ", "of"}], " ", "integration", " ", "points", " ",
        "per", " ", "laser", " ", 
       RowBox[{"period", ".", " ", "Should"}], " ", "be", " ", "at", " ", 
       "least", " ", "twice", " ", "the", " ", "highest", " ", "harmonic", 
       " ", "of", " ", 
       RowBox[{"interest", "."}]}], "*)"}], "\[IndentingNewLine]", 
     "\[IndentingNewLine]", 
     RowBox[{"\[Delta]t", "=", 
      FractionBox[
       RowBox[{"tFinal", "-", "tInit"}], 
       RowBox[{
        RowBox[{"num", "\[Times]", "npp"}], "+", "1"}]]}], ";", 
     RowBox[{"(*", 
      RowBox[{"integration", " ", "and", " ", "looping", " ", "timestep"}], 
      "*)"}], "\[IndentingNewLine]", "\[IndentingNewLine]", 
     RowBox[{"tol", "=", 
      SuperscriptBox["10", 
       RowBox[{"-", "5"}]]}], ";", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"gridPointQ", "[", "t_", "]"}], ":=", 
      RowBox[{
       RowBox[{"gridPointQ", "[", "t", "]"}], "=", 
       RowBox[{
        RowBox[{
         RowBox[{"Abs", "[", 
          RowBox[{
           FractionBox[
            RowBox[{"t", "-", "tInit"}], "\[Delta]t"], "-", 
           RowBox[{"Round", "[", 
            FractionBox[
             RowBox[{"t", "-", "tInit"}], "\[Delta]t"], "]"}]}], "]"}], "<", 
         "tol"}], "&&", 
        RowBox[{
         RowBox[{"tInit", "-", "tol"}], "\[LessEqual]", "t", "\[LessEqual]", 
         RowBox[{"tFinal", "+", "tol"}]}]}]}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"(*", 
      RowBox[{
      "Checks", " ", "whether", " ", "the", " ", "given", " ", "time", " ", 
       "is", " ", "part", " ", "of", " ", "the", " ", "time", " ", "grid", 
       " ", "in", " ", 
       RowBox[{"use", "."}]}], "*)"}], "\[IndentingNewLine]", 
     "\[IndentingNewLine]", 
     RowBox[{"(*", 
      RowBox[{
       RowBox[{
       "Gates", " ", "are", " ", "a", " ", "function", " ", "of", " ", "the", 
        " ", "frequency"}], "-", 
       RowBox[{"time", " ", "product", " ", "\[Omega]1", " ", 
        RowBox[{"t", "."}]}]}], "*)"}], "\[IndentingNewLine]", 
     RowBox[{"Piecewise", "[", 
      RowBox[{
       RowBox[{"{", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{
           RowBox[{
            RowBox[{"gate", "[", "\[Omega]\[Tau]_", "]"}], ":=", 
            RowBox[{"Piecewise", "[", 
             RowBox[{"{", 
              RowBox[{
               RowBox[{"{", 
                RowBox[{"1", ",", 
                 RowBox[{"\[Omega]\[Tau]", "\[LessEqual]", 
                  RowBox[{"2", "\[Pi]", " ", "nGate"}]}]}], "}"}], ",", 
               RowBox[{"{", 
                RowBox[{
                 SuperscriptBox[
                  RowBox[{"Sin", "[", 
                   FractionBox[
                    RowBox[{
                    RowBox[{"2", "\[Pi]", 
                    RowBox[{"(", 
                    RowBox[{"nGate", "+", "nGateRamp"}], ")"}]}], "-", 
                    "\[Omega]\[Tau]"}], 
                    RowBox[{"4", "nGateRamp"}]], "]"}], "2"], ",", 
                 RowBox[{
                  RowBox[{"2", "\[Pi]", " ", "nGate"}], "<", "\[Omega]\[Tau]",
                   "\[LessEqual]", 
                  RowBox[{"2", "\[Pi]", 
                   RowBox[{"(", 
                    RowBox[{"nGate", "+", "nGateRamp"}], ")"}]}]}]}], "}"}], 
               ",", 
               RowBox[{"{", 
                RowBox[{"0", ",", 
                 RowBox[{
                  RowBox[{"nGate", "+", "nGateRamp"}], "<", 
                  "\[Omega]\[Tau]"}]}], "}"}]}], "}"}], "]"}]}], ",", 
           RowBox[{
            RowBox[{"OptionValue", "[", "\"\<Gate\>\"", "]"}], "\[Equal]", 
            "\"\<SineSquared\>\""}]}], "}"}], ",", "\[IndentingNewLine]", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{
            RowBox[{"gate", "[", "\[Omega]\[Tau]_", "]"}], ":=", 
            RowBox[{"Piecewise", "[", 
             RowBox[{"{", 
              RowBox[{
               RowBox[{"{", 
                RowBox[{"1", ",", 
                 RowBox[{"\[Omega]\[Tau]", "\[LessEqual]", 
                  RowBox[{"2", "\[Pi]", " ", "nGate"}]}]}], "}"}], ",", 
               RowBox[{"{", 
                RowBox[{
                 RowBox[{"-", 
                  FractionBox[
                   RowBox[{"\[Omega]\[Tau]", "-", 
                    RowBox[{"2", "\[Pi]", " ", 
                    RowBox[{"(", 
                    RowBox[{"nGate", "+", "nGateRamp"}], ")"}]}]}], 
                   RowBox[{"2", "\[Pi]", " ", "nGateRamp"}]]}], ",", 
                 RowBox[{"nGate", "<", "\[Omega]\[Tau]", "\[LessEqual]", 
                  RowBox[{"2", "\[Pi]", " ", 
                   RowBox[{"(", 
                    RowBox[{"nGate", "+", "nGateRamp"}], ")"}]}]}]}], "}"}], 
               ",", 
               RowBox[{"{", 
                RowBox[{"0", ",", 
                 RowBox[{
                  RowBox[{"2", "\[Pi]", " ", 
                   RowBox[{"(", 
                    RowBox[{"nGate", "+", "nGateRamp"}], ")"}]}], "<", 
                  "\[Omega]\[Tau]"}]}], "}"}]}], "}"}], "]"}]}], ",", 
           RowBox[{
            RowBox[{"OptionValue", "[", "\"\<Gate\>\"", "]"}], "\[Equal]", 
            "\"\<Linear\>\""}]}], "}"}]}], "}"}], "\[IndentingNewLine]", ",", 
       
       RowBox[{
        RowBox[{"Message", "[", 
         RowBox[{
          RowBox[{"makeDipoleList", "::", "gate"}], ",", 
          RowBox[{"OptionValue", "[", "\"\<Gate\>\"", "]"}]}], "]"}], ";", 
        RowBox[{"Abort", "[", "]"}]}]}], "]"}], ";", "\[IndentingNewLine]", 
     "\[IndentingNewLine]", 
     RowBox[{"(*", 
      RowBox[{
      "This", " ", "does", " ", "an", " ", "initial", " ", "numerical", " ", 
       "integration", " ", "of", " ", "the", " ", "integrals", " ", "of", " ",
        "the", " ", "vector", " ", "potential", " ", "and", " ", "its", " ", 
       "square", " ", "that", " ", "make", " ", "up", " ", "the", " ", 
       RowBox[{"action", "."}]}], "*)"}], "\[IndentingNewLine]", 
     RowBox[{"AIntList", "=", 
      RowBox[{"\[Delta]t", "\[Times]", 
       RowBox[{"Accumulate", "[", "\[IndentingNewLine]", 
        RowBox[{"Table", "[", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"A", "[", 
           RowBox[{"t", ",", 
            RowBox[{"{", 
             RowBox[{
             "\[Omega]1", ",", "\[Omega]2", ",", "\[Delta]", ",", "F1", ",", 
              "F2", ",", "\[Alpha]", ",", "\[Beta]", ",", "\[Phi]1", ",", 
              "\[Phi]2", ",", "envelope"}], "}"}]}], "]"}], 
          "\[IndentingNewLine]", ",", 
          RowBox[{"{", 
           RowBox[{"t", ",", "tInit", ",", "tFinal", ",", "\[Delta]t"}], 
           "}"}]}], "\[IndentingNewLine]", "]"}], "\[IndentingNewLine]", 
        "]"}]}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"A2IntList", "=", 
      RowBox[{"\[Delta]t", "\[Times]", 
       RowBox[{"Accumulate", "[", "\[IndentingNewLine]", 
        RowBox[{"Table", "[", "\[IndentingNewLine]", 
         RowBox[{
          SuperscriptBox[
           RowBox[{"Norm", "[", 
            RowBox[{"A", "[", 
             RowBox[{"t", ",", 
              RowBox[{"{", 
               RowBox[{
               "\[Omega]1", ",", "\[Omega]2", ",", "\[Delta]", ",", "F1", ",",
                 "F2", ",", "\[Alpha]", ",", "\[Beta]", ",", "\[Phi]1", ",", 
                "\[Phi]2", ",", "envelope"}], "}"}]}], "]"}], "]"}], "2"], 
          "\[IndentingNewLine]", ",", 
          RowBox[{"{", 
           RowBox[{"t", ",", "tInit", ",", "tFinal", ",", "\[Delta]t"}], 
           "}"}]}], "\[IndentingNewLine]", "]"}], "\[IndentingNewLine]", 
        "]"}]}]}], ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
     RowBox[{"(*", 
      RowBox[{
       RowBox[{"Recombination", " ", "time", " ", "first"}], ",", " ", 
       RowBox[{"then", " ", "ionization", " ", "time"}]}], "*)"}], 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"AInt", "[", 
       RowBox[{
        RowBox[{"t_", "?", "gridPointQ"}], ",", 
        RowBox[{"tt_", "?", "gridPointQ"}]}], "]"}], ":=", 
      RowBox[{
       RowBox[{"AInt", "[", 
        RowBox[{"t", ",", "tt"}], "]"}], "=", 
       RowBox[{
        RowBox[{"AIntList", "\[LeftDoubleBracket]", 
         RowBox[{"Round", "[", 
          RowBox[{
           RowBox[{"t", "/", "\[Delta]t"}], "+", "1"}], "]"}], 
         "\[RightDoubleBracket]"}], "-", 
        RowBox[{"AIntList", "\[LeftDoubleBracket]", 
         RowBox[{"Round", "[", 
          RowBox[{
           RowBox[{"tt", "/", "\[Delta]t"}], "+", "1"}], "]"}], 
         "\[RightDoubleBracket]"}]}]}]}], ";", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"A2Int", "[", 
       RowBox[{
        RowBox[{"t_", "?", "gridPointQ"}], ",", 
        RowBox[{"tt_", "?", "gridPointQ"}]}], "]"}], ":=", 
      RowBox[{
       RowBox[{"A2Int", "[", 
        RowBox[{"t", ",", "tt"}], "]"}], "=", 
       RowBox[{
        RowBox[{"A2IntList", "\[LeftDoubleBracket]", 
         RowBox[{"Round", "[", 
          RowBox[{
           RowBox[{"t", "/", "\[Delta]t"}], "+", "1"}], "]"}], 
         "\[RightDoubleBracket]"}], "-", 
        RowBox[{"A2IntList", "\[LeftDoubleBracket]", 
         RowBox[{"Round", "[", 
          RowBox[{
           RowBox[{"tt", "/", "\[Delta]t"}], "+", "1"}], "]"}], 
         "\[RightDoubleBracket]"}]}]}]}], ";", "\[IndentingNewLine]", 
     "\[IndentingNewLine]", 
     RowBox[{"(*", 
      RowBox[{"Stationary", " ", "momentum", " ", "and", " ", "action"}], 
      "*)"}], "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"ps", "[", 
       RowBox[{
        RowBox[{"t_", "?", "gridPointQ"}], ",", 
        RowBox[{"tt_", "?", "gridPointQ"}]}], "]"}], ":=", 
      RowBox[{
       RowBox[{"ps", "[", 
        RowBox[{"t", ",", "tt"}], "]"}], "=", 
       RowBox[{
        RowBox[{"-", 
         FractionBox["1", 
          RowBox[{"t", "-", "tt", "-", 
           RowBox[{"\[ImaginaryI]", " ", "\[Epsilon]"}]}]]}], 
        RowBox[{"AInt", "[", 
         RowBox[{"t", ",", "tt"}], "]"}]}]}]}], ";", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"S", "[", 
       RowBox[{
        RowBox[{"t_", "?", "gridPointQ"}], ",", 
        RowBox[{"tt_", "?", "gridPointQ"}]}], "]"}], ":=", 
      RowBox[{
       RowBox[{"S", "[", 
        RowBox[{"t", ",", "tt"}], "]"}], "=", 
       RowBox[{
        RowBox[{
         FractionBox["1", "2"], 
         RowBox[{"(", 
          RowBox[{
           SuperscriptBox[
            RowBox[{"Norm", "[", 
             RowBox[{"ps", "[", 
              RowBox[{"t", ",", "tt"}], "]"}], "]"}], "2"], "+", 
           SuperscriptBox["\[Kappa]", "2"]}], ")"}], 
         RowBox[{"(", 
          RowBox[{"t", "-", "tt"}], ")"}]}], "+", 
        RowBox[{
         RowBox[{"ps", "[", 
          RowBox[{"t", ",", "tt"}], "]"}], ".", 
         RowBox[{"AInt", "[", 
          RowBox[{"t", ",", "tt"}], "]"}]}], "+", 
        RowBox[{
         FractionBox["1", "2"], 
         RowBox[{"A2Int", "[", 
          RowBox[{"t", ",", "tt"}], "]"}]}]}]}]}], ";", "\[IndentingNewLine]",
      "\[IndentingNewLine]", 
     RowBox[{"(*", 
      RowBox[{"Numerical", " ", "integration", " ", "loop"}], "*)"}], 
     "\[IndentingNewLine]", 
     RowBox[{"(", 
      RowBox[{"dipoleList", "=", 
       RowBox[{"Table", "[", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"\[Delta]t", " ", 
          RowBox[{"Sum", "[", 
           RowBox[{
            RowBox[{"(", "\[IndentingNewLine]", 
             RowBox[{"\[ImaginaryI]", 
              SuperscriptBox[
               RowBox[{"(", 
                FractionBox[
                 RowBox[{"2", "\[Pi]"}], 
                 RowBox[{"\[Epsilon]", "+", 
                  RowBox[{"\[ImaginaryI]", " ", "\[Tau]"}]}]], ")"}], 
               RowBox[{"3", "/", "2"}]], 
              RowBox[{
               RowBox[{"dipole", "[", 
                RowBox[{
                 RowBox[{
                  RowBox[{"ps", "[", 
                   RowBox[{"t", ",", 
                    RowBox[{"t", "-", "\[Tau]"}]}], "]"}], "+", 
                  RowBox[{"A", "[", 
                   RowBox[{"t", ",", 
                    RowBox[{"{", 
                    RowBox[{
                    "\[Omega]1", ",", "\[Omega]2", ",", "\[Delta]", ",", "F1",
                     ",", "F2", ",", "\[Alpha]", ",", "\[Beta]", ",", 
                    "\[Phi]1", ",", "\[Phi]2", ",", "envelope"}], "}"}]}], 
                   "]"}]}], ",", "\[Kappa]"}], "]"}], "\[Conjugate]"}], 
              "\[Times]", 
              RowBox[{
               RowBox[{"dipole", "[", 
                RowBox[{
                 RowBox[{
                  RowBox[{"ps", "[", 
                   RowBox[{"t", ",", 
                    RowBox[{"t", "-", "\[Tau]"}]}], "]"}], "+", 
                  RowBox[{"A", "[", 
                   RowBox[{
                    RowBox[{"t", "-", "\[Tau]"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    "\[Omega]1", ",", "\[Omega]2", ",", "\[Delta]", ",", "F1",
                     ",", "F2", ",", "\[Alpha]", ",", "\[Beta]", ",", 
                    "\[Phi]1", ",", "\[Phi]2", ",", "envelope"}], "}"}]}], 
                   "]"}]}], ",", "\[Kappa]"}], "]"}], ".", 
               RowBox[{"F", "[", 
                RowBox[{
                 RowBox[{"t", "-", "\[Tau]"}], ",", 
                 RowBox[{"{", 
                  RowBox[{
                  "\[Omega]1", ",", "\[Omega]2", ",", "\[Delta]", ",", "F1", 
                   ",", "F2", ",", "\[Alpha]", ",", "\[Beta]", ",", "\[Phi]1",
                    ",", "\[Phi]2", ",", "envelope"}], "}"}]}], "]"}]}], 
              RowBox[{"Exp", "[", 
               RowBox[{
                RowBox[{"-", "\[ImaginaryI]"}], " ", 
                RowBox[{"S", "[", 
                 RowBox[{"t", ",", 
                  RowBox[{"t", "-", "\[Tau]"}]}], "]"}]}], "]"}], 
              RowBox[{"gate", "[", 
               RowBox[{"\[Omega]1", " ", "\[Tau]"}], "]"}]}], " ", 
             RowBox[{"(*", 
              RowBox[{"/.", 
               RowBox[{"{", 
                RowBox[{"Indeterminate", "\[Rule]", "0"}], "}"}]}], "*)"}], 
             "\[IndentingNewLine]", ")"}], ",", 
            RowBox[{"{", 
             RowBox[{"\[Tau]", ",", "0", ",", 
              RowBox[{"Min", "[", 
               RowBox[{
                RowBox[{"t", "-", "tInit"}], ",", 
                RowBox[{
                 RowBox[{"(", 
                  RowBox[{"nGate", "+", "nGateRamp"}], ")"}], 
                 FractionBox[
                  RowBox[{"2", "\[Pi]"}], "\[Omega]1"]}]}], "]"}], ",", 
              "\[Delta]t"}], "}"}]}], "]"}]}], "\[IndentingNewLine]", ",", 
         RowBox[{"{", 
          RowBox[{"t", ",", "tInit", ",", "tFinal", ",", "\[Delta]t"}], 
          "}"}]}], "]"}]}], ")"}], ";", "\[IndentingNewLine]", 
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{"TrueQ", "[", 
        RowBox[{"OptionValue", "[", "\"\<Test\>\"", "]"}], "]"}], ",", 
       RowBox[{"Print", "[", 
        RowBox[{"Tally", "[", 
         RowBox[{"dipoleList", "/.", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"_", "?", "NumberQ"}], "\[Rule]", 
            "\"\<\[Checkmark]\>\""}], "}"}]}], "]"}], "]"}]}], "]"}], ";", 
     "\[IndentingNewLine]", "dipoleList"}]}], "\[IndentingNewLine]", 
   "]"}]}]}], "Input",
 InitializationCell->True,
 CellChangeTimes->{}],

Cell[BoxData["\[IndentingNewLine]"], "Input",
 CellChangeTimes->{}],

Cell["Simplest example usage:", "Text",
 CellChangeTimes->{}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"AbsoluteTiming", "[", "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{"testDipoleList", "=", 
    RowBox[{"makeDipoleList", "[", "]"}]}], ";"}], "\[IndentingNewLine]", 
  "]"}]], "Input",
 CellChangeTimes->{}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "95.86555599999999799365468788892030715942`8.002262508707537", ",", 
   "Null"}], "}"}]], "Output",
 CellChangeTimes->{}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"biColorSpectrum", "[", "testDipoleList", "]"}]], "Input",
 CellChangeTimes->{}],

Cell[BoxData[
 GraphicsBox[{{{}, 
    {RGBColor[1, 0, 0], PointSize[0.008333333333333333], AbsoluteThickness[
     1.6], LineBox[CompressedData["
1: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
D5jphPlzIIjrDPVqQh3R/+gCtvY=
      "]]}, {}}, {{}, 
    {RGBColor[0, 0, 1], PointSize[0.008333333333333333], AbsoluteThickness[
     1.6], LineBox[CompressedData["
1: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
r35QYj00x/2zF/i3cZtqPa3Q/wEGhNPk
      "]]}, {}}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{False, False},
  AxesLabel->{None, None},
  AxesOrigin->{0, 0},
  DisplayFunction->Identity,
  Frame->{{True, True}, {True, True}},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  ImageSize->800,
  Method->{},
  PlotRange->All,
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.05], 
     Scaled[0.02]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{}]
}, Open  ]],

Cell[BoxData[
 RowBox[{"\[IndentingNewLine]", "\[IndentingNewLine]"}]], "Input",
 CellChangeTimes->{}],

Cell[TextData[StyleBox["Some benchmarking",
 FontSize->18]], "Text",
 CellChangeTimes->{}],

Cell["Linear polarization.", "Text",
 CellChangeTimes->{}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Column", "@", 
  RowBox[{"AbsoluteTiming", "@", 
   RowBox[{"biColorSpectrum", "[", "\[IndentingNewLine]", 
    RowBox[{"linearDipoleList", "=", 
     RowBox[{"makeDipoleList", "[", 
      RowBox[{
       RowBox[{"\"\<\[Alpha]\>\"", "\[Rule]", "0"}], ",", 
       RowBox[{"\"\<F2\>\"", "\[Rule]", "0"}]}], "]"}]}], 
    "\[IndentingNewLine]", "]"}]}]}]], "Input",
 CellChangeTimes->{}],

Cell[BoxData[
 TagBox[GridBox[{
    {"71.81472200000000327690941048786044120789`7.876813396908639"},
    {
     GraphicsBox[{{{}, 
        {RGBColor[1, 0, 0], PointSize[0.008333333333333333], 
         AbsoluteThickness[1.6], LineBox[CompressedData["
1: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
cQ==
          "]]}, {}}, {{}, 
        {RGBColor[0, 0, 1], PointSize[0.008333333333333333], 
         AbsoluteThickness[1.6], LineBox[CompressedData["
1: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
cQ==
          "]]}, {}}},
      AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
      Axes->{False, False},
      AxesLabel->{None, None},
      AxesOrigin->{0, 0},
      DisplayFunction->Identity,
      Frame->{{True, True}, {True, True}},
      FrameLabel->{{None, None}, {None, None}},
      FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
      GridLines->{None, None},
      GridLinesStyle->Directive[
        GrayLevel[0.5, 0.4]],
      ImageSize->800,
      Method->{},
      PlotRange->All,
      PlotRangeClipping->True,
      PlotRangePadding->{{
         Scaled[0.02], 
         Scaled[0.02]}, {
         Scaled[0.05], 
         Scaled[0.02]}},
      Ticks->{Automatic, Automatic}]}
   },
   DefaultBaseStyle->"Column",
   GridBoxAlignment->{"Columns" -> {{Left}}},
   GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
  "Column"]], "Output",
 CellChangeTimes->{}]
}, Open  ]],

Cell[BoxData["\[IndentingNewLine]"], "Input",
 CellChangeTimes->{}],

Cell[TextData[{
 "Using a pure ",
 Cell[BoxData[
  FormBox[
   SuperscriptBox["sin", "2"], TraditionalForm]]],
 " envelope, which has broader harmonics near the cutoff because less cycles \
contribute to those energies. The results match those obtained in the full \
MCTDH calculations."
}], "Text",
 CellChangeTimes->{}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Column", "@", 
  RowBox[{"AbsoluteTiming", "@", 
   RowBox[{"biColorSpectrum", "[", "\[IndentingNewLine]", 
    RowBox[{"sineSquaredDipoleList", "=", 
     RowBox[{"makeDipoleList", "[", 
      RowBox[{
       RowBox[{"\"\<npp\>\"", "\[Rule]", "150"}], ",", 
       RowBox[{"\"\<nRamp\>\"", "\[Rule]", 
        RowBox[{"15", "/", "2"}]}], ",", 
       RowBox[{"\"\<nTop\>\"", "\[Rule]", "0"}]}], "]"}]}], 
    "\[IndentingNewLine]", "]"}]}]}]], "Input",
 CellChangeTimes->{}],

Cell[BoxData[
 TagBox[GridBox[{
    {"252.32681999999999788997229188680648803711`8.422563327724893"},
    {
     GraphicsBox[{{{}, 
        {RGBColor[1, 0, 0], PointSize[0.006944444444444445], 
         AbsoluteThickness[1.6], LineBox[CompressedData["
1:eJw9WnlcjN0XbyVFRZuKmn2qaZ21fc7MVNYoO0VEWbJTlizZQimiRCgJ2Zds
WeJG2Qshka3eiBQq0kL97jPP7ff+837O5+aZ57n33HO+y2GGLxgVoaWhoRGp
o6FB/b/7v8gqa4e7XTxkUtZjmEfMYXniu8dXZod1xxflG7e0tr9N56KBXgk/
x56/KfdRNRxcHMwl60XybXfsN/is4KI98fcP3Nv1QM4vEcT1ud/996XyhzsW
rdbS56Nnf44wF9c+k0fPzPu6Oq37+S/ksxpsR37x5qGxp2Yu1dB9JW9aoOuf
15dNnvda/uZB7z4sNhO9mWp/L5n1Vv7gmKArNp5Jnv9enmHayC0JNkHnEn5v
Mzz4Ub7N5HjRN7Y++b0q+c5/X9Gii9qoaca4yy+d/5OfcD5XNe2AJvn9GrlG
/CeOe5w2EsuvfNhf8EluMCvM7s7VXuR9auXDdk9VvdM0Qcss+/eaMfyLPGFB
dEPiSAZ5v69y54TgodHlDHS1eblQUFknPxC1pCx6F4u8b7385bAeE9gaXNRR
8jqkaXaD/MHM06elAh55/+/yq0bpbZwhPOR7zHPT1dYf8uyv7es+jeKR7/kp
v18fUHUrj4+gMHA8UjXKi4MmXX0aYke+r1FuV736PS/dDk1z7vzGTmySN/oe
Ce00syPf2yw/qfFfme8LPtqw70zc5rJm+apjA17KZXzy/b/kk+fPk+vh8z6s
F2b2zfK3/MWwLVWsdi7Zj9/yJBfJsfdmPFQcbXRixLQW+aS7mxLmbe0+rz/y
ihP7NIt68NHn6lu+ecf+yHeMWe80u4ZP9qtVrp3cnj3qPR/1DFr43Oxnq9xn
fmTkh8c8sn9t8t7PC05+nM1DdgWMWStk7fIp9/bNXzmAR/azXd7W8u/scXMe
Gurw7O/bNR3y508fXAlM55H9/St3vvVj2sChfBSVvi4F7v6Vz1oypjYqgU/2
+5+8bknNMp47H23TEfIO9+mUW6X2yBI87t7/TpxPzX8rM3no9KLqaz3HdsmH
XhvqrFvGJ+fRJT+QfPzl5Fd8NHPBg1zJCA0YPHFk70NCPjkfDagU9oxxPMZH
rerj0ICgeovWg2u55Lw0oVPjdpx8EgdtebvCe2+aJhRLW8a5nWKS89OEracn
9GmIskWW6gPRgpM7M6fXm5mT89QCvceT3Nv+9UEnhlAboAWxsdLmSVo9yflq
Q477iMkBx3WQZ9x6fMLaYN72cLdtTA9y3towa86zBpvK3ujR5TcRUzk6sP1y
8iAZx4ycvw6cjT2Y9ptlg0IahK797uvA+rZPm1jvGCQfdMFifcjG+GUsVM9O
bL8TpQuGA+JWCOZwSH7oQuDGG3qz4rho9aT/iqKNegBHZ/CjwSO4JF96QFIR
z3SHAxf1SfHazr/QAyJOOmR2XOWS/OkJG0Y7NL/7xEOZ93ZNfD2uJxyJOOzF
md6dTz3hz7HPdUM285B6O9pxXFr6YFvv7vzSg7nVTuu8J9ihW2K/796ZeqAz
KFOu6sUj+aYH30/duSmQ8lBQ1P7874peoIMaxk36xyf51wuyt1QkvQvho4/Z
v9Yf/NQLevdaOT5eySf5qA/taYdr6rLt0KKK4YGjturDAI+Cr1Y/uvNTH0LP
/Kp4nM1DmkZHLHScDODjReH9J758kq8G0DVj02ItYz7a6f+v6tJTA3iccI/b
kdOdv70hW5LD19nFR+xV1I70hqQHd9vy47vzuTcUWpxcZOjKRxfyTsdY9u8D
/Nh3t9oqu/O7DxzZ8zSh1ISP/L7qKh5d7wMXrIykr+fwSL4bQpygIb7Xbh56
YTvFYHWYIcwvFduUvbUn+W8I8e78nd++8FCEOp2MIHclQ6OxvPs+GMGW4iNP
+kfwUAtVXY8aQf8fsUWFmRxyP4ygR3u1ne4ZNrozTSQZwjWG8b9Nes48wyL3
xRh0leO+6JcORPjHrVjLjKGrdeu8E//6k/tjDLzDl/oXRZqjMXsSu9rvG8Ps
gYP+aEeZkftkDDV7bFP3fzZD+y9cqXlu1Rd+fDpRFt1kQe5XX5jz+mBstdYA
VFP634NTc/vC5Rf12Wg/k9y3vuDDsX9wdBULOdUZnd10sy+8vrNbqp/AIfev
L+hvjory38ZD0breqVOM+8HV66vyDyZyyX3sB6OvfM7bm81B6nQI7wf7N64e
dek1h9zPfpD28zk3JZCL1P/8Yj9IjjHPsVnEIfe1H7xexWgqsuCgEfhtv+qa
QKXHPOvmYg65vyZglnnFKfMsF+1eXG93e7wJPNKXzE1t4ZD7bAKtlrMvZU7k
ovdJ/Q33HTeBjczlG+2uccn9NoENpsUf5Jc4iH/cr3lJhwn4nS81/2DMJffd
FM49mKB3fJE9WlC0EGewKbwvipp41rO7f5tCwfAb7k+mcxF1m7lZphA86vqt
9xF2pB6Ygu2eizW1T7lIo+P+oc6fpjC5X9fjOv/ufmEGi316/PeuhosGm//e
/EppBhMuaP77jfECXS/MYCp7FD9gPQ/tcGPOO5dqBjUTt447OI5H6ocZDJjz
vkaG75/6en02A/uVj0oWv+KRemIOxxc9iIxbzkNMavvdzWF9X5v3JrO6+5E5
eFqM9Hy+i4tmbzgywCvBHHx2jrTh3OKRemMOoy5PeMNL4aPzmc80Td+aQ7bl
vTdP9nFI/bEAw/AZYdk4n9uv/vtc72QBtZxbTQe+sUk9sgDPxc2NdzewkPKl
/ePitRagsTZAYTGOQeqTBUQ8+LF+/vMBiLpNmc8sIPFHh/zZYitSryxAy9vW
OHa8JXpusH73MnZ/qM2YnrQxzpLUr/7gzrl20qDTClnzz8QGRfcHiznnBrbc
HEjqWX/QqdVMWhLLQNOVVMXoD19er9d7ocMi9a0/OJyPLe6UcNDJyT0CtCwt
wdB1VEVvEYfUO0vo2/EltbKDjX5R5WqOJYj87frP3NyNrywh4fX5xE8bWUid
vjcs4UVN/OXqCSxSDy2huu8HPbNBbLTxLHVhrUA/vYGVtoxL6qMV6ASXDwkI
YqOSh1TCWUHzr2lZhblsUi+toFzI3GXG5SAz9YZZwfrwqIGZ41mkflpBfMn8
o+fPs9BkdQG1Bs6Bo2ElHRxST62hzH2wbtEkNjo6gCpY1tAlXRUW2coi9dUa
3vG+5qyW89F3GVVxrOGQbGmvvddZpN5aQ+/bJdsKTNlIOnrXmENt1vDf3c1/
yv6xSf0dAKtPH0+smMtCa+bf8ogdNgBm/1pVlTGZRerxAJB8bLX7WMFC97Z+
sxlzYADYdhqcv+XAIfV5ALDEFg8m1bKR+nV/DIC1xg3Pd75hkXo9EIYaJ5lc
seMg9fVXDARnj0hjZzmL1O+B8MemYuS5p0x0sHJB6fudA+GKwCVLW8El9Xwg
FM8Krhv8m4W+tOzDFXAg/JiuoV9bxyX13QYufpPPf3mXhfBl3bNDagORCXmf
+ovYpN7bwOVPyl338Hkud/q1evYWG9iqPbGiTzyL1H8beFVvMjGyJxMVDmbg
FLOBPhF+0/dGDST9wBaQaObOezetEE7WwdaOtrBFE/3c42FJ+oMt+D7WVDUr
LFHwWuoXbKGf4EWHX4cV6Re2MK5ww+CjfBuUkXG4X8kTW+g8vmL7YAGD9A9b
SP1zr2xaCgM1TvrSUWbMgH5xZbf/W8cg/YQB2wUfT0qeM1DaLOqEGLDv+DFP
8VAm6S8MiN9Yv+xiJQPhWlZ1MpwBNZ087fFnGaTfMMD8w8VZOx4y0LsNJ0bv
SWTAX/6cfrm9WaT/MCBrkkPG4WA2Wo9Pc+NFBpyVNm7W+sgm/YgBZ7ap4pLn
sREvq9x90TsGDN01/8KzVCbpTwyQ5JV6L9diooen5uIryIRRKa0P+41ikn7F
hNcbHxzbupqJ5l/TshnqwoTC67lL7dawSP9iwqPUU6/S77OQ+vgmMOGb6Yy8
KoyX6H7GhO3agik7wpiIOg32OiY8ebi15s1jBulvTIhY97s8LJqJ1OXyBBN+
6r0/nb+6u98x4eGJrqUjcxio6ye1wUzISn3n8XMeg/Q/Jrw3epZ5cCsT5XRS
f8CE/llPiyKCmaQfssB2RbGoTJ+JBvXeXPKCw4KqpmIzzSdM0h9Z8Gts7ydB
Rkz0zXIg/iQWzH1xsJAhZ5B+yYI9Xm3r37OYCBdjfCNYsDj8+oWTy9ikf7KA
NaFgXdNIFqJOOyOLBVM0/V551DBJP2XBmqT3nI4HDFSh/JAef58Fb6XnLWKN
WKS/ssBzWtuRYBM2WhUUrb+kkQU9ftrNvCbs7rdsqJ0uNGxzsEEM6jpYsSGg
MFUqfmRF+i8bJpYljlZssURFUdk/hqnYUNe5e9vnb5akH7PByWeuxXfdAUjd
fuayYeBeh3kCSwbpz2w43ByrW/eWhdTbk8aGVz31DF7g/KD7NRu8Fr7rqprH
ROdSpw/qe5MNz/S2l/rtZZP+zYYRJy+V2raw0NhDbbgDsSH7p4dJpj6L9HM2
vN4yt8PlJAO1nd3uWGfEgT5R+jnXkhikv3Ngz7orYdMLGOgA7t7l7hwIQuNv
85oYpN9zwGhIeHADrje4mPS9M40Dlgf8eT9aGaT/c8BgpWrngzYG+lQRjEs8
B54Vnbua7sUieIADcwb08tv3l4m2fq7FFYgDA0d82Xz0KIPgAw6EfbR2MtnA
QOry8pYDx8cfsXrezCR4gQOlYbkTt25nojLcfZfqcsH1dKjGsu/d/IIL0RHK
3v1FTBRDtXNnLuTqrhUF3WQSPMEFi0PlIdPKmMiKSq/xXHAckTj2sgGT4Asu
3PySU2rzmoFuOpSLPOO44Lb/mN0PZybBG1ywHnxmU8ZpJsKHd5R3HD/vTMTe
lrcMgj+48D79V16dhIGo7mlSxoUDwn9WdUsYBI9wYfKdoNl5c5jo5GiqIHBB
z/JE7uIRTIJPeBA5Smtr7RomGqlOaB4k39+V1ILPm8YrPKj8cKb1+CMGap5P
HQgP9G+8PLfGiUnwCw9yT1QWWOD+lb6KeiAPdnXk/9haxCB4hgentOYGJUXY
InW5zuTBQ0GCT2LaQIJveHDG6MalVS+tEXU7DtzjwVnmnezvf6wI3sHPH1t4
9jbfGqkf95MHhwNgScyMAQT/8CE4g13w/JgNslM3LD7ULqsSbKpmEDzEh7vR
Zs/Ge7HRY0Q1CD7YG5fyCwUsgo/4ILC5FZptwkQLcfcaGcWHeE4v90C8XzRe
4sOlBh9xXDQbUafvnYrjLwURM8azCX7iw87X9++MxPg1/6v+crsCPuR5vdxz
7hqT4Ck+fAgI15PHM1Hon4N1pp/5sHiZOMhmNpvgKz64XVb68MUspKErwxDC
Dh7J8x61tTIJ3rKDlc1WDaa32OgI7j4NMjs4WPvZc9k3FsFfdiCM9Dx6fQ4L
DaHa31Q7KDvPKR3iyyZ4zA6Kz59s0Qlnowantot3t9rBBI0vTj8SWASf2YHO
6G3SBRiPqI8jzw6mP9l1XqOQTfCaHbRvtkopYbORurxV2oGTU+T6oEVsgt/w
v394hSE9zUGvx13vvU3HHu75iDN7fGITPGcPU/uYh7wuZKHVM6gOaw+HFqQc
HbaJRfCdPdjElU7pO4CFWLgbzRhnD/GPWofr4f2n8Z49VN7zGZW4gonurqWe
YA9fkjZlmMSwCP6zh+0rP/V9p8lCc5JMXvkcs4eofQ1ZJ08xCR60hwnjZVV2
p1kIFzNcce3h9ZobG9r53fjQHnyHbXteY81EecfkN8zb8fOe/9R+/JRB8KID
LPjFaTJJZCA1nGA7wN/SOyuPVtsS/OgAOrO5f3PSbVDHHaoAO0AqJ/zikKyB
BE86wOvGH/kXXAaiLCqdlzrAlENLhyvCBxJ86QC77MumfHO2QSr1BXCAySM6
g0on2RK86QCn9g5ab+nPQLX11AE6wL+26RXO/9frHCC38/al2oVMRFWT7B8O
UK7990Pc8m48KoALdTq3PR9wkIveJFzSBZDz+fNusYpF8KkA8uZkr2z6gvPN
7GfQSoUAIFayqtaFRfCqAMJj+HnpGG8sZ8ffiZwjgO06p/dqQzd+FcDEUVsP
5KSy0QC3ARiiCqCx6r/Xy26zCZ4VQNIi0c3xz9gI+VI7LIDs5Y+cjL/yCL4V
wKsXiSbrWWykhmefBPDr981FbodYBO8KYA9n5aAiMzZSv76hIxSUZj2v8eUQ
/OsIf4xKg4Zf5iB1OZA5wpE0zWG/R3IJHnaEvkbaS+c9wnyCaq9hjrCmWSa2
jmUTfOwIj7aEIYmUjX7jbHi3xRGuxTauufCLTfCyI6SyQl6EZ3PRXoxuHp53
hN2DhjYrs9kEPzuCrCKoefFqNvLJfIxP3BGOLg28KEvlEDztCB/Hfdi6QsFG
GNz55Gg7QfrZV4e+7u3G105Q8uZupMtZFsJgEndIJ+jZ31hpE8wieNsJhhT/
85QgJqK+dtVYJ6iq17syMYtJ8LcTGI8z6lNxjIlKcfeetcYJThywunB2Zjce
d4IfaFrYwd5MtJiCu7lO8HjDsvBVhQyCz53g/mWfP8ZzGMicOv6nTiD9HnnN
V5dB8LoTTLFK6pw+0xZdo8ppmxPkXb/rusTKluB3Z1h+f8G1KWJbpIYnLGfI
yH6nMT/PluB5Zyi9lr+7ExhISw24nGF+7w17Am4xCL53hllzMs13eDMRbm4Y
MDiDWUNHef4JJsH7zjBsXfiQ77geDlM3PGcY5X4GaRh1439nYKftXb+UzUI/
FFTBdoaHFY9UoQtZhA84QxXXYuSGYhbaNZIqOM6waeS7jwntLMIPXOA0M030
/RAbydQXxgWus//u7FnLJXzBBba36Kj87nJQ5RzqwF3gZ+Hj63EqDuEPLpC9
aMf0LB4XqenDbBc4w9KYWTedR/iEC8RwtWNLcT6or89OF+g8UJ7s+4RN+IUL
hEu97mduYKP7VDu67gLw+OWeC7je03wDryc6mY6x5KK5FLyrcYH9aZvHxBzj
Ev7hAiF6xu8XnGajLa8wwOzhCslrLSvOurMJH3GFk/1Mc9bGs5H6+li7wrFe
GwyfVnAIP3GF3LKcqiNefORIASgXVxgxyLTv4P5cwldcQTtkd+jRIC5StyuV
K3zd6hII2lzCX1xBf87f5Ud6ctDTJgwQJrhC1901IeswP6f5jCv8nJKxt12b
jdTwcK4r+JV+HTF8NovwG1fM9wQu9r+YiLq9k9e5QqrLaqbvUSbhO65wfupk
jyGRTBRANZw0VzAz495k8JmE/7jCHq2unynfGMiSKvAnXCGbt7PP4csMwodc
Qa/8RIzmVgb6ZooL6k38e1/9Tc9EMgg/cgWDyft8d43DeN8aF7DnrmBTlqef
OJlB+JIr3EtxBUq/2I5v36laV5gcMdz3OsazNH9yhTN93gx++oWBpqnlfFeY
mrt+22zXbj7lBvs2VO4Zv5GJRNSFMHaDUzVXiytru/mVG/iUb7A2mMZC6vbP
dQPzEV/jCztZhG+5wd5ek/wW4HzBzc1zk4cbdNSHpp/N4RD+5QYXNg/8XmnN
RWq4HegGCS4T0aHFXMLH3GDn5AVpbzEfix3me3pRuBvsmLI2su0Ih/AzN5Cd
/rZxTAoHUWixNsYNeJOcdGfpcAlfc4Oeu00rbN9yke1EfGMT3WDhRH4HYxaX
8Dc3+C/UZHSv/RzUGIb/IssNXj0a57NlLIfwOTdIRTb7bPdxUBHO/qEX3UDb
t2jjqrtcwu/c4Hv9gQUCPT7aPe/SI3TfDXJrNO6LOziE7+H4zJwH4vkcNItK
kHducKhQoKuR0q1/usEvcQ/ZtRlc5El9YKMb1M3UPXR4NJ/wQTcIfqtZ93ox
D/Wm4FQPISQ8G/rLtohL+KEQ2D+j+RvTuOj9lqpze62E8MT5Z/zH4VzCF4Ww
Uv+25fH3HHSOoi8uQlg4fcu+nHEcwh+FYCetSU8vwPwbPz5eJYS0b9otF4Rs
wieFsL3wceU9jH/GHLgd+ne8EL4HPjszewaL8EshKJ7ohRqZsBAuprsXzxXC
+MXLBxY/6uabQljTmPaCuwPz9RMTnnyJE8Kl5N8L54czCf8UgoXmVYciP5xv
53P0wtKEMHTNlTyeB5PwUSFkxf1I7qPA+YbR1svjQji+c9bl3pO7+akQmHct
l//Zhvk91S5vCqFD0PBy3VMm4av4e0vfehnaYf6Fb1NhmRACg6+IYtK6+Sv+
3lq90sCBbGRCwdNaIVQIbQ5fedDNZ4XQfmBdysOzHPTpuRX/TIcQVCLr5eUt
XMJvRfBBYN88ciwfXaHooLEIXjyMuXrsOY/wXRH8tYhOOubJQ1vx8WRwRPB7
W6ziSgWX8F8RiDosMk8e56IQqtx5iKD9oO1I1TUu4cMi8CwTRqzW5yGnHwG9
NweKwPzisoZZkTzCj0VgL1/xc2UQD3X9TvH/N00ELjN1/lb95RK+LILtsOn9
9BouotDOkhgRXHH6oTtfyiP8WQQN+46XDZbhfNO2y/+aIIKRH/4ubp5hR/i0
CG4U96k6+46H1PAjSwTLNh0bGz6IR/i1CJ47PoS3wTyEybVD+QURlFwaFH3w
G4/wbRHsHtYn9BzLDqnh/n0RaBy/LzYZYEf4twhY+jGehlP5qB6jldtvRfBJ
Wr5nvjWf8HERXL7OaOW18NBNil43imD0Kt1G97M8ws9FcKqudIqHNw/twOl9
VlcMBdmdjJ5nuISvi+HX8dtKqQ0XhVMJZSUGVozuxiMHOIS/i8HwzIzJuS4c
JKY2xFkMw1DPjVplbMLnxbC2sPmdGe5vPSgCrxLD/h6uqz1UbMLvxRCWWFv4
1oSNKgZhwjxeDF03pz7LaOnm+2IIKfzW9Lwe5xtm151RYvjP+2Z46h8W4f9i
2L7g0/N9FjjfKDgXJ4alT64nxQeyiR4ghhFeQ/szMthoBEXAUsUQU7H70M9O
NtEHxGAj7DghWstBavp0XAxFuRdF95lcoheIwWERf332b5xvszHBKBCDKSPu
j4ENn+gHYug3LGJbzDs7pP6cMjFc8mGczCi1I3qCGPIuuYaO/IH5MS4Pdz6L
ob3uamO/rXyiL4jBbE3s8c+T+Gg21W478PtJPJOkY/hEb5DAFgsfx3NL+ciL
AohGEvge9awJXeIT/UEC61xDcjt/8VEfCpBxJBDq/2liXSef6BES4H+8JJDX
8tEHzG73u0ug/ybpKMtGPtEnJBCdIv37dJgdOr8XA45ACehMUGiF29sTvUIC
C795uXbxHNAGCh5Pk8AGz/XRWQJ7ol9I4Ej5ZyEj3Q6NzXW16IqWAGvFhpLC
FDuiZ0hg4+VpVol69khNRxMkUPtiAvPBb3uib0igxwrD3ChvB0Sx02+ZElhk
2ido3D57ondIQNGV0hocaI/U6XBBAg7Kq4tvS+yJ/iGBvPqAm2OM7RFVXl/d
k8BK80iV5iU7oodIAGKqL09ysUNquPJWAkXXL/SxP9Dt10jA0Fowf7kJHyko
APNTApXb3t4pyuARvUQCnSWrLBaIeciUasC6UnC80flQ42O3XyyFJ20xwxcd
4KLP73ADsZRCedvFiVHzuERPkYLDnssT6zF+ysfdnu8shZ1B9YyWwVyir0jh
zOtr4uhxXJRA0Q2lFBrO13ICV3KJ3iKF27Fn2zde4qJQKgHHS2HpofPlGb26
/SMpTNC518hYwUPO1AZGSeH7z/DOWr1uPQa/T9jdeRNv43yj/ouTgrZw88GP
V+yIPiOF8T4biho77JH6OqVKYajBb9XJfQ5Er5HC8Wtn2aWaDohqT/XHpNDY
d8JvAT4fWr/Bv+evk7xqnj1Sw70CKfh+fbmiI9ye6DlSaNk0pXDyUntEsbuK
Z1I4om8ZkJVlT/QdKYxFS/zY73C+sZbZjPwsBa88dGmAuQPRe6SAuhibGl0d
EFWti9ulMOrLJlTk4UD0Hxn85XRVuIc4oFsu+I2MZLCk4EmvazcciB4kg/SG
5EWd6wUohaJvbBm8fTEh70eoI9GHZGBhejt/wW0Bmo7ZmZ27DPY8u7HqiLuA
6EUycJl0T1vTQYAklFwyXAZZicJPBQkCoh/JIPDlBPeIUY6oJ+VGTpNBm8b4
ktabjkRPkoHvfmm4i5cjek2Vo2gZpD2VvCqpFRB9SQYPB/pGBFYK0Enc3jUS
ZFC5f2bU5o8CojfJICDC5MfmCwKkhsuZMojkpbzc4isg+pMMBjWMnXE41wGN
jIwIaciTgd/NuLie/RyIHiWDVtGweU3b7BF126bfk8GzRHONUwPsiT4lg9iJ
/Ux3Fdoh3AxKXlfKIHl+bATE2hG9SgYao5v8DwyxQ8UrMQL/ifenXdb2y9GO
6Fcy+GaVlFnBtUNqOqzjDiODg5K7xHZEz3KHtj5e70eG4HyjAKOlO7xJ2TGz
fa8d0bfcYdWdz0LUZIe8KcDj5A4R9XHPh82yJ3qXO5iE/h63rNMeGVINW+kO
rwr9Nk7PdyD6lzv8WX2Fzd4iQB+pcj7OHaz0+Nd6mzoSPcwd5veY9+K8gSPK
w/DILModbCwenX7zWkD0MXdY6Z46cU6BAG2k6MZadzhXULDu61UB0cvcodg8
7vOVhwI0jkrYVHeo7xvsfa5BQPQzdwhyLDjoyHREdtSGH3OHQVGHmgaEORI9
zR1uG7ncN9iL8+0m/gc33EFzW97dmYWORF9zB6+jfcJCPzoinAyrZzxzh9rw
khON/ZyI3uYODh4Z+g+WOyG1vPDJHdaXsYaOcXQm+ps7ZNV5jvNscEZUFNTu
Dl/WBU/P3O9M9DgPCJ5VomHOcUbqnzP0gB1DP6WaGDsTfc4DLmxsOXVjqjOi
rq8P2wOaz0z8NdTQheh1HpA15+XdsdtdUC3VDmUeELboa5SHowvR7zwgu0zX
r7TcGV3F8NJ+uAfUKLUzH5c5Ez3PA7RmjnsWbOCCEim6NtUD5F/0fRv9XIi+
5wFJMeeaLHq4oMl/Xw0yj/aAUZbzC0aPdSZ6nwc8DJ472XmfE3LBbGTbVg/w
Odo58792R6L/ecCg8FrTpmWOSFMfM6ZMD1i5UzNsurEj0QM9gL0wtv1roQA9
N77avDzPAxw6Qzf2ThQQfdADhol7zv01R4DUcs1dD6juVWAbNU1A9EIP+Oq8
vHLFfAHC1SkyotIDWm5VmS3dKSD6oQfwvod9O1oiQOrj+uEB/RlnCoHhSPRE
DxAUe/yRbHVEVPkL1vGE0bsX8d5rOxF90RNsZq7TzFrnhNRwor8nfDp2Pujy
JyeiN+K4szdjjKUzouC5r5MndK5JMbpj70z0R08YIn2+dq3QGe2k6K7CEz7u
PMH4T+FM9EhP2HrrY2hXiDOaQQHMcZ4ggfCpDuuciT7pCQOrI7Y/Pe+MpBRA
muMJXdorvlypdyZ6pSekxtXPmuXkgvSoBr/WE9bc5dWK57gQ/dITPPTSX//e
54LehOAGtcsTNIJ2/9z9wIXomZ7wtnjTGqWOKzpFyV/HPEGrqSOxp4cr0Tc9
wQCxJ83Z5orWUAXihic8UG2+9Ow/V6J34vdrRvbhz12ROt2fekJukiBydbYr
0T89gXWk/WTpbldEtY/IT55Qq4hwabjqSvRQvB9d+6uX6rkhNRxr84S22Nd/
no50I/qoFxwOSvPydXBDFL0ZZegF35Q2s890uBK91As2nIuJ3dTiitRyAcsL
tGbPhgE2bkQ/9YIetkFJDhvcEGa3YrnMCyrDDTfpBgqJnuoFkzTGuVxb64Yw
WZ53aZgX7BPI0z4+dSX6qhesDLOWaUx1RUYHPx4VTPWClBMHZvc2dCV6qxfo
1Cq0Hx50QVVHBR+zl3pBafkCqyH+LkR/9QI4yXCu0HFBFyg5casXcBi2HsVv
nYkei99/GKd83iNntAl/XvIBL5ALT+xNeOJM9FkvyO97+1jPL85oPFUu8rzg
XsCK7b4mLkSv9YKGp8MPXhzhguxx+1151wucfn22/Z3mQvRbLxAaxy4dUO2C
1HD2DV6PeiyRm7kSPdcLjk5TPfssckVUNZ/5wwuGPZNH5Ax3JfquFzxTHFsX
Pc0VqeUWbW/4bfR92tVoV6L3esMS+/DH2omuaBElCPX3hjCleMSrQ65E//WG
PkuvfPMocEUqStBw9IbVloPW6Ve6Ej3YG0Zudd6wE5+nGUXIFd7wIWL7xcKB
bkQfxn+/clvQZF83RFWry2O94WKS8ZaMEDeiF3vD8Alrz85a7oauUfLsHG84
8bb596z9bkQ/9oa6xhiX+DI3tA2nx6E13nh/G5/yGUKiJ3tDYKP/7NDFQjSF
Kre7vGHw5rdRE5YKib7sDad9Fp41GCFErhSgyvWGzRsDdk9WCYne7A0un2IM
I8OFSIsCBDe8oXFje+uNY0KiP3vDyrLtOkFNQvQC0+vYp96gyOYvdy4XEj3a
G8wmB1g9zBGio5RcVeMN90esaVy0S0j0aW8oX2NWxMDPW04VlDZv2LGyy/V4
lZDo1T4gedK6SGIrQkOpC9HHB0JGrNp/vUFI9GsfkLmt3HF8uRBR2TaG5QNv
fE+1bzcVEj3bB3Yy/3pE3XNDuFk+fij1gY78kEUxCW5E3/aBkyP/5e4PdUPq
cJgP/DxhXL7d043o3T4gnrJ8nYDjhqjrdSXMBxrPn7yZbOFG9G8f2P9+j84Z
UzekbldLfWDZngsGrZZuRA/3AYsam9ssvhuS4d3M2eID58bv8BLi59P6uA/U
LjphuHSUG+pF0akDPtCr8NF06Tw3opf7QMKFC9Y6+H0rMdvdcd4HFifrZA0/
6kb0cx8YVBX0Wn7HDZ2m5L67PlCZJbax+uBG9HQf8JiwtiL4rxtau6Rl96o3
PnBey7Opv6WQ6Os+8GrjwV/67kIUjP+66bsPuJtOygsZLyR6uw9IZS/Nx6wQ
Itz9es3W9oU32hGlrP1Cor/7QsugQz2u3cL5htncBwu8ztdoEVcLiR7vC4s2
VxZv0hQh9XY6+kL86lBGHFtE9HlfeGDSlTZoiAhR5ekR+IK1no3+f+tFRK/3
BYcfTH/TByKkbvdjfSEw+azVQSsx0e99YUHzloPRbDGi4HP+bF/4fOLwnJn6
YqLn+0J+yu+PhRpipKaja3xhll7INaaNmOj7vsB/POboj1Axqj6HCehOX+if
sjCGdVZM9H5f2FHz6/OKZDG6SMmlub5wtytXr3OimOj/vnClzKPmmFSM4m9i
AnDdF3r3P3W53FlM/AC8PlFHudhdjCZQAPapLxTpPZb9sBMTf8AXVqXe1erU
EyMHCoDV4P0Zc88545GI+AW+ELz7Y0vtDhH6W4YBRKsvbBsp9HQKERH/QA6n
fqZXZQpEqFQ9ziqH4/ejBwb0FBE/QQ6v7thUpXwRIqq8f2TKobpe78v8l0Li
L8ihacT2pHX3hEgNl6RyuD6sZfKEIiHxG+Qw9GnmzTXFQkShzcdD5bBp9Iy9
Q54Kif8gx3j+KrfknRCp6XyYHD49ls453CwkfoQcenn1u9jRS4QoeezqEjl4
n7p/aRJfRPwJObQOkQ5rUYqQWm7eIocNz4cePD9DRPwK/HsRsiK7DSKU1Asz
xv1yOKaYE2mUKyL+hRyWbj2oMfqeCIVhNGV9Xg4hd1+113wTET9DDp/7GQnB
UIzcLLp+pxTLYYKbVuQNoZj4G3JguRmavJ4gRtr45/XeyCH7V+JZnVgx8Tvk
UDVe9cjgiBi9pK7zd7w/z0cuHndLTPwPOQz8cyVm+08x3W81AVLSyrdf6iUh
fgiAY7rNgQMTJHT/NQBIEkQZpsVJiD8C8MM6Y9yORgndj80ARO9nqF5+kRC/
BMCr54TC9ioJ3Z8ZAK/CwsY+eish/gnAPkZ+wa4mCd2vHQBmvT9RaMiREj8F
YGnP0MCZ+6R0/xYDvv/T35yVSYm/AmC+3OJ1i5eU7ue+AHF+BhlZdRLitwDc
naHdsqFCQvf3IQCGMUa7/5ZJiP8CUH0rPPNKhoTu96MBtlfvDX6WLiF+DIBV
1b+5gcMldP+fDLDeXneegURC/BmAhV2Nr3L+iWk8MBPg5+Pcx9KPYuLXADQE
j6n/dFNM44PFAP6e9s43joqJf4Pf/7p98oV0MY0XVgH0SAj43rZVTPwcgHnO
R/wPJ4hp/BAPUOf6y2XVFjHxdwC2agX739stpvHEDoBxT0JslFli4vfg9+vM
0qjKF9P4IgOAEy+wGfhQTPwfgEn/3FOs6sU03jgCsHmc6SemjoT4QQBrg1Zc
ynKQ0PjjLM4Pz40ZowdLiD8EID/eu2T8fAmNR64CXBDN8MjYKSF+EYC705x3
sjwJjU/uABh5pUtzcD7Q/hH+vqH+HqubJTReKQVYriiJrsbnS/tJALHXWwyu
u0hp/FIBkP98HdSlS4m/BLBzcVmvlAgpjWeqAewKlbcSesiI3wTQrJeStzhb
SuObeoBkk/2PvI/JiP8E8IZppqxtk9J45w/ez8phJS/eyogfBbA7ZFd60XQZ
jX80FWB3YU16dISM+FMK2PC3lp+cLqPxkIEChhlxG8bNkhG/SgFRnxf41qbK
aHxkpoB8O41TzY0y4l8pQPbXcEptuIzGS7YKiAgXfoic7078LAVk7BTl3lTJ
aPzkoICKB3OLczbJiL+lgHOOs5amT5HReEqsgJXbw3Kc+sqI36UAdg2YJ+2R
0fjKVwGnz7cYlBRJif+lgK+Wiybaj5XReGuwAqa1mn1w2y4lfpgCXr+5YnG3
Rkrjr9EK0Ngg+BweJSX+mAJSrJlflu6X0nhssgIW7N17bsoEKfHLFLA3lK/1
ZbmUxmczFVDtdGovZ7yU+GcKGDx3wszKJVIary1SQINnsK7DLCnx0xQgf5m1
v32LlMZvqxTgsGHgk3VbpcRfU8CRiv3fwy5KaTwXrwD9P1+Ojr4sJX6bArrc
P17qapTS+G6HAs72/1s1uVZK/DcFOBecyl/gI6PxXgY+z/i+ZfmmMuLHKUD7
96xRsFNG47/DCjAKnHXQ00NG/DkF/PQ6yT9QL6Px4FkF5PmPMKgaIyN+nQLe
PzQxzwB3Gh9eVcDEyW75ZlEy4t8p4MKkuULnye40XryD/73z1BMmcTLi5ymg
KC85IlnsTuPHEvx9My783oTPk/b38Pv9OvQmVdOdxpMVCsj8KWkJvCwjfp8C
lgj+cLwqZTS+rFaASeaInJ1lMuL/KcBqiXALuiuj8Wa9AhISQ/7N/yAjfiDO
x9OG1TPxuhp/tuDfz9SymPdKRvxBBcxfZzNCUi6j8aimEnT6jHuzB/897Rcq
wVy1/cmyLzIanxooQda161dIgYz4h0oYudH6wza8rsarZkooGlPnYlIsI36i
EmZWBuf0fiqj8autEhwzU+qffJQRf1EJtgusXZvPyGg8a6+EHveLI88ZuRO/
UQmzvt9j5O+S0fhWrIRspvTwywB34j8qYfYd82l9N8hovOurhNSh/Yefnu5O
/EglBL78HtmySkbj38FK+K9r+dj7o92JP6mEmOtP7ErXymg8PEoJj/s+emIu
cyd+pRKe5A2/4LVVRuPjyUr4tn1pI4fpTvxLJfzZ9rhOuVtG4+WZeD/uh6xh
9HMnfqYSeO5LnjXkyGj8vEgJrnva1n/v4U78TSUIh3/prXVORuPpWCUcy0qT
a3bKiN+phEfKuJq0qzIaX8fj76lPjPvbIiP+pxLW/fMfWopkNN7eoYS2E/Mf
p+H6RPuhSng+JFlzMj5PNf7OUEJZ2PTSAQ0y4o8qoV3VFc97JKPx+GElXNr4
9coTfJ60X6qEPCiTvH8io/H5GSVEPzi2fl6NjPinSrAKhL2nXshovH5VCflr
+20cjs+X9lOV8Dci4Y3jaxmN3+8oIW7e9/1672TEX1XCOcn6STm4XqvxfIkS
fBo6RcE432m/VQmegdHXR76X0fj+lRIsC0rvJ+B12n9Vgu7GtQwTvK7G+9VK
cKqsezkNP5/2Y/H7J21+kIefr8b/9UpYbeDQ7zq+H7Q/qwT7BsOPifh5aj7Q
ooSW0/mtgioZ8WtxXLrU5iVeV/MDDRV4aHuk5+Hvo/1bFSjtFcL++PfVfMFA
Be2CoAcjcEz7uSqwEMx0bcLPU/MHMxXkazSLO97IiL+rwnjgRULAZxnNJ2xV
ULziam2fChnxe1XwzviF1e2vMppf2Kvg7PzgzuX4vtL+rwpKK5tvJn2T0XxD
pIKAObxe6/A67QeroG23o805vK7mH74qyI0aWXEb33/aH1aB3eqNF6/WyWg+
MlgFLXMEnQifF+0Xq6DxWXReIP59NT8ZpQLddYvCavF+0P6xCjJBs72pVkbz
lVAVPC0Yf+Ez3n/aT1aBhnHSh//w96n5y0z8fVfE8xPx/tP+sgqeHVo1zgev
q/nMIhWM6jH4ZgXeX9pvVkF5da/mt59kNL+JVUG/Y7ff/cb7SfvPKrDZW/o9
C6+r+c4m/L6P15q0VsuIH62Cg4djzi/H62r+s0MFm4zm7/z8n4z403h90iNV
JF5X86EMFRhJvifcwvlN+9Uq+HbAaM1svK7mR4fxfi4oSI7FMe1fq6D6hlh/
F47VfOmMClaGZ/fqh7+H9rNV0JlTXlCO19X8KV8FCcXjryXjddrfVsGVuObp
gGM1n7qjgpTJyXdf4Zj2u/F5PTBsr8Cxml+VqGBrWnaJDt5v2v9Wgd5gc5sY
HKv51isVcA37JHvgmPbDVdCR/JrXE99nNf+qUsGMKQP7r8XrtD+ugr8DXilX
4HU1H6tXgf74hNXf8Trtl6sgJi6w6wZeV/OzFhVMlemsiMcx7Z+roKjixolq
HKv5moYffAxoO+aM84X20/2gz7qUE214Xc3f9P1gfmBX4he8TvvrfpDefP2a
AY7VfM7MD0L0njtvwflI++1+8PzjzYXD8Lqa39n6QVKpfJ4Gzmfaf/eD68m7
6w/idTWds/eDmMm3tafjddqP94ONI/rmmOLnqfmfyA8s7V+MzsXrtD/vB8sv
aZnvwetqPujjB8WmqrzPeJ326/0gVONPiiWO1XBtsB/Ezq7r64jxAu3f+4Gd
4aBBO/C6mi+O8gPm7fb0FXid9vP9YHSi3mstHKv5Y6gf9MPo8z6OaX/fD941
MtOicazmk5F+sOfypsV9cX2m/X4/WBi0/XEDXlfzy0V+cNft9IpQvE77//h7
xB7DJuJYzTdj/eDG+r3BF3FMzwP4wXTPD7Nu4ljNPzf5waGYG6m9vsvIfIAf
VLxf2GqHYzUf3e4Hgac97UNxTM8L+MHRmqjUJByr+WmGH2gdKjp1Ccf0/AA+
70MGt37gWM1XD/tB0Z9f3wx/yMg8gR8cEEcPHo5jNX894wfXotdNX4hjer7A
D2Yo3NJycKzms/l+YN3Up/Upjul5Az948Gfp1L84zsX08ddtP2i9d+eq808Z
mT/wgyd1QS/G4dgYozGXEj8YdLHTOhnH9DyCH3S0elafwPEKym555QdCTt+6
BhzT8wn4PKPDc/Rxv6y+9PTPkSo/aHE/p+eNY3pewQ8YBxuTF+CYsjervvnB
7lB+aiqO6fkFPxDVPZxRjGN8Om4DWvygesBEiyYc0/MMfnBkhMs92yZc3yjA
ruEPzBLxvwAc0/MN/qDVv+vAShyr5QZ9f7Bf0f9EDo7peQd/WNp8xuI5jqly
XGLqD7v3lj/7hWN6/sEftuzg3RE24/pGNXxbf8hquTYlEMf0PIQ/WK3PGhCP
YzVdsPeHkZWb63NxTM9H+MMeqNf8gGO1nC7yB5Fou9tfHNPzEv5wkv1wpuwX
rm9jcMHw8Yea1RskY3FMz0/4wwe249cEHFP21e9B/jD13ZGrZ3FMz1P4g94M
dPItjiOoAxuF378uukj/t4zMV/jDhJFh85xwrLaLQ/1hgP7X8Egc0/MW/lBc
abFoLY6pbnE00h8qxn5oyscxPX+Bfy9pZedbHGfjP69a6A9BVcHWPTE+oucx
/OFg9Uo7IY71KcM/1h++VbwLnYJjej7DH8wd8jo243gJ1c42+cOj89fCT+OY
ntfwh6EWGdff4/gtJZdu9wfGzj5M3T8yMr/hD2dLFP854NifMpD3+sOu/b1X
huCYnufwh2gH8aBNOD4Tgyv6YX9o9Zj58RCO6fkOf9ikuT+pEscWlEF6xh+G
cJ8ldeKYnvfwBzMP3zBWqwzFUXZgvj/0Hs/wHoNjev7DH+aN23ZmFY6/aujP
v3bbH0pTzYL24JieB/GH36WrVpbjeBRluD32B+Ml5VvrcUzPh/hDCwo2YbXJ
0PWeeMde4f1O42+V45ieF8H5d2uDaiGOOdR2V/lDbkJp/l4c0/MjeH3G0fR8
HCdRctg3fxDYsefW4pieJ/GHsnvHOcbtuL5hOFD12x8UAcLRMhzT8yX+8Jmf
vC0Ex1Q2D9QIgIXO6QmbcUzPmwRAyrZNd0/gWE1X9QNguHNj4Dsc0/MnARCu
tVrUhGO13WMaAGdmrsh07JCReZQAaI5NLh6M44wsDPBtAuBG1ujlC3FMz6cE
wD+z4ekHcEzZq73sA+CeVcGTmzim51UCoPXUQp2vOKZOy08UAEtaJ2X2/isj
8ysB8Pf7lRnuOFaPM/gEgH9nz9OTcEzPswRA7pRVnutx7Es1uEEBsPtCyYGT
OKbnWwIgMT4h/zGOqXT9HRwAR5bErmzFMT3vEgDG+8wuWf3D9Y0qMKEB4DGd
w/LDMT3/EgBG3rxNEThWw6nIADha6ibeiWN6HiYAXLti4s/jWC3nLwyAzc4v
t1TgmJ6PCYDzAr1+uphvUHS/emUA1PEW9rTF8f8Azbbjig==
          "]]}, {}}, {{}, 
        {RGBColor[0, 0, 1], PointSize[0.006944444444444445], 
         AbsoluteThickness[1.6], LineBox[CompressedData["
1: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
9hQbFqK6p1U1F+TqVfETC1gEj3ABfR43fNdQ3F8HUwWBC8NalfYuMSyCT9xg
VL+L65zw/f01Ce0GN+fMDbW834VX3MDOsbfo3Xkm+jaF2hA3eDdm2ekpn5kE
v7hB3oYHt4zw92UtpB7oBqEvpx3nfGUSPOMGK2aZ1T7uYCJNud6N/946kwkz
uvCNGyTUfXy95xsLUacj57obWF+u7V6OzxeNd9ygRNSu0282E2ke99kNPic/
Ylr1ZRL84w6PhpU2X9zNQh6ahuUOO56GqQUcFsFD7iBSNmwd1ouJqhDVINxh
p+NR98kWXfjIHRaFB00+OI2FpuLu1T/FHYJ32WxP2tSFl9xhwqU5J8vDWYja
/ZAMdwh9azOzwrZLL3CH9OCCKZcyGKj0vclcjzJ3MK8Y+XzgC1eCp9zh9/kM
vedsFzTyZ26zdZM79L+41zR9tBPBV+7g0N+s+e1qR6SlL8EQwgMY4yfmHTzv
SPCWB/QwCon3+O6E9uPu0yLxADlfe5oRx5XgLw8YZftq2l/cn3pR7W+MBxTM
OXD0kUkXHvOAzyue830wn2jx/XXy2loP2H7sSOb2K134zANc1nQfVvGGiTTb
cdwDRo7nDO/5gU3wmgcExPz12FvLQpryVu8B2RkPmws5bILfPIC/afOqfUtZ
qG7oebMNep4wKTiY9ySfSfCcJ6jS9no89Mb5No7qsJ7Q54XBde4oNsF3nrDf
+ILfcgc2YuFuNG6oJ8QefzO4dCSX4D1PmCJsjYpVstG1xdQTPEFbPPVJ5fQu
/OcJ74POfrn6lYUmbrSqDT3oCaaeaWNSlnMIHvSEyJeVjSaY3+NihiuuJ6Rs
YTaWvGYTfOgJRpFD+uTJOOj4QdkF29+eMKvqQ3fZHjbBi17QckG+YkkVG2ng
BNsLWhMKbJo6uQQ/esGh06k6nFI26qigCrAXNBYscVh4h0XwpBesdY05sUeH
jfZQ6TzTC/ybczLV1V183AsMo+V9tgeykFJzALygv6vg+R58Hmm86QUXY7fb
Guiy0duP1AZ6QfYNVZgKnzcaf3rBKuODOl4vmYiqJntbvaDMgvslEZ8fGo96
w7/EW/7155jI32g4Lune4N/ZC/WWMQk+9Yb/HtcMf+nJRHgzB8yXe4N6o+fi
k7e78Ko3nPvqyq50YqC57FUVSRO9IVEvldXQ6kLwqzf45ZUOdNZ2QU58JwxR
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
          "]]}, {}}},
      AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
      Axes->{False, False},
      AxesLabel->{None, None},
      AxesOrigin->{0, 0},
      DisplayFunction->Identity,
      Frame->{{True, True}, {True, True}},
      FrameLabel->{{None, None}, {None, None}},
      FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
      GridLines->{None, None},
      GridLinesStyle->Directive[
        GrayLevel[0.5, 0.4]],
      ImageSize->800,
      Method->{},
      PlotRange->All,
      PlotRangeClipping->True,
      PlotRangePadding->{{
         Scaled[0.02], 
         Scaled[0.02]}, {
         Scaled[0.05], 
         Scaled[0.02]}},
      Ticks->{Automatic, Automatic}]}
   },
   DefaultBaseStyle->"Column",
   GridBoxAlignment->{"Columns" -> {{Left}}},
   GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
  "Column"]], "Output",
 CellChangeTimes->{}]
}, Open  ]],

Cell[BoxData[
 RowBox[{"\[IndentingNewLine]", "\[IndentingNewLine]", "\[IndentingNewLine]", 
  "\[IndentingNewLine]", "\[IndentingNewLine]", "\[IndentingNewLine]", 
  "\[IndentingNewLine]", "\[IndentingNewLine]"}]], "Input",
 CellChangeTimes->{}],

Cell["", "Text",
 CellChangeTimes->{}],

Cell[TextData[StyleBox["Detuning scan",
 FontSize->36]], "Text",
 CellChangeTimes->{}],

Cell[CellGroupData[{

Cell[TextData[{
 "Log of the computation and sundry details. Expand this cell to see the code \
details.\n\nCalculations were run using npp=115, nRamp=2.5 and nTop=20, with \
the fundamental\[CloseCurlyQuote]s ellipticity at",
 Cell[BoxData[
  FormBox[
   RowBox[{"\[Alpha]", "=", 
    RowBox[{"35", "\[Degree]"}]}], TraditionalForm]]],
 ". Detunings \[Delta] from 0 through 0.25 were calculated in steps of \
0.001."
}], "Text",
 CellGroupingRules->{GroupTogetherGrouping, 10000.},
 CellChangeTimes->{}],

Cell[BoxData[
 RowBox[{"Quit", "[", "]"}]], "Input",
 CellGroupingRules->{GroupTogetherGrouping, 10000.},
 CellChangeTimes->{}],

Cell["\<\
This is the code used to run the integrations in the paper. Runtime was about \
4-5 hours on a desktop machine with an 8-thread Intel Core i7 processor at \
3.4 GHz, running 8 kernels in parallel. It is quite memory-intensive, but \
kernels are revived automatically if they run out of memory. Each subkernel \
gets assigned a detuning \[Delta], does the calculation within its own \
context, and then exports the result as a .mx file in a local folder.\
\>", "Text",
 CellGroupingRules->{GroupTogetherGrouping, 10000.},
 CellChangeTimes->{}],

Cell[BoxData[{
 RowBox[{
  RowBox[{"directory", "=", 
   RowBox[{"NotebookDirectory", "[", "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"resetMessages", "[", "symbol_", "]"}], ":=", 
  RowBox[{"With", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"mysymbol", "=", "symbol"}], "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"Unprotect", "[", "$MessageList", "]"}], ";", 
     RowBox[{"$MessageList", "=", 
      RowBox[{"DeleteCases", "[", 
       RowBox[{"$MessageList", ",", 
        RowBox[{"HoldForm", "[", 
         RowBox[{"MessageName", "[", 
          RowBox[{"mysymbol", ",", "_"}], "]"}], "]"}]}], "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"Protect", "[", "$MessageList", "]"}], ";"}]}], 
   "]"}]}], "\[IndentingNewLine]", 
 RowBox[{"Length", "[", 
  RowBox[{"\[Delta]Range", "=", 
   RowBox[{"Range", "[", 
    RowBox[{"0", ",", "0.25", ",", "0.001"}], "]"}]}], "]"}]}], "Input",
 CellGroupingRules->{GroupTogetherGrouping, 10000.},
 CellChangeTimes->{}],

Cell[BoxData["251"], "Output",
 CellGroupingRules->{GroupTogetherGrouping, 10000.},
 CellChangeTimes->{}],

Cell[BoxData[{
 RowBox[{"DateString", "[", "]"}], "\[IndentingNewLine]", 
 RowBox[{"NotebookSave", "[", "]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"SetSharedFunction", "[", "detunedDipole", "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"SetSharedFunction", "[", "detuningFilename", "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"Print", "[", 
  RowBox[{"\"\<Total = \>\"", ",", 
   RowBox[{"Length", "[", "\[Delta]Range", "]"}], ",", 
   "\"\< points at ~230s/point, will be done roughly, more or less, at about \
\>\"", ",", 
   RowBox[{"DateString", "[", 
    RowBox[{
     RowBox[{"AbsoluteTime", "[", "]"}], "+", 
     RowBox[{
      RowBox[{"Length", "[", "\[Delta]Range", "]"}], "\[Times]", " ", 
      RowBox[{"425.", " ", "/", "6"}]}]}], "]"}], ",", "\"\<.\>\""}], 
  "]"}], "\[IndentingNewLine]", 
 RowBox[{"ParallelTable", "[", "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{
    RowBox[{"Off", "[", 
     RowBox[{"FrontEndObject", "::", "notavail"}], "]"}], ";", 
    "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"detuningFilename", "[", "\[Delta]", "]"}], "=", 
     RowBox[{
     "directory", "<>", "\"\<data dump of detuning scan/detuning \>\"", "<>", 
      
      RowBox[{"ToString", "[", "\[Delta]", "]"}], "<>", "\"\<.mx\>\""}]}], 
    ";", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"timing", ",", "temporaryDipoleList"}], "}"}], "=", 
     RowBox[{"AbsoluteTiming", "[", 
      RowBox[{"makeDipoleList", "[", 
       RowBox[{
        RowBox[{"\"\<npp\>\"", "\[Rule]", "115"}], ",", 
        RowBox[{"\"\<nRamp\>\"", "\[Rule]", "2.5"}], ",", 
        RowBox[{"\"\<nTop\>\"", "\[Rule]", "20"}], ",", 
        RowBox[{"\"\<nGate\>\"", "\[Rule]", "1.3"}], ",", 
        RowBox[{"\"\<\[Alpha]\>\"", "\[Rule]", 
         RowBox[{"35", " ", "\[Degree]"}]}], ",", 
        RowBox[{"\"\<\[Delta]\>\"", "\[Rule]", "\[Delta]"}], ",", 
        RowBox[{"\"\<\[Omega]2\>\"", "\[Rule]", 
         RowBox[{"1.95", " ", "0.057"}]}]}], "]"}], "]"}]}], ";", 
    "\[IndentingNewLine]", 
    RowBox[{"Save", "[", 
     RowBox[{
      RowBox[{"detuningFilename", "[", "\[Delta]", "]"}], ",", 
      "temporaryDipoleList"}], "]"}], ";", "\[IndentingNewLine]", 
    RowBox[{"Print", "[", 
     RowBox[{
     "\"\<Detuning \>\"", ",", "\[Delta]", ",", "\"\< completed at \>\"", ",", 
      RowBox[{"DateString", "[", "]"}], ",", " ", "\"\< in \>\"", ",", 
      "timing", ",", "\"\<s.\>\""}], "\[IndentingNewLine]", "]"}], ";", 
    "\[IndentingNewLine]", 
    RowBox[{"NotebookSave", "[", "]"}], ";", "\[IndentingNewLine]", 
    RowBox[{"On", "[", 
     StyleBox[
      RowBox[{"FrontEndObject", "::", "notavail"}], "MessageName"], "]"}], 
    ";", "\[IndentingNewLine]", 
    RowBox[{"resetMessages", "[", "LaunchKernels", "]"}], ";", 
    "\[IndentingNewLine]", 
    RowBox[{"detuningFilename", "[", "\[Delta]", "]"}]}], 
   "\[IndentingNewLine]", ",", 
   RowBox[{"{", 
    RowBox[{"\[Delta]", ",", "\[Delta]Range"}], "}"}]}], 
  "\[IndentingNewLine]", "]"}], "\[IndentingNewLine]", 
 RowBox[{"Beep", "[", "]"}], "\[IndentingNewLine]", 
 RowBox[{"DateString", "[", "]"}], "\[IndentingNewLine]", 
 RowBox[{"NotebookSave", "[", "]"}]}], "Input",
 CellGroupingRules->{GroupTogetherGrouping, 10000.},
 CellChangeTimes->{}],

Cell[BoxData[
 RowBox[{"\[IndentingNewLine]", "\[IndentingNewLine]", 
  "\[IndentingNewLine]"}]], "Input",
 CellGroupingRules->{GroupTogetherGrouping, 10000.},
 CellChangeTimes->{}],

Cell["\<\
To analyse the data, it is best to quit the kernel and reimport it.\
\>", "Text",
 CellGroupingRules->{GroupTogetherGrouping, 10000.},
 CellChangeTimes->{}],

Cell[BoxData[
 RowBox[{"Quit", "[", "]"}]], "Input",
 CellGroupingRules->{GroupTogetherGrouping, 10000.},
 CellChangeTimes->{}],

Cell["These functions work with the filenames,", "Text",
 CellGroupingRules->{GroupTogetherGrouping, 10000.},
 CellChangeTimes->{}],

Cell[BoxData[{
 RowBox[{
  RowBox[{"filenameToDetuning", "[", "filename_", "]"}], ":=", 
  RowBox[{"ToExpression", "[", 
   RowBox[{"StringDrop", "[", 
    RowBox[{
     RowBox[{"Last", "[", 
      RowBox[{"StringSplit", "[", "filename", "]"}], "]"}], ",", 
     RowBox[{"-", "3"}]}], "]"}], "]"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"filenameToDetuning", "[", 
   RowBox[{"j_", "?", "NumberQ"}], "]"}], ":=", 
  RowBox[{"filenameToDetuning", "[", 
   RowBox[{
   "filenamelist", "\[LeftDoubleBracket]", "j", "\[RightDoubleBracket]"}], 
   "]"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"\[Delta]Range", "=", 
   RowBox[{"Range", "[", 
    RowBox[{"0", ",", "0.25", ",", "0.001"}], "]"}]}], ";"}]}], "Input",
 CellGroupingRules->{GroupTogetherGrouping, 10000.},
 CellChangeTimes->{}],

Cell["\<\
and this will Get the data back into the kernel, checking for any errors and \
reporting which detunings caused error messages\
\>", "Text",
 CellGroupingRules->{GroupTogetherGrouping, 10000.},
 CellChangeTimes->{}],

Cell[BoxData[
 RowBox[{
  RowBox[{"Reap", "[", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"Table", "[", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"Check", "[", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{
         RowBox[{
          RowBox[{"detunedDipole", "[", 
           RowBox[{"filenameToDetuning", "[", 
            RowBox[{
            "directory", "<>", "\"\<data dump of detuning scan/detuning \>\"",
              "<>", 
             RowBox[{"ToString", "[", "\[Delta]", "]"}], "<>", 
             "\"\<.mx\>\""}], "]"}], "]"}], "=", 
          RowBox[{"Get", "[", 
           RowBox[{
           "directory", "<>", "\"\<data dump of detuning scan/detuning \>\"", 
            "<>", 
            RowBox[{"ToString", "[", "\[Delta]", "]"}], "<>", "\"\<.mx\>\""}],
            "]"}]}], ";"}], ",", "\[IndentingNewLine]", 
        RowBox[{"Sow", "[", "\[Delta]", "]"}]}], "]"}], "\[IndentingNewLine]",
       ",", 
      RowBox[{"{", 
       RowBox[{"\[Delta]", ",", "\[Delta]Range"}], "}"}]}], "]"}], ";"}], 
   "\[IndentingNewLine]", "]"}], "\[LeftDoubleBracket]", "2", 
  "\[RightDoubleBracket]"}]], "Input",
 CellGroupingRules->{GroupTogetherGrouping, 10000.}],

Cell[BoxData[
 RowBox[{"{", "}"}]], "Output",
 CellGroupingRules->{GroupTogetherGrouping, 10000.},
 CellChangeTimes->{}],

Cell[BoxData["\[IndentingNewLine]"], "Input",
 CellGroupingRules->{GroupTogetherGrouping, 10000.},
 CellChangeTimes->{}],

Cell["\<\
The recovered data can then be exported into a single  .mx file\
\>", "Text",
 CellGroupingRules->{GroupTogetherGrouping, 10000.},
 CellChangeTimes->{}],

Cell[BoxData[
 RowBox[{"DumpSave", "[", 
  RowBox[{
   RowBox[{
    RowBox[{"NotebookDirectory", "[", "]"}], "<>", 
    "\"\<data dump of detuning scan.mx\>\""}], ",", "detunedDipole"}], 
  "]"}]], "Input",
 CellGroupingRules->{GroupTogetherGrouping, 10000.}],

Cell[BoxData[
 RowBox[{"{", "detunedDipole", "}"}]], "Output",
 CellGroupingRules->{GroupTogetherGrouping, 10000.},
 CellChangeTimes->{}],

Cell["which can be read, preferably with a fresh kernel, in using", "Text",
 CellGroupingRules->{GroupTogetherGrouping, 10000.},
 CellChangeTimes->{}],

Cell[BoxData[
 RowBox[{"Quit", "[", "]"}]], "Input",
 CellGroupingRules->{GroupTogetherGrouping, 10000.},
 CellChangeTimes->{}],

Cell[BoxData[
 RowBox[{"<<", 
  RowBox[{"(", 
   RowBox[{
    RowBox[{"NotebookDirectory", "[", "]"}], "<>", 
    "\"\<data dump of detuning scan.mx\>\""}], ")"}]}]], "Input",
 CellGroupingRules->{GroupTogetherGrouping, 10000.}],

Cell["\<\
although the resulting .mx file is OS-dependent and cannot be read back in \
other systems (and is therefore not provided). The advantage is a smaller \
file (59.8MB instead of 74.7MB), and faster processing when importing.\
\>", "Text",
 CellGroupingRules->{GroupTogetherGrouping, 10000.},
 CellChangeTimes->{}],

Cell[BoxData[""], "Input",
 CellGroupingRules->{GroupTogetherGrouping, 10000.},
 CellChangeTimes->{}],

Cell[TextData[{
 "Alternatively, the data can be exported as a ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " Expression to a plain-text file like the one provided."
}], "Text",
 CellGroupingRules->{GroupTogetherGrouping, 10000.},
 CellChangeTimes->{}],

Cell[BoxData[
 RowBox[{"Save", "[", 
  RowBox[{
   RowBox[{
    RowBox[{"NotebookDirectory", "[", "]"}], "<>", 
    "\"\<data dump of detuning scan.txt\>\""}], ",", "detunedDipole"}], 
  "]"}]], "Input",
 CellGroupingRules->{GroupTogetherGrouping, 10000.}],

Cell["Again, this can be read in, with a fresh kernel, using", "Text",
 CellGroupingRules->{GroupTogetherGrouping, 10000.},
 CellChangeTimes->{}],

Cell[BoxData[
 RowBox[{"Quit", "[", "]"}]], "Input",
 CellGroupingRules->{GroupTogetherGrouping, 10000.},
 CellChangeTimes->{}],

Cell[BoxData[
 RowBox[{
  RowBox[{"<<", 
   RowBox[{"(", 
    RowBox[{
     RowBox[{"NotebookDirectory", "[", "]"}], "<>", 
     "\"\<data dump of detuning scan.txt\>\""}], ")"}]}], ";"}]], "Input",
 CellGroupingRules->{GroupTogetherGrouping, 10000.}]
}, Closed]],

Cell[BoxData[""], "Input",
 CellChangeTimes->{}],

Cell[BoxData["\[IndentingNewLine]"], "Input",
 CellChangeTimes->{}],

Cell["\<\
To analyze the data directly, simply load it in. Be sure to run the \
initialization cells.\
\>", "Text",
 CellChangeTimes->{}],

Cell[BoxData[
 RowBox[{"Quit", "[", "]"}]], "Input",
 CellChangeTimes->{}],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{"AbsoluteTiming", "[", 
  RowBox[{
   RowBox[{"<<", 
    RowBox[{"(", 
     RowBox[{
      RowBox[{"NotebookDirectory", "[", "]"}], "<>", 
      "\"\<data dump of detuning scan.txt\>\""}], ")"}]}], ";"}], 
  "]"}], "\[IndentingNewLine]", 
 RowBox[{"conditions", ":=", 
  RowBox[{"Sequence", "[", 
   RowBox[{
    RowBox[{"\"\<npp\>\"", "\[Rule]", "115"}], ",", 
    RowBox[{"\"\<nRamp\>\"", "\[Rule]", "2.5"}], ",", 
    RowBox[{"\"\<nTop\>\"", "\[Rule]", "20"}]}], 
   "]"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"\[Delta]Range", "=", 
   RowBox[{"N", "@", 
    RowBox[{"Range", "[", 
     RowBox[{"0", ",", 
      RowBox[{"25", "/", "100"}], ",", 
      RowBox[{"1", "/", "1000"}]}], "]"}]}]}], ";"}]}], "Input"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "9.27863499999999952194684738060459494591`6.988084004199932", ",", "Null"}],
   "}"}]], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"biColorSpectrum", "[", 
  RowBox[{
   RowBox[{"detunedDipole", "[", "0.25", "]"}], ",", 
   RowBox[{"\"\<Axis\>\"", "\[Rule]", "\"\<HarmonicOrder\>\""}]}], 
  "]"}]], "Input",
 CellChangeTimes->{}],

Cell[BoxData[
 GraphicsBox[{{{}, 
    {RGBColor[1, 0, 0], PointSize[0.006944444444444445], AbsoluteThickness[
     1.6], LineBox[CompressedData["
1:eJw1W3c8lWscJ0UlZG9nH8dxjr3X+Z2lJCklLTLaS3sXDQ2VpHEbmkaiMtLS
8LSHlJaKStGgUESlxH3e8z7uP/fjGud9n/H9fddlxcaHTe6lpqZ2qI+aGvXv
nn86nV2XrwuzQKdup8QU9TkiEc+qDLg+2px8XSDp7vv9uraZOeotHJ22pe8F
yRJ3pwYNjZ6fR5Kdm1O3LF5rjcYsbe2w0bopeZ/cetVH04z8/F1Jd/m15n5O
Rii/+qLwd78HkpN3L9SeXqZHfr9CMvf7nF/bP+mhdYfRqWmaTySLR/+37VmZ
Efl7zyQjI7nbvKeZIYcR3MDnWpUSR4Wx6FS+Nfn7LyVvTQ7Ejlxnhl712vRW
2q9Ksjs450DxG2Pyea8lnpIZ5TcXGaH1xV8Xn+7/VvI7z0PRXmNIPv+dxDE2
0VUpMkJmZ45v1NF8LxlU6fvXzc2EPE+t5Fmm5mZfuRlq2vLq6Q3NOkmaTujx
NcUG5Pk+SG7piqfdHD4Q3ZikzVyu9VFSXHH5XEaWDnneT5JdfY0sd2dpo33+
/rOc+n6WfJ4zdeLryf3J89dLIm7/C59Q0w/NMYm/8Klvg0Tt7Y3CaWW/S+n3
+SJJGDR8YZZaP6T4dqT3wX5fJbq3Ql5l/e1H3q9R8sBt8AeYoo0s7j4ZPrJ/
k6T9fWa21Sod8r7NErcBsos1Qwci1a9rf5O42Q5IXPHMgLz/d0nBa5d1OV/N
Ua3fgbaapO+SWZH86OxxxmQ9WiS9GAdOtiQZohC7YgvfDS2SigGNi6/bG5L1
aZW8Mrz54+l/huiCcTns2dAqOeWUsGPkZSOyXj8kXfKwiC16pojT69OUlg0/
JHdYJ9V1I1lk/dokZ5ctCEgoMkEpzV1bh25sk9ydXXyfsduQrGe7ZNoflHdi
oB7qqDLFT9Qumb1SXH3TWY+s70/JrapX59IijVDcHSe8ZD8lv98o7/qamJH1
/iWZt/nGk+vfrNHDM0HdkZt+SQzHvY3Ur7Mg6/9bop8pcZ692hx5H4nlXdz0
W3I7c9aW157mZD86JE8vOK8Zvt0cZW5dEWy0uUNSbeWpWbfIgpy3P5LWccHc
GnsrpLds17z4zX8kDo6b+/W/zCD79VdyTsdE/dw/Blo2+dR/9zf/lYi3Tmo+
HWlN9q9TcuRygVbNPiv0YcTtK7zkTglz6+02ca0V2c9/klXDNDRCuq1RaEBN
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
LyD9C4CuXZutGv0FNB++B5DZdY3TR2RH+hgARzQKy/9p29P8+DHApPoKlxsx
fNLPAKgbv/6vcL4tzZdfAdw//dLDJVNA+hoABQ92sKvweVbx51r8PhuXx+Q1
c0l/A+/nYdPZG2YTPv0FYK/1YJtyd1vS5wB4037JL0RDQPPrVrx+HVNy5mvY
kX4HgPc1j0D9X3Y03/4DsK/so2eljh3pewBMX5P7LPu9gObfvaSwxtVRsm+E
Hel/SEH/dGDOuGNCmo/3l8L1pt2ruorsSR9ECrHfDqvNSbOj+bmBFLpX7THV
+Cwg/RAp/J6dfG7kYQHN1y2kwB5/5+KmJFvSF5GC95Vp4IrxXsXf2VIY7XN5
3O9xAtIfkULm3Lje00bwaT4vlEJi8OeSYTd5pE8iBUaT8xidQjua37tIwZ0x
h2H1SEj6JVIY09kyTmOmgOb7PlJYFSGcslVHQPomUhgX+d5eNtuO5v8yKdgf
nTjqoKY96Z9I4aDGlOHhh4S0Hhgihb8t6b83fbUjfRQpeIgeF9eW2NH6IEwK
6UVVNZFGQtJPkcKHmSPg80h7Wi+MkwJvSnrhtkli0leRgjLy3t5FQiGtH2Kl
YHom6c2NJAHpr0ihyiRu2sBvAlpPzJCCyWrTrrH48+g+ixRG7L/kc/48n9YX
86WwPtOudeY8Aem3SOGYYS/DIQ/taL2xXAp2Eequc4rtSN9FCje+XFZc97al
9cdaKSTrGtzXWS4k/RcplD9LOmNy0Y7WI8lSsHgXoXx6xY70YaQw4Eq9i+Uz
Ia1P0qSgmXCh7r1MRPoxUvh+tNpcf709rVf2S0E+dekuvzlC0pfBgMuLTM/j
CWn9ckwKh5YabBqTJCT9GSkEshrO+uH1VOmZXCk8cLldFr9QRPo0Ukhw7t/H
9rYdrW+K8P73n6CXJBCQfo0UmPbi5OQIAa13SqQw28XVNY7vQPo2UtgUJxKm
+4pp/XNdChxxzuBPpbakfyOFA2YK3TdFtrQeui+FgRYbBxrMsSN9HCncU4s1
Xe1sT+ujJ1IIWVHysHSaiPRzpHCh9FylF9ee1ktVUlAPacpt72VP+jpSaFoa
8ix7hz2tn2qlcHjQ8bw/T8WkvyMFl6Th01e6img99UUKpV7D93xqF5I+jxRy
Oja23vYV0vqqVQoGaUc/uoQKSb8Hr/fnji0DjexpvfVHCqyGZWxDIzvS98Hn
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
CIQnv3YuOYr393+W+h5Q
      "]]}, {}}, {{}, 
    {RGBColor[0, 0, 1], PointSize[0.006944444444444445], AbsoluteThickness[
     1.6], LineBox[CompressedData["
1:eJw1W3VcVM0aJkVAkG62d1mWXbpr3y0sPhQLRMHCIhRbsbEAUcBARRFULCxU
bJEREwwQxVawUcpEUdRvzp7h/nN/e1nPnjNn5nmfuuxx0wZP0NLQ0Nihq6FB
/Xf3f355eKUuH2yHDl9bN/a4bpFUWHp23ax/9uRzqVRv5xCexhgG0hENX7+m
5xlp63ZP3clMFvk7kr42bBu1WsxC0fO+dDL0rkiXO7c4rpjKIt+/IV07I9LH
souFjj49K/qpf0t6vXfoqVprDvn3tdJen49GWo7ioOWF6PDkHnXSIIa89baI
Ta53X/orweqMc50jco3khdXrPZA6vNdrHXnUgVz/kTTlsLLEotAOPdZKfyHT
fyJd4R+3/8o3a/J7z6QL0rdN1xZaohVlzXOOGLyQXv6tMeRfliP5/Ubpo7bm
AWdXs5DNiX2rjXq8lO7+un7Vf88cyP28ki76NjeqVGSPWtc8vne5x2vpwzNl
DXdi7Mj9vZGWfM8Nb5bbocvxhqxUvbfSTv/JGxpc7Mn9vpPuX9J364jpDLQ1
JCTJved7acXeJ85TVtmT+2+S7rSvct2bZIOmWk07867nB6n3zJ2fXMutyPN8
lH5uGHPz+E1LpGwv0inQb5ZaXRANSpltSZ6vRWo/cdi+De8tkd2NukFDDFql
H+9u6Z/bZUOet016VOfr6DWNFkj9zw3bpelt74usL/ckz/9JGuvUt/PoDiP0
Knjbt4aVn6TKedc8Xk80JevxWbpd//bjgwHm6D/nMrugVZ+l7YJNhvf+syTr
80UqviYrj+1ti85Y3oa8VV+kfd4XFMS+sCXr9VUa28Uv02NYIa7Wu4mfV32V
OvnqVg/OsSDr903aHH/JcNFDc7Su7W9W+Opv0rQ5G9M23jYn6/ldeiz6px73
ogXqfGKN7+i71GXZrNFuRrZkfTuk3ryn1Rl/LdD46+54yTqkOi/THZxiTcl6
/5AGnSuJ8Q8zRndO9PsXm/5DukmnnLt2uQFZ/5/SklKTTo0luiigaBz/bPpP
aVlsmqLq6r8K+n10SnkHOjU8s01RcdaCARYZndKpJzW6/LXMyfv5JX0aNnju
vB8mqPf8jdOnZfySFkrZla7IhLyv39KygjOWqkBTNH/C4c3VGb+lblluPxdH
mJH31yVlvS0J+ehqgd5EXivnZ3ZJPWVX1o1ssSbv84/UrqfEqWaOHRoY2vB6
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
      "]]}, {}}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{False, False},
  AxesLabel->{None, None},
  AxesOrigin->{0, 0},
  DisplayFunction->Identity,
  Frame->{{True, True}, {True, True}},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  ImageSize->800,
  Method->{},
  PlotRange->All,
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.05], 
     Scaled[0.02]}},
  Ticks->{Automatic, Automatic}]], "Output"]
}, Open  ]],

Cell[BoxData[
 RowBox[{"\[IndentingNewLine]", "\[IndentingNewLine]"}]], "Input",
 CellChangeTimes->{}],

Cell[TextData[{
 "To simplify plotting, the interpolation step is done explicitly beforehand. \
This creates two pure functions, ",
 Cell[BoxData[
  FormBox[
   RowBox[{"detuningInterpolation", "[", "1", "]"}], TraditionalForm]]],
 " and ",
 Cell[BoxData[
  FormBox[
   RowBox[{"detuningInterpolation", "[", 
    RowBox[{"-", "1"}], "]"}], TraditionalForm]]],
 ", of harmonic order and detuning (i.e. the call is of the form ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{"detuningInterpolation", "[", "\[Epsilon]", "]"}], "[", 
    RowBox[{
     RowBox[{"\[Omega]", "/", "\[Omega]1"}], ",", "\[Delta]"}], "]"}], 
   TraditionalForm]]],
 "). It is important that the interpolation be done in log scale, as \
otherwise artifacts appear easily."
}], "Text",
 CellChangeTimes->{}],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{"Remove", "[", "detuningInterpolation", "]"}], "\n", 
 RowBox[{
  RowBox[{"length", "=", 
   RowBox[{"Length", "[", 
    RowBox[{"getSpectrum", "[", 
     RowBox[{
      RowBox[{"detunedDipole", "[", "0.", "]"}], ",", 
      RowBox[{"\"\<\[Epsilon]\>\"", "\[Rule]", "1"}]}], "]"}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"AbsoluteTiming", "[", "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{"Table", "[", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{
      RowBox[{"detuningInterpolation", "[", "\[Epsilon]", "]"}], "=", 
      RowBox[{"Interpolation", "[", "\[IndentingNewLine]", 
       RowBox[{"Flatten", "[", 
        RowBox[{
         RowBox[{"Table", "[", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{
            RowBox[{"{", 
             RowBox[{
              RowBox[{
               RowBox[{"{", "\[IndentingNewLine]", 
                RowBox[{
                 RowBox[{"harmonicOrderAxis", "[", 
                  RowBox[{
                   RowBox[{"\"\<TargetLength\>\"", "\[Rule]", "length"}], ",",
                    "conditions"}], "]"}], ",", "\[IndentingNewLine]", 
                 RowBox[{"Table", "[", 
                  RowBox[{"\[Delta]", ",", 
                   RowBox[{"{", "length", "}"}]}], "]"}]}], 
                "\[IndentingNewLine]", "}"}], "\[Transpose]"}], ",", 
              "\[IndentingNewLine]", 
              RowBox[{"Log", "[", 
               RowBox[{"10", ",", 
                RowBox[{"getSpectrum", "[", 
                 RowBox[{
                  RowBox[{"detunedDipole", "[", "\[Delta]", "]"}], ",", 
                  RowBox[{"\"\<\[Epsilon]\>\"", "\[Rule]", "\[Epsilon]"}]}], 
                 "]"}]}], "]"}]}], "\[IndentingNewLine]", "}"}], 
            "\[Transpose]"}], "\[IndentingNewLine]", ",", 
           RowBox[{"{", 
            RowBox[{"\[Delta]", ",", "\[Delta]Range"}], "}"}]}], "]"}], ",", 
         "1"}], "]"}], "]"}]}], "\[IndentingNewLine]", ",", 
     RowBox[{"{", 
      RowBox[{"\[Epsilon]", ",", 
       RowBox[{"{", 
        RowBox[{"1", ",", 
         RowBox[{"-", "1"}]}], "}"}]}], "}"}]}], "]"}], ";"}], 
  "\[IndentingNewLine]", "]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"Remove", "[", "length", "]"}], ";"}], "\n", 
 RowBox[{
  RowBox[{"(*", 
   RowBox[{"(*", 
    RowBox[{"to", " ", 
     RowBox[{"test", ":"}]}], "*)"}], 
   RowBox[{"Plot", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"detuningInterpolation", "[", "1", "]"}], "[", 
      RowBox[{"HO", ",", 
       RowBox[{"\[Pi]", " ", "0.01"}]}], "]"}], ",", 
     RowBox[{"{", 
      RowBox[{"HO", ",", "0", ",", "45"}], "}"}]}], "]"}], "*)"}]}]}], "Input",
 CellChangeTimes->{}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "4.84555899999999972749264998128637671471`6.7059437992301705", ",", 
   "Null"}], "}"}]], "Output"]
}, Open  ]],

Cell[BoxData[
 RowBox[{"\[IndentingNewLine]", "\[IndentingNewLine]"}]], "Input",
 CellChangeTimes->{}],

Cell["Some plotting niceties:", "Text",
 CellChangeTimes->{}],

Cell["\<\
A linear scale legend up to a specified maximum and with a given \
ColorFunction.\
\>", "Text",
 CellChangeTimes->{}],

Cell[BoxData[{
 RowBox[{
  RowBox[{"LinearScaleLegend", "[", 
   RowBox[{"max_", ",", "colorfunction_", ",", 
    RowBox[{"OptionsPattern", "[", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"\"\<Height\>\"", "\[Rule]", "400"}], ",", 
       RowBox[{"PlotPoints", "\[Rule]", "Automatic"}], ",", 
       RowBox[{"\"\<Label\>\"", "\[Rule]", "None"}]}], "}"}], "]"}]}], "]"}], 
  ":=", 
  RowBox[{"Module", "[", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"majorTicksList", ",", "minorTicksList"}], "}"}], ",", 
    "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"majorTicksList", "=", 
      RowBox[{"FindDivisions", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"0", ",", "max"}], 
         RowBox[{"(*", 
          RowBox[{",", 
           SuperscriptBox["10", 
            RowBox[{
             RowBox[{"Floor", "[", 
              RowBox[{"Log", "[", 
               RowBox[{"10", ",", "max"}], "]"}], "]"}], "-", "0"}]]}], 
          "*)"}], "}"}], ",", "5"}], 
       RowBox[{"(*", 
        RowBox[{"Round", "[", 
         RowBox[{"max", "+", "1"}], "]"}], "*)"}], "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"minorTicksList", "=", 
      RowBox[{"Complement", "[", 
       RowBox[{
        RowBox[{"Union", "@@", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{
            RowBox[{"FindDivisions", "[", 
             RowBox[{
              RowBox[{"{", 
               RowBox[{"#1", ",", "#2"}], "}"}], ",", "5"}], "]"}], "&"}], "@@@", 
           RowBox[{"(", 
            RowBox[{
             RowBox[{"{", 
              RowBox[{"majorTicksList", ",", 
               RowBox[{
                RowBox[{
                "majorTicksList", "\[LeftDoubleBracket]", "2", 
                 "\[RightDoubleBracket]"}], "+", "majorTicksList"}]}], "}"}], 
             "\[Transpose]"}], ")"}]}], ")"}]}], ",", "majorTicksList"}], 
       "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"DensityPlot", "[", "\[IndentingNewLine]", 
      RowBox[{"y", "\[IndentingNewLine]", ",", 
       RowBox[{"{", 
        RowBox[{"x", ",", "0", ",", "1"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"y", ",", "0", ",", "max"}], "}"}], "\[IndentingNewLine]", 
       ",", 
       RowBox[{"AspectRatio", "\[Rule]", "20"}], "\[IndentingNewLine]", ",", 
       RowBox[{"PlotRangePadding", "\[Rule]", "0"}], "\[IndentingNewLine]", 
       ",", 
       RowBox[{"ImagePadding", "\[Rule]", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"1", ",", "Automatic"}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"Scaled", "[", "0.008", "]"}], ",", 
            RowBox[{"Scaled", "[", "0.008", "]"}]}], "}"}]}], "}"}]}], 
       "\[IndentingNewLine]", ",", 
       RowBox[{"ImageSize", "\[Rule]", 
        RowBox[{"{", 
         RowBox[{"Automatic", ",", 
          RowBox[{"OptionValue", "[", "\"\<Height\>\"", "]"}]}], "}"}]}], 
       "\[IndentingNewLine]", ",", 
       RowBox[{"FrameStyle", "\[Rule]", "Black"}], "\[IndentingNewLine]", ",", 
       RowBox[{"PlotPoints", "\[Rule]", 
        RowBox[{"OptionValue", "[", "PlotPoints", "]"}]}], 
       "\[IndentingNewLine]", ",", 
       RowBox[{"ColorFunction", "\[Rule]", "colorfunction"}], 
       "\[IndentingNewLine]", ",", 
       RowBox[{"FrameTicks", "\[Rule]", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"None", ",", 
            RowBox[{"Join", "[", "\[IndentingNewLine]", 
             RowBox[{
              RowBox[{"(", 
               RowBox[{
                RowBox[{
                 RowBox[{"{", 
                  RowBox[{"#", ",", 
                   RowBox[{"N", "[", "#", "]"}], 
                   RowBox[{"(*", 
                    RowBox[{"ScientificForm", "[", 
                    RowBox[{
                    RowBox[{"N", "[", "#", "]"}], ",", "1"}], "]"}], "*)"}], 
                   ",", 
                   RowBox[{"{", 
                    RowBox[{"0.3", ",", "0."}], "}"}], ",", 
                   RowBox[{"{", 
                    RowBox[{
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    RowBox[{
                    GraphicsBox[{
                    {GrayLevel[0], RectangleBox[{0, 0}]}, 
                    {GrayLevel[0], RectangleBox[{1, -1}]}, 
                    {GrayLevel[0.], 
                    StyleBox[RectangleBox[{0, -1}, {2, 1}],
                    FontColor->GrayLevel[0.]]}},
                    AspectRatio->1,
                    Frame->True,
                    FrameStyle->GrayLevel[0.],
                    FrameTicks->None,
                    
                    ImageSize->
                    Dynamic[{
                    Automatic, 
                    1.35 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}],
                    PlotRangePadding->None], "\[InvisibleSpace]"}],
                    "GrayLevel[0.]"],
                    Appearance->None,
                    BaseStyle->{},
                    BaselinePosition->Baseline,
                    ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]],
                    DefaultBaseStyle->{},
                    Evaluator->Automatic,
                    Method->"Preemptive"],
                    GrayLevel[0.],
                    Editable->False,
                    Selectable->False], ",", 
                    RowBox[{"AbsoluteThickness", "[", "0.25", "]"}]}], 
                    "}"}]}], "}"}], "&"}], "/@", "majorTicksList"}], ")"}], 
              ",", "\[IndentingNewLine]", 
              RowBox[{"(", 
               RowBox[{
                RowBox[{
                 RowBox[{"{", 
                  RowBox[{"#", ",", "\"\<\>\"", ",", 
                   RowBox[{"{", 
                    RowBox[{"0.15", ",", "0."}], "}"}], ",", 
                   RowBox[{"{", 
                    RowBox[{
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    RowBox[{
                    GraphicsBox[{
                    {GrayLevel[0], RectangleBox[{0, 0}]}, 
                    {GrayLevel[0], RectangleBox[{1, -1}]}, 
                    {GrayLevel[0.], 
                    StyleBox[RectangleBox[{0, -1}, {2, 1}],
                    FontColor->GrayLevel[0.]]}},
                    AspectRatio->1,
                    Frame->True,
                    FrameStyle->GrayLevel[0.],
                    FrameTicks->None,
                    
                    ImageSize->
                    Dynamic[{
                    Automatic, 
                    1.35 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}],
                    PlotRangePadding->None], "\[InvisibleSpace]"}],
                    "GrayLevel[0.]"],
                    Appearance->None,
                    BaseStyle->{},
                    BaselinePosition->Baseline,
                    ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]],
                    DefaultBaseStyle->{},
                    Evaluator->Automatic,
                    Method->"Preemptive"],
                    GrayLevel[0.],
                    Editable->False,
                    Selectable->False], ",", 
                    RowBox[{"AbsoluteThickness", "[", "0.125", "]"}]}], 
                    "}"}]}], "}"}], "&"}], "/@", "minorTicksList"}], ")"}]}], 
             "\[IndentingNewLine]", "]"}]}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{"None", ",", "None"}], "}"}]}], "}"}]}], 
       "\[IndentingNewLine]", ",", 
       RowBox[{"FrameLabel", "\[Rule]", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"None", ",", 
            RowBox[{"OptionValue", "[", "\"\<Label\>\"", "]"}]}], "}"}], ",", 
          
          RowBox[{"{", 
           RowBox[{"None", ",", "None"}], "}"}]}], "}"}]}]}], 
      "\[IndentingNewLine]", "]"}]}]}], "\[IndentingNewLine]", 
   "]"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"(*", 
   RowBox[{"(*", 
    RowBox[{"to", " ", 
     RowBox[{"test", ":"}]}], "*)"}], 
   RowBox[{"LinearScaleLegend", "[", 
    RowBox[{"10", ",", 
     RowBox[{"ColorData", "[", "\"\<WhiteJet\>\"", "]"}], ",", 
     RowBox[{"\"\<Height\>\"", "\[Rule]", "475"}], ",", 
     RowBox[{"\"\<Label\>\"", "\[Rule]", "\"\<Plot Label\>\""}]}], "]"}], 
   "*)"}]}]}], "Input",
 CellChangeTimes->{}],

Cell[BoxData[""], "Input",
 CellChangeTimes->{}],

Cell["\<\
A nice colour map, which prints well on black and white.
(Taken from doi:10.1109/MAP.2002.1028735.)\
\>", "Text",
 CellChangeTimes->{}],

Cell[BoxData[{
 RowBox[{
  RowBox[{"CMRmap", "=", 
   RowBox[{"Function", "[", 
    RowBox[{"x", ",", 
     RowBox[{"Blend", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
         InterpretationBox[
          ButtonBox[
           TooltipBox[
            RowBox[{
             GraphicsBox[{
               {GrayLevel[0], RectangleBox[{0, 0}]}, 
               {GrayLevel[0], RectangleBox[{1, -1}]}, 
               {RGBColor[0., 0., 0.], RectangleBox[{0, -1}, {2, 1}]}},
              AspectRatio->1,
              Frame->True,
              FrameStyle->RGBColor[0., 0., 0.],
              FrameTicks->None,
              
              ImageSize->
               Dynamic[{
                Automatic, 
                 1.35 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                  Magnification])}],
              PlotRangePadding->None], "\[InvisibleSpace]"}],
            "RGBColor[{0., 0., 0.}]"],
           Appearance->None,
           BaseStyle->{},
           BaselinePosition->Baseline,
           ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
             If[
              Not[
               AbsoluteCurrentValue["Deployed"]], 
              SelectionMove[Typeset`box$, All, Expression]; 
              FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
              FrontEnd`Private`$ColorSelectorInitialColor = 
               RGBColor[0., 0., 0.]; 
              FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
              MathLink`CallFrontEnd[
                FrontEnd`AttachCell[Typeset`box$, 
                 FrontEndResource["RGBColorValueSelector"], {
                 0, {Left, Bottom}}, {Left, Top}, 
                 "ClosingActions" -> {
                  "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
           
           DefaultBaseStyle->{},
           Evaluator->Automatic,
           Method->"Preemptive"],
          RGBColor[{0., 0., 0.}],
          Editable->False,
          Selectable->False], ",", 
         InterpretationBox[
          ButtonBox[
           TooltipBox[
            RowBox[{
             GraphicsBox[{
               {GrayLevel[0], RectangleBox[{0, 0}]}, 
               {GrayLevel[0], RectangleBox[{1, -1}]}, 
               {RGBColor[0.15, 0.15, 0.5], RectangleBox[{0, -1}, {2, 1}]}},
              AspectRatio->1,
              Frame->True,
              FrameStyle->RGBColor[0.1, 0.1, 0.33333333333333337`],
              FrameTicks->None,
              
              ImageSize->
               Dynamic[{
                Automatic, 
                 1.35 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                  Magnification])}],
              PlotRangePadding->None], "\[InvisibleSpace]"}],
            "RGBColor[{0.15, 0.15, 0.5}]"],
           Appearance->None,
           BaseStyle->{},
           BaselinePosition->Baseline,
           ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
             If[
              Not[
               AbsoluteCurrentValue["Deployed"]], 
              SelectionMove[Typeset`box$, All, Expression]; 
              FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
              FrontEnd`Private`$ColorSelectorInitialColor = 
               RGBColor[0.15, 0.15, 0.5]; 
              FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
              MathLink`CallFrontEnd[
                FrontEnd`AttachCell[Typeset`box$, 
                 FrontEndResource["RGBColorValueSelector"], {
                 0, {Left, Bottom}}, {Left, Top}, 
                 "ClosingActions" -> {
                  "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
           
           DefaultBaseStyle->{},
           Evaluator->Automatic,
           Method->"Preemptive"],
          RGBColor[{0.15, 0.15, 0.5}],
          Editable->False,
          Selectable->False], ",", 
         InterpretationBox[
          ButtonBox[
           TooltipBox[
            RowBox[{
             GraphicsBox[{
               {GrayLevel[0], RectangleBox[{0, 0}]}, 
               {GrayLevel[0], RectangleBox[{1, -1}]}, 
               {RGBColor[0.3, 0.15, 0.75], RectangleBox[{0, -1}, {2, 1}]}},
              AspectRatio->1,
              Frame->True,
              FrameStyle->RGBColor[0.2, 0.1, 0.5],
              FrameTicks->None,
              ImageSize->
               Dynamic[{
                Automatic, 
                 1.35 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                  Magnification])}],
              PlotRangePadding->None], "\[InvisibleSpace]"}],
            "RGBColor[{0.3, 0.15, 0.75}]"],
           Appearance->None,
           BaseStyle->{},
           BaselinePosition->Baseline,
           ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
             If[
              Not[
               AbsoluteCurrentValue["Deployed"]], 
              SelectionMove[Typeset`box$, All, Expression]; 
              FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
              FrontEnd`Private`$ColorSelectorInitialColor = 
               RGBColor[0.3, 0.15, 0.75]; 
              FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
              MathLink`CallFrontEnd[
                FrontEnd`AttachCell[Typeset`box$, 
                 FrontEndResource["RGBColorValueSelector"], {
                 0, {Left, Bottom}}, {Left, Top}, 
                 "ClosingActions" -> {
                  "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
           
           DefaultBaseStyle->{},
           Evaluator->Automatic,
           Method->"Preemptive"],
          RGBColor[{0.3, 0.15, 0.75}],
          Editable->False,
          Selectable->False], ",", 
         InterpretationBox[
          ButtonBox[
           TooltipBox[
            RowBox[{
             GraphicsBox[{
               {GrayLevel[0], RectangleBox[{0, 0}]}, 
               {GrayLevel[0], RectangleBox[{1, -1}]}, 
               {RGBColor[0.6, 0.2, 0.5], RectangleBox[{0, -1}, {2, 1}]}},
              AspectRatio->1,
              Frame->True,
              
              FrameStyle->RGBColor[
               0.4, 0.13333333333333336`, 0.33333333333333337`],
              FrameTicks->None,
              
              ImageSize->
               Dynamic[{
                Automatic, 
                 1.35 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                  Magnification])}],
              PlotRangePadding->None], "\[InvisibleSpace]"}],
            "RGBColor[{0.6, 0.2, 0.5}]"],
           Appearance->None,
           BaseStyle->{},
           BaselinePosition->Baseline,
           ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
             If[
              Not[
               AbsoluteCurrentValue["Deployed"]], 
              SelectionMove[Typeset`box$, All, Expression]; 
              FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
              FrontEnd`Private`$ColorSelectorInitialColor = 
               RGBColor[0.6, 0.2, 0.5]; 
              FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
              MathLink`CallFrontEnd[
                FrontEnd`AttachCell[Typeset`box$, 
                 FrontEndResource["RGBColorValueSelector"], {
                 0, {Left, Bottom}}, {Left, Top}, 
                 "ClosingActions" -> {
                  "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
           
           DefaultBaseStyle->{},
           Evaluator->Automatic,
           Method->"Preemptive"],
          RGBColor[{0.6, 0.2, 0.5}],
          Editable->False,
          Selectable->False], ",", 
         InterpretationBox[
          ButtonBox[
           TooltipBox[
            RowBox[{
             GraphicsBox[{
               {GrayLevel[0], RectangleBox[{0, 0}]}, 
               {GrayLevel[0], RectangleBox[{1, -1}]}, 
               {RGBColor[1., 0.25, 0.15], RectangleBox[{0, -1}, {2, 1}]}},
              AspectRatio->1,
              Frame->True,
              
              FrameStyle->RGBColor[
               0.6666666666666667, 0.16666666666666669`, 0.1],
              FrameTicks->None,
              
              ImageSize->
               Dynamic[{
                Automatic, 
                 1.35 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                  Magnification])}],
              PlotRangePadding->None], "\[InvisibleSpace]"}],
            "RGBColor[{1., 0.25, 0.15}]"],
           Appearance->None,
           BaseStyle->{},
           BaselinePosition->Baseline,
           ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
             If[
              Not[
               AbsoluteCurrentValue["Deployed"]], 
              SelectionMove[Typeset`box$, All, Expression]; 
              FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
              FrontEnd`Private`$ColorSelectorInitialColor = 
               RGBColor[1., 0.25, 0.15]; 
              FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
              MathLink`CallFrontEnd[
                FrontEnd`AttachCell[Typeset`box$, 
                 FrontEndResource["RGBColorValueSelector"], {
                 0, {Left, Bottom}}, {Left, Top}, 
                 "ClosingActions" -> {
                  "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
           
           DefaultBaseStyle->{},
           Evaluator->Automatic,
           Method->"Preemptive"],
          RGBColor[{1., 0.25, 0.15}],
          Editable->False,
          Selectable->False], ",", 
         InterpretationBox[
          ButtonBox[
           TooltipBox[
            RowBox[{
             GraphicsBox[{
               {GrayLevel[0], RectangleBox[{0, 0}]}, 
               {GrayLevel[0], RectangleBox[{1, -1}]}, 
               {RGBColor[0.9, 0.5, 0.], RectangleBox[{0, -1}, {2, 1}]}},
              AspectRatio->1,
              Frame->True,
              
              FrameStyle->RGBColor[
               0.6000000000000001, 0.33333333333333337`, 0.],
              FrameTicks->None,
              
              ImageSize->
               Dynamic[{
                Automatic, 
                 1.35 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                  Magnification])}],
              PlotRangePadding->None], "\[InvisibleSpace]"}],
            "RGBColor[{0.9, 0.5, 0.}]"],
           Appearance->None,
           BaseStyle->{},
           BaselinePosition->Baseline,
           ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
             If[
              Not[
               AbsoluteCurrentValue["Deployed"]], 
              SelectionMove[Typeset`box$, All, Expression]; 
              FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
              FrontEnd`Private`$ColorSelectorInitialColor = 
               RGBColor[0.9, 0.5, 0.]; 
              FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
              MathLink`CallFrontEnd[
                FrontEnd`AttachCell[Typeset`box$, 
                 FrontEndResource["RGBColorValueSelector"], {
                 0, {Left, Bottom}}, {Left, Top}, 
                 "ClosingActions" -> {
                  "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
           
           DefaultBaseStyle->{},
           Evaluator->Automatic,
           Method->"Preemptive"],
          RGBColor[{0.9, 0.5, 0.}],
          Editable->False,
          Selectable->False], ",", 
         InterpretationBox[
          ButtonBox[
           TooltipBox[
            RowBox[{
             GraphicsBox[{
               {GrayLevel[0], RectangleBox[{0, 0}]}, 
               {GrayLevel[0], RectangleBox[{1, -1}]}, 
               {RGBColor[0.9, 0.75, 0.1], RectangleBox[{0, -1}, {2, 1}]}},
              AspectRatio->1,
              Frame->True,
              
              FrameStyle->RGBColor[
               0.6000000000000001, 0.5, 0.06666666666666668],
              FrameTicks->None,
              
              ImageSize->
               Dynamic[{
                Automatic, 
                 1.35 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                  Magnification])}],
              PlotRangePadding->None], "\[InvisibleSpace]"}],
            "RGBColor[{0.9, 0.75, 0.1}]"],
           Appearance->None,
           BaseStyle->{},
           BaselinePosition->Baseline,
           ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
             If[
              Not[
               AbsoluteCurrentValue["Deployed"]], 
              SelectionMove[Typeset`box$, All, Expression]; 
              FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
              FrontEnd`Private`$ColorSelectorInitialColor = 
               RGBColor[0.9, 0.75, 0.1]; 
              FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
              MathLink`CallFrontEnd[
                FrontEnd`AttachCell[Typeset`box$, 
                 FrontEndResource["RGBColorValueSelector"], {
                 0, {Left, Bottom}}, {Left, Top}, 
                 "ClosingActions" -> {
                  "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
           
           DefaultBaseStyle->{},
           Evaluator->Automatic,
           Method->"Preemptive"],
          RGBColor[{0.9, 0.75, 0.1}],
          Editable->False,
          Selectable->False], ",", 
         InterpretationBox[
          ButtonBox[
           TooltipBox[
            RowBox[{
             GraphicsBox[{
               {GrayLevel[0], RectangleBox[{0, 0}]}, 
               {GrayLevel[0], RectangleBox[{1, -1}]}, 
               {RGBColor[0.9, 0.9, 0.5], RectangleBox[{0, -1}, {2, 1}]}},
              AspectRatio->1,
              Frame->True,
              
              FrameStyle->RGBColor[
               0.6000000000000001, 0.6000000000000001, 0.33333333333333337`],
              FrameTicks->None,
              
              ImageSize->
               Dynamic[{
                Automatic, 
                 1.35 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                  Magnification])}],
              PlotRangePadding->None], "\[InvisibleSpace]"}],
            "RGBColor[{0.9, 0.9, 0.5}]"],
           Appearance->None,
           BaseStyle->{},
           BaselinePosition->Baseline,
           ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
             If[
              Not[
               AbsoluteCurrentValue["Deployed"]], 
              SelectionMove[Typeset`box$, All, Expression]; 
              FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
              FrontEnd`Private`$ColorSelectorInitialColor = 
               RGBColor[0.9, 0.9, 0.5]; 
              FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
              MathLink`CallFrontEnd[
                FrontEnd`AttachCell[Typeset`box$, 
                 FrontEndResource["RGBColorValueSelector"], {
                 0, {Left, Bottom}}, {Left, Top}, 
                 "ClosingActions" -> {
                  "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
           
           DefaultBaseStyle->{},
           Evaluator->Automatic,
           Method->"Preemptive"],
          RGBColor[{0.9, 0.9, 0.5}],
          Editable->False,
          Selectable->False], ",", 
         InterpretationBox[
          ButtonBox[
           TooltipBox[
            RowBox[{
             GraphicsBox[{
               {GrayLevel[0], RectangleBox[{0, 0}]}, 
               {GrayLevel[0], RectangleBox[{1, -1}]}, 
               {RGBColor[1., 1., 1.], RectangleBox[{0, -1}, {2, 1}]}},
              AspectRatio->1,
              Frame->True,
              
              FrameStyle->RGBColor[
               0.6666666666666667, 0.6666666666666667, 0.6666666666666667],
              FrameTicks->None,
              
              ImageSize->
               Dynamic[{
                Automatic, 
                 1.35 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                  Magnification])}],
              PlotRangePadding->None], "\[InvisibleSpace]"}],
            "RGBColor[{1., 1., 1.}]"],
           Appearance->None,
           BaseStyle->{},
           BaselinePosition->Baseline,
           ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
             If[
              Not[
               AbsoluteCurrentValue["Deployed"]], 
              SelectionMove[Typeset`box$, All, Expression]; 
              FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
              FrontEnd`Private`$ColorSelectorInitialColor = 
               RGBColor[1., 1., 1.]; 
              FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
              MathLink`CallFrontEnd[
                FrontEnd`AttachCell[Typeset`box$, 
                 FrontEndResource["RGBColorValueSelector"], {
                 0, {Left, Bottom}}, {Left, Top}, 
                 "ClosingActions" -> {
                  "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
           
           DefaultBaseStyle->{},
           Evaluator->Automatic,
           Method->"Preemptive"],
          RGBColor[{1., 1., 1.}],
          Editable->False,
          Selectable->False]}], "}"}], ",", "x"}], "]"}]}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"CMRwithMin", "[", 
   RowBox[{"minIn_", ",", 
    RowBox[{"minOut_:", 
     RowBox[{"1.", "/", "9"}]}]}], "]"}], ":=", 
  RowBox[{"Function", "[", 
   RowBox[{"x", ",", 
    RowBox[{"CMRmap", "[", 
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{"x", "<", "minIn"}], ",", 
       RowBox[{
        FractionBox["minOut", "minIn"], "x"}], ",", 
       RowBox[{"minOut", "+", 
        RowBox[{
         RowBox[{"(", 
          RowBox[{"1", "-", "minOut"}], ")"}], 
         FractionBox[
          RowBox[{"x", "-", "minIn"}], 
          RowBox[{"1", "-", "minIn"}]]}]}]}], "]"}], "]"}]}], 
   "]"}]}]}], "Input",
 CellChangeTimes->{}],

Cell[BoxData["\[IndentingNewLine]"], "Input",
 CellChangeTimes->{}],

Cell[BoxData[{
 RowBox[{
  RowBox[{"min", "=", 
   RowBox[{"6.", " ", 
    SuperscriptBox["10", 
     RowBox[{"-", "9"}]]}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"max", "=", 
   RowBox[{"5.", " ", 
    SuperscriptBox["10", 
     RowBox[{"-", "7"}]]}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"colorfunction", "=", 
   RowBox[{"CMRwithMin", "[", 
    RowBox[{"min", "/", "max"}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"HOTicks", "[", "\[Epsilon]_", "]"}], ":=", 
  RowBox[{
   RowBox[{"(", 
    RowBox[{
     RowBox[{
      RowBox[{"{", 
       RowBox[{"#", ",", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{"\[Epsilon]", "\[Equal]", "1"}], ",", 
          RowBox[{"Style", "[", 
           RowBox[{"#", ",", "Black"}], "]"}], ",", "\"\<\>\""}], "]"}], ",", 
        
        RowBox[{"{", 
         RowBox[{"0.02", ",", "0"}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"Thickness", "[", "0.005", "]"}], ",", "Gray"}], "}"}]}], 
       "}"}], "&"}], "/@", 
     RowBox[{"Range", "[", 
      RowBox[{"12", ",", "18", ",", "1"}], "]"}]}], ")"}], "~", "Join", "~", 
   RowBox[{"(", 
    RowBox[{
     RowBox[{
      RowBox[{"{", 
       RowBox[{"#", ",", "\"\<\>\"", ",", 
        RowBox[{"{", 
         RowBox[{"0.01", ",", "0"}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"Thickness", "[", "0.004", "]"}], ",", "Gray"}], "}"}]}], 
       "}"}], "&"}], "/@", 
     RowBox[{"Range", "[", 
      RowBox[{
       RowBox[{"11", "+", 
        FractionBox["1", "2"]}], ",", 
       RowBox[{"18", "+", 
        FractionBox["1", "4"]}], ",", 
       RowBox[{"1", "/", "4"}]}], "]"}]}], ")"}]}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"downTicks", "=", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"0", ",", 
        RowBox[{"Style", "[", 
         RowBox[{"0", ",", "Black"}], "]"}], ",", "0"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"0.25", ",", 
        RowBox[{"Style", "[", 
         RowBox[{"0.25", ",", "Black"}], "]"}], ",", "0"}], "}"}]}], "}"}], 
    "~", "Join", "~", 
    RowBox[{"(", 
     RowBox[{
      RowBox[{
       RowBox[{"{", 
        RowBox[{"#", ",", 
         RowBox[{"Style", "[", 
          RowBox[{"#", ",", "Black"}], "]"}], ",", 
         RowBox[{"{", 
          RowBox[{"0.015", ",", "0"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"Thickness", "[", "0.005", "]"}], ",", "Gray"}], "}"}]}], 
        "}"}], "&"}], "/@", 
      RowBox[{"Range", "[", 
       RowBox[{"0.05", ",", "0.20", ",", "0.05"}], "]"}]}], ")"}], "~", 
    "Join", "~", 
    RowBox[{"(", 
     RowBox[{
      RowBox[{
       RowBox[{"{", 
        RowBox[{"#", ",", "\"\<\>\"", ",", 
         RowBox[{"{", 
          RowBox[{"0.01", ",", "0"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"Thickness", "[", "0.004", "]"}], ",", "Gray"}], "}"}]}], 
        "}"}], "&"}], "/@", 
      RowBox[{"Range", "[", 
       RowBox[{"0.01", ",", "0.24", ",", "0.01"}], "]"}]}], ")"}]}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"upTicks", "=", 
   RowBox[{
    RowBox[{"(", 
     RowBox[{
      RowBox[{
       RowBox[{"{", 
        RowBox[{"#", ",", "\"\<\>\"", ",", 
         RowBox[{"{", 
          RowBox[{"0.015", ",", "0"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"Thickness", "[", "0.005", "]"}], ",", "Gray"}], "}"}]}], 
        "}"}], "&"}], "/@", 
      RowBox[{"Range", "[", 
       RowBox[{"0.05", ",", "0.20", ",", "0.05"}], "]"}]}], ")"}], "~", 
    "Join", "~", 
    RowBox[{"(", 
     RowBox[{
      RowBox[{
       RowBox[{"{", 
        RowBox[{"#", ",", "\"\<\>\"", ",", 
         RowBox[{"{", 
          RowBox[{"0.01", ",", "0"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"Thickness", "[", "0.004", "]"}], ",", "Gray"}], "}"}]}], 
        "}"}], "&"}], "/@", 
      RowBox[{"Range", "[", 
       RowBox[{"0.01", ",", "0.24", ",", "0.01"}], "]"}]}], ")"}]}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"Column", "@", 
  RowBox[{"AbsoluteTiming", "@", 
   RowBox[{"Row", "[", 
    RowBox[{
     RowBox[{"Table", "[", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{
        RowBox[{"splittingsScan", "[", "\[Epsilon]", "]"}], "=", 
        RowBox[{"RegionPlot", "[", "\[IndentingNewLine]", 
         RowBox[{"True", "\[IndentingNewLine]", ",", 
          RowBox[{"{", 
           RowBox[{"\[Delta]", ",", "0", ",", "0.25"}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{"HO", ",", "11.25", ",", "18.5"}], "}"}], 
          "\[IndentingNewLine]", ",", 
          RowBox[{"AspectRatio", "\[Rule]", "1.2"}], "\[IndentingNewLine]", 
          ",", 
          RowBox[{"PlotRangePadding", "\[Rule]", "None"}], 
          "\[IndentingNewLine]", ",", 
          RowBox[{"ImagePadding", "\[Rule]", 
           RowBox[{"1", 
            RowBox[{"{", 
             RowBox[{
              RowBox[{"{", 
               RowBox[{
                RowBox[{"35", "+", 
                 RowBox[{"15", "\[Epsilon]"}]}], ",", "20"}], "}"}], ",", 
              RowBox[{"{", 
               RowBox[{"70", ",", "6"}], "}"}]}], "}"}]}]}], 
          "\[IndentingNewLine]", ",", 
          RowBox[{"ImageSize", "\[Rule]", 
           RowBox[{"{", 
            RowBox[{"Automatic", ",", "550"}], "}"}]}], "\[IndentingNewLine]",
           ",", 
          RowBox[{"PlotPoints", "\[Rule]", "600"}], "\[IndentingNewLine]", 
          ",", 
          RowBox[{"FrameStyle", "\[Rule]", "Automatic"}], 
          "\[IndentingNewLine]", ",", 
          RowBox[{"FrameLabel", "\[Rule]", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"Style", "[", 
              RowBox[{
              "\"\<\!\(\*FractionBox[\(\[Omega]'\), \(\[Omega]\)]\)-1\>\"", 
               ",", "Black", ",", "12"}], "]"}], ",", 
             RowBox[{"If", "[", 
              RowBox[{
               RowBox[{"\[Epsilon]", "\[Equal]", "1"}], ",", 
               RowBox[{"Style", "[", 
                RowBox[{"\"\<Harmonic Order\>\"", ",", "Black", ",", "16"}], 
                "]"}], ",", "\"\<\>\""}], "]"}]}], "}"}]}], 
          "\[IndentingNewLine]", ",", 
          RowBox[{"ColorFunctionScaling", "\[Rule]", "False"}], 
          "\[IndentingNewLine]", ",", 
          RowBox[{"FrameTicks", "\[Rule]", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"{", 
              RowBox[{
               RowBox[{"HOTicks", "[", "1", "]"}], ",", 
               RowBox[{"HOTicks", "[", 
                RowBox[{"-", "1"}], "]"}]}], "}"}], ",", 
             RowBox[{"{", 
              RowBox[{"downTicks", ",", "upTicks"}], "}"}]}], "}"}]}], 
          "\[IndentingNewLine]", ",", 
          RowBox[{"ColorFunction", "\[Rule]", 
           RowBox[{"Function", "[", 
            RowBox[{
             RowBox[{"{", 
              RowBox[{"\[Delta]", ",", "HO"}], "}"}], ",", 
             RowBox[{"colorfunction", "[", 
              FractionBox[
               RowBox[{"10", "^", 
                RowBox[{
                 RowBox[{"detuningInterpolation", "[", "\[Epsilon]", "]"}], 
                 "[", 
                 RowBox[{"HO", ",", "\[Delta]"}], "]"}]}], "max"], "]"}]}], 
            "]"}]}]}], "\[IndentingNewLine]", 
         RowBox[{"(*", 
          RowBox[{",", 
           RowBox[{"PlotLabel", "\[Rule]", 
            RowBox[{"Style", "[", 
             RowBox[{
              RowBox[{"StringJoin", "[", 
               RowBox[{
                RowBox[{"\[Epsilon]", "/.", 
                 RowBox[{"{", 
                  RowBox[{
                   RowBox[{"1", "\[Rule]", "\"\<Right\>\""}], ",", 
                   RowBox[{
                    RowBox[{"-", "1"}], "\[Rule]", "\"\<Left\>\""}]}], 
                  "}"}]}], ",", "\"\<-circular harmonics\>\""}], "]"}], ",", 
              "Black", ",", "16"}], "]"}]}]}], "*)"}], "\[IndentingNewLine]", 
         "]"}]}], "\[IndentingNewLine]", ",", 
       RowBox[{"{", 
        RowBox[{"\[Epsilon]", ",", 
         RowBox[{"{", 
          RowBox[{"1", ",", 
           RowBox[{"-", "1"}]}], "}"}]}], "}"}]}], "]"}], "~", "Join", "~", 
     RowBox[{"{", 
      RowBox[{"\"\<  \>\"", ",", "\[IndentingNewLine]", 
       RowBox[{"LinearScaleLegend", "[", 
        RowBox[{"max", ",", "colorfunction", ",", 
         RowBox[{"\"\<Height\>\"", "\[Rule]", "475"}]}], "]"}]}], 
      "\[IndentingNewLine]", "}"}]}], "\[IndentingNewLine]", 
    "]"}]}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"(*", 
   RowBox[{"(*", 
    RowBox[{
     RowBox[{
      RowBox[{
      "Test", " ", "that", " ", "it", " ", "prints", " ", "well", " ", "in", 
       " ", "B"}], "&"}], 
     RowBox[{"W", ":"}]}], "*)"}], "\[IndentingNewLine]", 
   RowBox[{"Row", "[", 
    RowBox[{"Table", "[", 
     RowBox[{
      RowBox[{"Show", "[", 
       RowBox[{
        RowBox[{"ColorConvert", "[", 
         RowBox[{
          RowBox[{"%", "\[LeftDoubleBracket]", 
           RowBox[{"1", ",", "2", ",", "1", ",", "j"}], 
           "\[RightDoubleBracket]"}], ",", "\"\<Grayscale\>\""}], "]"}], ",", 
        
        RowBox[{"ImageSize", "\[Rule]", 
         RowBox[{"{", 
          RowBox[{"Automatic", ",", 
           RowBox[{"j", "/.", 
            RowBox[{"{", 
             RowBox[{
              RowBox[{"1", "\[Rule]", "550"}], ",", 
              RowBox[{"2", "\[Rule]", "550"}], ",", 
              RowBox[{"4", "\[Rule]", "475"}]}], "}"}]}]}], "}"}]}]}], "]"}], 
      ",", 
      RowBox[{"{", 
       RowBox[{"j", ",", 
        RowBox[{"{", 
         RowBox[{"1", ",", "2", ",", "4"}], "}"}]}], "}"}]}], "]"}], "]"}], 
   "*)"}]}]}], "Input",
 CellChangeTimes->{}],

Cell["The image has been omitted to keep the file size small.", "Text"],

Cell[BoxData[
 RowBox[{"\[IndentingNewLine]", "\[IndentingNewLine]"}]], "Input"],

Cell["\<\
This makes the overlays with the channel labels. They can be made to include \
the actual lines predicted by uncommenting the first few lines. The exporting \
process changes the offsets in weird ways but they come out OK in the pdf as \
they are here.\
\>", "Text",
 CellChangeTimes->{}],

Cell[BoxData[{
 RowBox[{
  RowBox[{"channelLine", "[", 
   RowBox[{"np_", ",", "nm_", ",", "n2_", ",", 
    RowBox[{"OptionsPattern", "[", 
     RowBox[{"offset", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{"0", ",", "0"}], "}"}]}], "]"}]}], "]"}], ":=", 
  RowBox[{"Show", "[", "\[IndentingNewLine]", 
   RowBox[{"(*", 
    RowBox[{
     RowBox[{"Graphics", "[", 
      RowBox[{"{", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"Thickness", "[", "0.001", "]"}], ",", "Black", 
        "\[IndentingNewLine]", ",", 
        RowBox[{"Line", "[", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"0", ",", 
             RowBox[{"np", "+", "nm", "+", 
              RowBox[{"1.95", "n2"}]}]}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"0.25", ",", 
             RowBox[{"np", "+", 
              RowBox[{"1.25", "nm"}], "+", 
              RowBox[{"1.95", "n2"}]}]}], "}"}]}], "}"}], "]"}]}], 
       "\[IndentingNewLine]", "}"}], "]"}], ","}], "*)"}], 
   "\[IndentingNewLine]", 
   RowBox[{"Graphics", "[", 
    RowBox[{"{", 
     RowBox[{"Text", "[", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"Style", "[", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"\"\<(\>\"", "<>", 
          RowBox[{"ToString", "[", "np", "]"}], "<>", "\"\<,\>\"", "<>", 
          RowBox[{"ToString", "[", "nm", "]"}], "<>", "\"\<;\>\"", "<>", 
          RowBox[{"ToString", "[", "n2", "]"}], "<>", "\"\<)\>\""}], 
         "\[IndentingNewLine]", ",", "14", ",", "White"}], "]"}], 
       "\[IndentingNewLine]", ",", 
       RowBox[{"{", 
        RowBox[{"0.125", ",", 
         RowBox[{"np", "+", 
          RowBox[{"1.125", "nm"}], "+", 
          RowBox[{"1.95", "n2"}], "+", "0.1"}]}], "}"}], ",", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"1.35", ",", "1"}], "}"}], 
        RowBox[{"OptionValue", "[", "offset", "]"}]}], ",", 
       RowBox[{"{", 
        RowBox[{"1", ",", 
         RowBox[{"0.05", "nm"}]}], "}"}]}], "\[IndentingNewLine]", "]"}], 
     "}"}], "]"}], "\[IndentingNewLine]", "]"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"channelsList", "[", "1", "]"}], "=", 
   RowBox[{"{", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"7", ",", "1", ",", "5", ",", 
       RowBox[{"offset", "\[Rule]", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"-", "5.75"}], ",", 
          RowBox[{"-", "0.8"}]}], "}"}]}]}], "}"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"{", 
      RowBox[{"6", ",", 
       RowBox[{"-", "2"}], ",", "7", ",", 
       RowBox[{"offset", "\[Rule]", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"-", "2.5"}], ",", 
          RowBox[{"-", "0.5"}]}], "}"}]}]}], "}"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"{", 
      RowBox[{"8", ",", "5", ",", "2", ",", 
       RowBox[{"offset", "\[Rule]", 
        RowBox[{"{", 
         RowBox[{"5.75", ",", 
          RowBox[{"-", "1.5"}]}], "}"}]}]}], "}"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"{", 
      RowBox[{"7", ",", "2", ",", "4", ",", 
       RowBox[{"offset", "\[Rule]", 
        RowBox[{"{", 
         RowBox[{"1.0", ",", 
          RowBox[{"-", "0.5"}]}], "}"}]}]}], "}"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"{", 
      RowBox[{"6", ",", 
       RowBox[{"-", "1"}], ",", "6", ",", 
       RowBox[{"offset", "\[Rule]", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"-", "4.75"}], ",", 
          RowBox[{"-", "0.8"}]}], "}"}]}]}], "}"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"{", 
      RowBox[{"6", ",", "0", ",", "5", ",", 
       RowBox[{"offset", "\[Rule]", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"-", "5.5"}], ",", 
          RowBox[{"-", "0.8"}]}], "}"}]}]}], "}"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"{", 
      RowBox[{"7", ",", "3", ",", "3", ",", 
       RowBox[{"offset", "\[Rule]", 
        RowBox[{"{", 
         RowBox[{"5.75", ",", 
          RowBox[{"-", "0.8"}]}], "}"}]}]}], "}"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"{", 
      RowBox[{"7", ",", "4", ",", "2", ",", 
       RowBox[{"offset", "\[Rule]", 
        RowBox[{"{", 
         RowBox[{"5.75", ",", 
          RowBox[{"-", "1."}]}], "}"}]}]}], "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{"{", 
      RowBox[{"5", ",", 
       RowBox[{"-", "3"}], ",", "7", ",", 
       RowBox[{"offset", "\[Rule]", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"-", "2.5"}], ",", 
          RowBox[{"-", "0.8"}]}], "}"}]}]}], "}"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"{", 
      RowBox[{"6", ",", "1", ",", "4", ",", 
       RowBox[{"offset", "\[Rule]", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"-", "6."}], ",", 
          RowBox[{"-", "0.8"}]}], "}"}]}]}], "}"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"{", 
      RowBox[{"7", ",", "5", ",", "1", ",", 
       RowBox[{"offset", "\[Rule]", 
        RowBox[{"{", 
         RowBox[{"5.75", ",", 
          RowBox[{"-", "1.5"}]}], "}"}]}]}], "}"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"{", 
      RowBox[{"5", ",", 
       RowBox[{"-", "2"}], ",", "6", ",", 
       RowBox[{"offset", "\[Rule]", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"-", "2.5"}], ",", 
          RowBox[{"-", "0.5"}]}], "}"}]}]}], "}"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"{", 
      RowBox[{"6", ",", "2", ",", "3", ",", 
       RowBox[{"offset", "\[Rule]", 
        RowBox[{"{", 
         RowBox[{"1.0", ",", 
          RowBox[{"-", "0.5"}]}], "}"}]}]}], "}"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"{", 
      RowBox[{"5", ",", 
       RowBox[{"-", "1"}], ",", "5", ",", 
       RowBox[{"offset", "\[Rule]", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"-", "4.75"}], ",", 
          RowBox[{"-", "0.8"}]}], "}"}]}]}], "}"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"{", 
      RowBox[{"6", ",", "3", ",", "2", ",", 
       RowBox[{"offset", "\[Rule]", 
        RowBox[{"{", 
         RowBox[{"5.75", ",", 
          RowBox[{"-", "1"}]}], "}"}]}]}], "}"}], ",", "\[IndentingNewLine]", 
     
     RowBox[{"{", 
      RowBox[{"5", ",", "0", ",", "4", ",", 
       RowBox[{"offset", "\[Rule]", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"-", "5.5"}], ",", 
          RowBox[{"-", "0.8"}]}], "}"}]}]}], "}"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"{", 
      RowBox[{"4", ",", 
       RowBox[{"-", "3"}], ",", "6", ",", 
       RowBox[{"offset", "\[Rule]", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"-", "2.5"}], ",", 
          RowBox[{"-", "0.8"}]}], "}"}]}]}], "}"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"{", 
      RowBox[{"5", ",", "1", ",", "3", ",", 
       RowBox[{"offset", "\[Rule]", 
        RowBox[{"{", 
         RowBox[{"5.75", ",", 
          RowBox[{"-", "0.5"}]}], "}"}]}]}], "}"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"{", 
      RowBox[{"4", ",", 
       RowBox[{"-", "2"}], ",", "5", ",", 
       RowBox[{"offset", "\[Rule]", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"-", "2."}], ",", 
          RowBox[{"-", "0.5"}]}], "}"}]}]}], "}"}]}], "}"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"channelsList", "[", 
    RowBox[{"-", "1"}], "]"}], "=", 
   RowBox[{"{", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"6", ",", "2", ",", "5", ",", 
       RowBox[{"offset", "\[Rule]", 
        RowBox[{"{", 
         RowBox[{"1.45", ",", 
          RowBox[{"-", "0.5"}]}], "}"}]}]}], "}"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"{", 
      RowBox[{"5", ",", 
       RowBox[{"-", "1"}], ",", "7", ",", 
       RowBox[{"offset", "\[Rule]", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"-", "4.75"}], ",", 
          RowBox[{"-", "0.8"}]}], "}"}]}]}], "}"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"{", 
      RowBox[{"7", ",", "6", ",", "2", ",", 
       RowBox[{"offset", "\[Rule]", 
        RowBox[{"{", 
         RowBox[{"5.9", ",", 
          RowBox[{"-", "1.6"}]}], "}"}]}]}], "}"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"{", 
      RowBox[{"6", ",", "3", ",", "4", ",", 
       RowBox[{"offset", "\[Rule]", 
        RowBox[{"{", 
         RowBox[{"1.6", ",", 
          RowBox[{"-", "0.5"}]}], "}"}]}]}], "}"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"{", 
      RowBox[{"5", ",", "0", ",", "6", ",", 
       RowBox[{"offset", "\[Rule]", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"-", "5.5"}], ",", 
          RowBox[{"-", "0.5"}]}], "}"}]}]}], "}"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"{", 
      RowBox[{"4", ",", 
       RowBox[{"-", "3"}], ",", "8", ",", 
       RowBox[{"offset", "\[Rule]", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"-", "2."}], ",", 
          RowBox[{"-", "0.8"}]}], "}"}]}]}], "}"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"{", 
      RowBox[{"7", ",", "7", ",", "1", ",", 
       RowBox[{"offset", "\[Rule]", 
        RowBox[{"{", 
         RowBox[{"6.4", ",", 
          RowBox[{"-", "1.6"}]}], "}"}]}]}], "}"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"(*", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"6", ",", "4", ",", "3", ",", 
         RowBox[{"offset", "\[Rule]", 
          RowBox[{"{", 
           RowBox[{"5.5", ",", 
            RowBox[{"+", "1.8"}]}], "}"}]}]}], "}"}], ","}], "*)"}], 
     RowBox[{"(*", 
      RowBox[{
      "fits", " ", "in", " ", "the", " ", "pattern", " ", "but", " ", "is", 
       " ", "not", " ", "really", " ", "visible"}], "*)"}], 
     "\[IndentingNewLine]", 
     RowBox[{"{", 
      RowBox[{"5", ",", "1", ",", "5", ",", 
       RowBox[{"offset", "\[Rule]", 
        RowBox[{"{", 
         RowBox[{"1.75", ",", 
          RowBox[{"-", "0.5"}]}], "}"}]}]}], "}"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"{", 
      RowBox[{"4", ",", 
       RowBox[{"-", "2"}], ",", "7", ",", 
       RowBox[{"offset", "\[Rule]", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"-", "2.5"}], ",", 
          RowBox[{"-", "0.8"}]}], "}"}]}]}], "}"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"{", 
      RowBox[{"5", ",", "2", ",", "4", ",", 
       RowBox[{"offset", "\[Rule]", 
        RowBox[{"{", 
         RowBox[{"5.5", ",", 
          RowBox[{"-", "0.8"}]}], "}"}]}]}], "}"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"{", 
      RowBox[{"4", ",", 
       RowBox[{"-", "1"}], ",", "6", ",", 
       RowBox[{"offset", "\[Rule]", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"-", "4.75"}], ",", 
          RowBox[{"-", "0.8"}]}], "}"}]}]}], "}"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"{", 
      RowBox[{"5", ",", "3", ",", "3", ",", 
       RowBox[{"offset", "\[Rule]", 
        RowBox[{"{", 
         RowBox[{"1.5", ",", 
          RowBox[{"-", "0.8"}]}], "}"}]}]}], "}"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"{", 
      RowBox[{"4", ",", "0", ",", "5", ",", 
       RowBox[{"offset", "\[Rule]", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"-", "5.5"}], ",", 
          RowBox[{"-", "0.5"}]}], "}"}]}]}], "}"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"{", 
      RowBox[{"4", ",", "1", ",", "4", ",", 
       RowBox[{"offset", "\[Rule]", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"-", "5.5"}], ",", 
          RowBox[{"-", "0.5"}]}], "}"}]}]}], "}"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"{", 
      RowBox[{"5", ",", "4", ",", "2", ",", 
       RowBox[{"offset", "\[Rule]", 
        RowBox[{"{", 
         RowBox[{"5.5", ",", 
          RowBox[{"-", "0.8"}]}], "}"}]}]}], "}"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"{", 
      RowBox[{"4", ",", "1", ",", "4", ",", 
       RowBox[{"offset", "\[Rule]", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"-", "5.5"}], ",", 
          RowBox[{"-", "0.5"}]}], "}"}]}]}], "}"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"{", 
      RowBox[{"3", ",", 
       RowBox[{"-", "2"}], ",", "6", ",", 
       RowBox[{"offset", "\[Rule]", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"-", "3.25"}], ",", 
          RowBox[{"-", "0.8"}]}], "}"}]}]}], "}"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"{", 
      RowBox[{"4", ",", "2", ",", "3", ",", 
       RowBox[{"offset", "\[Rule]", 
        RowBox[{"{", 
         RowBox[{"1.45", ",", 
          RowBox[{"-", "0.5"}]}], "}"}]}]}], "}"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"{", 
      RowBox[{"3", ",", 
       RowBox[{"-", "1"}], ",", "5", ",", 
       RowBox[{"offset", "\[Rule]", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"-", "4.75"}], ",", 
          RowBox[{"-", "0.8"}]}], "}"}]}]}], "}"}]}], "\[IndentingNewLine]", 
    "}"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"channelsImage", "[", "\[Epsilon]_", "]"}], ":=", 
   RowBox[{"Show", "[", 
    RowBox[{
     RowBox[{"channelLine", "@@@", 
      RowBox[{"channelsList", "[", "\[Epsilon]", "]"}]}], 
     "\[IndentingNewLine]", 
     RowBox[{"(*", 
      RowBox[{"To", " ", "see", " ", "the", " ", "bounding", " ", 
       RowBox[{"box", ":"}]}], "*)"}], 
     RowBox[{"(*", 
      RowBox[{"~", "Join", "~", 
       RowBox[{"{", 
        RowBox[{"Graphics", "[", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"Thickness", "[", "0.01", "]"}], ",", 
           RowBox[{"Line", "[", 
            RowBox[{"{", 
             RowBox[{
              RowBox[{"{", 
               RowBox[{"0", ",", "11.25"}], "}"}], ",", 
              RowBox[{"{", 
               RowBox[{"0.25", ",", "11.25"}], "}"}], ",", 
              RowBox[{"{", 
               RowBox[{"0.25", ",", "18.5"}], "}"}], ",", 
              RowBox[{"{", 
               RowBox[{"0", ",", "18.5"}], "}"}], ",", 
              RowBox[{"{", 
               RowBox[{"0", ",", "11.25"}], "}"}]}], "}"}], "]"}]}], "}"}], 
         "]"}], "}"}]}], "*)"}], "\[IndentingNewLine]", ",", 
     RowBox[{"PlotRange", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"0", ",", "0.25"}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{"11.25", ",", "18.5"}], "}"}]}], "}"}]}], 
     "\[IndentingNewLine]", ",", 
     RowBox[{"AspectRatio", "\[Rule]", "1.2"}], "\[IndentingNewLine]", ",", 
     RowBox[{"PlotRangePadding", "\[Rule]", "None"}], "\[IndentingNewLine]", 
     ",", 
     RowBox[{"ImagePadding", "\[Rule]", "None"}], "\[IndentingNewLine]", ",", 
     
     RowBox[{"ImageSize", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{"Automatic", ",", "550"}], "}"}]}]}], "\[IndentingNewLine]", 
    "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{"Row", "[", 
  RowBox[{
   RowBox[{"Table", "[", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{
      RowBox[{"splittingsImage", "[", "\[Epsilon]", "]"}], "=", 
      RowBox[{"Show", "[", "\[IndentingNewLine]", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"splittingsScan", "[", "\[Epsilon]", "]"}], ",", 
         "\[IndentingNewLine]", 
         RowBox[{"channelsImage", "[", "\[Epsilon]", "]"}]}], "}"}], 
       "\[IndentingNewLine]", 
       RowBox[{"(*", 
        RowBox[{",", 
         RowBox[{"ImageSize", "\[Rule]", "750"}]}], "*)"}], 
       "\[IndentingNewLine]", "]"}]}], "\[IndentingNewLine]", ",", 
     RowBox[{"{", 
      RowBox[{"\[Epsilon]", ",", 
       RowBox[{"{", 
        RowBox[{"1", ",", 
         RowBox[{"-", "1"}]}], "}"}]}], "}"}]}], "]"}], "~", "Join", "~", 
   RowBox[{"{", "\[IndentingNewLine]", 
    RowBox[{"LinearScaleLegend", "[", 
     RowBox[{"max", ",", "colorfunction", ",", 
      RowBox[{"\"\<Height\>\"", "\[Rule]", "475"}], ",", 
      RowBox[{"PlotPoints", "\[Rule]", "300"}]}], "]"}], 
    "\[IndentingNewLine]", "}"}]}], "\[IndentingNewLine]", 
  "]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"(*", 
   RowBox[{"(*", 
    RowBox[{
     RowBox[{
      RowBox[{
      "Test", " ", "that", " ", "it", " ", "prints", " ", "well", " ", "in", 
       " ", "B"}], "&"}], 
     RowBox[{"W", ":"}]}], "*)"}], "\[IndentingNewLine]", 
   RowBox[{"Row", "[", 
    RowBox[{"Table", "[", 
     RowBox[{
      RowBox[{"Show", "[", 
       RowBox[{
        RowBox[{"ColorConvert", "[", 
         RowBox[{
          RowBox[{"image", "\[LeftDoubleBracket]", 
           RowBox[{"1", ",", "j"}], "\[RightDoubleBracket]"}], ",", 
          "\"\<Grayscale\>\""}], "]"}], ",", 
        RowBox[{"ImageSize", "\[Rule]", 
         RowBox[{"{", 
          RowBox[{"Automatic", ",", 
           RowBox[{"j", "/.", 
            RowBox[{"{", 
             RowBox[{
              RowBox[{"1", "\[Rule]", "550"}], ",", 
              RowBox[{"2", "\[Rule]", "550"}], ",", 
              RowBox[{"3", "\[Rule]", "475"}]}], "}"}]}]}], "}"}]}]}], "]"}], 
      ",", 
      RowBox[{"{", 
       RowBox[{"j", ",", 
        RowBox[{"{", 
         RowBox[{"1", ",", "2", ",", "3"}], "}"}]}], "}"}]}], "]"}], "]"}], 
   "*)"}]}]}], "Input",
 CellChangeTimes->{}],

Cell["\<\
The image has been omitted to keep the file size small; see instead the \
output pdf files provided.\
\>", "Text"],

Cell[BoxData["\[IndentingNewLine]"], "Input"],

Cell["This section exports the final spectra to pdf", "Text"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"res", "=", "400"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{"AbsoluteTiming", "[", 
  RowBox[{
   RowBox[{"Export", "[", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{
      RowBox[{"NotebookDirectory", "[", "]"}], "<>", 
      "\"\</SplittingsSpectraRight.pdf\>\""}], "\[IndentingNewLine]", ",", 
     RowBox[{"splittingsImage", "[", "1", "]"}], "\[IndentingNewLine]", ",", 
     RowBox[{"ImageResolution", "\[Rule]", "res"}]}], "\[IndentingNewLine]", 
    "]"}], ";"}], "]"}], "\[IndentingNewLine]", 
 RowBox[{"AbsoluteTiming", "[", 
  RowBox[{
   RowBox[{"Export", "[", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{
      RowBox[{"NotebookDirectory", "[", "]"}], "<>", 
      "\"\</SplittingsSpectraLeft.pdf\>\""}], "\[IndentingNewLine]", ",", 
     RowBox[{"splittingsImage", "[", 
      RowBox[{"-", "1"}], "]"}], "\[IndentingNewLine]", ",", 
     RowBox[{"ImageResolution", "\[Rule]", "res"}]}], "\[IndentingNewLine]", 
    "]"}], ";"}], "]"}]}], "Input"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "3.7533240000000001046487341227475553751`6.595015969123192", ",", "Null"}], 
  "}"}]], "Output"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "3.54020599999999996398969415167812258005`6.5696284470738595", ",", 
   "Null"}], "}"}]], "Output"]
}, Open  ]],

Cell["\<\
Nifty trick to compress the resulting pdf file (quite significantly - from \
~4MB to ~380kB, per file). Uses Ghostscript to export the pdf to postscript \
and then back. Syntax works in a Unix system but should be easy to modify for \
a Windows system.\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"Run", "[", 
   RowBox[{"StringJoin", "[", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"\"\<cd \>\"", "<>", 
      RowBox[{"NotebookDirectory", "[", "]"}], "<>", "\"\< && \>\""}], ",", 
     "\[IndentingNewLine]", 
     "\"\<pdf2ps SplittingsSpectraRight.pdf temp.ps && \>\"", ",", 
     "\[IndentingNewLine]", 
     "\"\<ps2pdf temp.ps SplittingsSpectraRight.pdf && \>\"", ",", 
     "\[IndentingNewLine]", 
     "\"\<pdf2ps SplittingsSpectraLeft.pdf temp.ps && \>\"", ",", 
     "\[IndentingNewLine]", 
     "\"\<ps2pdf temp.ps SplittingsSpectraLeft.pdf && \>\"", ",", 
     "\[IndentingNewLine]", "\"\<rm temp.ps \>\""}], "]"}], "]"}], "/.", 
  RowBox[{"{", 
   RowBox[{"0", "\[Rule]", "\"\<Success\>\""}], "}"}]}]], "Input"],

Cell[BoxData["\<\"Success\"\>"], "Output"]
}, Open  ]],

Cell[BoxData["\[IndentingNewLine]"], "Input",
 CellChangeTimes->{}],

Cell["This exports the colour scale. Compression doesn\[CloseCurlyQuote]t \
help here", "Text"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{"scale", "=", 
  RowBox[{"Show", "[", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"LinearScaleLegend", "[", 
     RowBox[{"10", ",", "colorfunction", ",", 
      RowBox[{"\"\<Height\>\"", "\[Rule]", "475"}], ",", 
      RowBox[{"PlotPoints", "\[Rule]", "100"}], ",", 
      RowBox[{"\"\<Label\>\"", "\[Rule]", 
       RowBox[{"Style", "[", 
        RowBox[{"\"\<Harmonic dipole (arb. units)\>\"", ",", "14"}], 
        "]"}]}]}], "]"}], "\[IndentingNewLine]", ",", 
    RowBox[{"ImagePadding", "\[Rule]", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"1", ",", "42"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"65", ",", "4"}], "}"}]}], "}"}]}]}], 
   "]"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"Export", "[", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"NotebookDirectory", "[", "]"}], "<>", 
     "\"\</SplittingsSpectraColourScale.pdf\>\""}], "\[IndentingNewLine]", 
    ",", "scale", "\[IndentingNewLine]", ",", 
    RowBox[{"ImageResolution", "\[Rule]", "500"}]}], "\[IndentingNewLine]", 
   "]"}], ";"}]}], "Input"],

Cell[BoxData[
 GraphicsBox[GraphicsComplexBox[CompressedData["
1:eJxc2w3MtGF61+WbQimFYnGhLIXazcYGqA1IXSko2j4RK2hjRT5SUtKUVEoj
NqmgIg2khdQY0Ug0DqSGEA0ZEiBRIplNA8FU3CEwkQ+xfI34scxIZSiFaUbG
HcwQ32f2PP53znPTpPlldmbe973Oa46due/r49/yHb/8Wz9nWZaf/bOW5f3/
z//8mu//5f/1X/kj/8HX9N6kf9zHftv1T37efzUe36b/qe/4tl/6Z//6H0p/
/uu//0fS//b7w1/8R8fzd+l/6aPf9O/+xa/9vvRXvl7vj6W/5E//xg//9yfS
n/d6/e9Pf+cv+sXf8n/8+f8h/Xr6F/+P6W/9L/7Vrzr+uk+N99+n//Uf+oYf
/5f+wZ9K/5LXn+dPp//595f/z/5M+hOvNzikv/z3fvsfPfzM/yn9sdef98+m
v+j2m//D/Z/4c+mf8Prz/4X0b/8Db//NN3/5/5z+ra+/z9q/+S9+7fufKP0b
X3+//yX97c9/5Xd84/ev/W2vv+8PpL/ly3/Z+98w/U2vv//av/pXvf/nL6d/
xevfY+2v//DqH56R/pdf/z5/Nf0vfvjT/7IfWvtrXv9efy39zx5/3fufKP3z
X/9+a/+8z/0NH/4G/2v6K17/nn89/TM/OxDpj7/+ff+3dT7e/zgf/d/TH339
e6/9kd/5mpD0T3z9+/+f63x/8rs+rMDav+O1Hp9Of9eH//bHftunx/qs/Vs+
vNvv+/jfSP97r/Va+ze9Bnjtz87naV2/D3/b3/vta/+br/Vc+9e//9c/ck7/
G6/1XfvXfvjX/t7vW/ubXuv9f6W/8f2f55vW/obX+q/9Kz+s9u/+nL+57ofX
PKz99R/+2z/lD679da/5WPuXftX7Av9g+mtf87L2v/D+x7+t/TWv+fm/0//c
+7h879r/zGue1v6qz3z6e77wq//Wuv9e87X2z/td51/4u85r/5zXvF3S/8SX
/eAPf8HvXPtnvRZg7S/743/r9/8nP/dvr/P1mse1v/S1fdb+Ga/5/KH0T3t/
+e9c+4te87r2R97H7WN/J/2Fr/ld+ws+8j6wa3/+a55/OP1j/+Df/4rP/Q1r
/+jXfK+9fPX7P9DfTT//o/d5X/sf/MCH5f3k2v/vl77/gf5e+v95DdzaP7J7
3w9rf/Y/19Hr5zQ/em/S/OiPb9P80PzQ/OjP36X5oef/54fmh+aH5ofmR3//
fZofmh+aH5ofmh+aH5ofmh+aH5ofmh+aH5ofmh+aH5ofmh+aH5ofmh+aH5of
mh+aH5ofmh+aH5ofmY/yQ/ND80PzI/Ndfmh+aH709VmbH5ofmh99Pk/r+pUf
mh+aH5ofmh9Z3/JD80PzQ/Mj+6H8yPqXH5ofmh+aH5ofmY/yQ/ND80PzI/uv
/Mj8lB+aH5ofmh+aH5mv8kPzQ/ND8yP7vfzI/JUfmh+aH/n8LD80PzQ/8r+z
yw/ND80PzQ/ND82P/r/jr6P5cRh+HIYfh+HHYfhxGH4chh+H4cdh+HEYfqyf
y7r7cRh+HIYfh+HHYfhxGH4chh+H4cdh+HEYfhyGH4fhx2H4cRh+HIYfh+HH
YfhxGH4chh+H4cdh+HEYfhyGH4fhx2H4cRh+HIYfh+HHYfhxGH4chh+H4cdh
+HEYfhyGH4fhx2H4cRh+HIYfh+HHYfhxGH4chh+H4cdh+HEYfhyGH4fhx2H4
cRh+HIYfh+HHYfhxGH4chh+H4cdh+HEYfhyGH4fhx2H4cRh+HIYfh+HHYfhx
GH4chh+H4cdh+HEYfhyGH4fhx2H4cRh+HIYfh+HHYfhxGH4chh+H4cdh+HEY
fhyGH4fhx2H4cRh+HIYfh+HHYfix/u7yrfU5w4/emzQ/+uPbND80PzQ/+vN3
aX586/jfzZofmh+aH5ofmh/9/fdpfmh+aH5ofmh+aH5ofmh+aH5ofmh+aH5o
fuhva3/vH4gfmh+aH5ofmh+aH5ofmh+aH5ofmh+aH5ofmh+Zj/JD80PzQ/Mj
811+aH5ofvT1WZsfmh+aH30+T+v6lR+aH5ofmh+aH1nf8kPzQ/ND8yP7ofzI
+pcfmh+aH5ofmh+Zj/JD80PzQ/Mj+6/8yPyUH5ofmh+aH5ofma/yQ/ND80Pz
I/u9/Mj8lR+aH5of+fwsPzQ/ND80PzQ/ND80PzQ/ND/y+uVHb98/juP7x3F8
/ziO7x/H8f3jOL5/HMf3j+P4/nEc3z+O4/vH+ruG7t8/juP7x3F8/ziO7x8+
pz413n+f7t8/juP7x3F8/ziO7x/H8f3jOL5/HMf3j+P4/nEc3z+O4/vHcXz/
OI7vH8fx/eM4vn8cx/eP4/j+cRzfP47j+8dxfP84ju8fx/H94zi+fxzH94/j
+P5xHN8/juP7x3F8/ziO7x/H8f3jOL5/HMf3j+P4/nEc3z+O4/vHcXz/OI7v
H8fx/eM4vn8cx/eP4/j+cRzfP47j+8dxfP84ju8fx/H94zi+fxzH94/j+P5x
HN8/juP7x3F8/ziO7x/H8f3jOL5/HMf3j+P4/nEc3z+O4/vHcXz/OI7vH8fx
/eM4vn8cx/eP4/j+cRzfP47j+8dxfP84ju8fx/H94zi+fxzH94/j+P5xHN8/
juP7x3F8/ziO7x/H8f3jOL5/HMf3j+P4/nEc3z+O4/vHcXz/WK9bfnftE370
3qT50R/fpvmh+aH50Z+/S/Pju8fvzpofmh+aH5of393+d+Snxvvv0/zQ/ND8
0PzQ/ND80PzQ/ND80PzQ/ND80PzQ/ND80PzQ/ND80PzQ/ND80PzQ/ND80PzQ
/ND80PzIfJQfmh+aH5ofme/yQ/ND86Ovz9r80PzQ/OjzeVrXr/zQ/ND80PzQ
/Mj6lh+aH5ofmh/ZD+VH1r/80PzQ/ND80PzIfJQfmh+aH5of2X/lR+an/ND8
0PzQ/ND8yHyVH5ofmh+aH9nv5Ufmr/zQ/ND8yOdn+aH5ofmh+aH5ofmh+aH5
ofmR1y8/evv96jx+vzqP36/O4/er8/j96jx+vzqP36/O4/er8/j96jx+v1qv
A+r++9V5/H51Hr9fncfvV+f40d9/n+6/X53H71fn8fvVefx+dR6/X53H71fn
8fvVefx+dR6/X53H71fn8fvVefx+dR6/X53H71fn8fvVefx+dR6/X53H71fn
8fvVefx+dR6/X53H71fn8fvVefx+dR6/X53H71fn8fvVefx+dR6/X53H71fn
8fvVefx+dR6/X53H71fn8fvVefx+dR6/X53H71fn8fvVefx+dR6/X53H71fn
8fvVefx+dR6/X53H71fn8fvVefx+dR6/X53H71fn8fvVefx+dR6/X53H71fn
8fvVefx+dR6/X53H71fn8fvVefx+dR6/X53H71fn8fvVefx+dR6/X53H71fn
8fvVefx+dR6/X53H71fn8fvVefx+dR6/X53H71fn8fvVefx+dR6/X53H71fn
8fvVefx+dR6/X53H71fn8fvVep/f19U686P3Js2P/vg2zQ/ND82P/vxdmh9f
N+7b0PzQ/ND80Pz4ujbHnxrvv0/zQ/ND80PzQ/ND80PzQ/ND80PzQ/ND80Pz
Q/ND80PzQ/ND80PzQ/ND80PzQ/ND80PzQ/ND80PzI/NRfmh+aH5ofmS+yw/N
D82Pvj5r80PzQ/Ojz+dpXb/yQ/ND80PzQ/Mj61t+aH5ofmh+ZD+UH1n/8kPz
Q/ND80PzI/NRfmh+aH5ofmT/lR+Zn/JD80PzQ/ND8yPzVX5ofmh+aH5kv5cf
mb/yQ/ND8yOfn+WH5ofmh+aH5ofmh+aH5ofmR16//Ojt+sdlXP+4jOsfl3H9
4zKuf1zG9Y/LuP5xGdc/LuP6x2Vc/1jvq9P9+sdlXP+4jOsfl3H94xI/+vvv
0/36x2Vc/7iM6x+Xcf3jMq5/XMb1j8u4/nEZ1z8u4/rHZVz/uIzrH5dx/eMy
rn9cxvWPy7j+cRnXPy7j+sdlXP+4jOsfl3H94zKuf1zG9Y/LuP5xGdc/LuP6
x2Vc/7iM6x+Xcf3jMq5/XMb1j8u4/nEZ1z8u4/rHZVz/uIzrH5dx/eMyrn9c
xvWPy7j+cRnXPy7j+sdlXP+4jOsfl3H94zKuf1zG9Y/LuP5xGdc/LuP6x2Vc
/7iM6x+Xcf3jMq5/XMb1j8u4/nEZ1z8u4/rHZVz/uIzrH5dx/eMyrn9cxvWP
y7j+cRnXPy7j+sdlXP+4jOsfl3H94zKuf1zG9Y/LuP5xGdc/LuP6x2Vc/7iM
6x+Xcf3jMq5/XMb1j8u4/nEZ1z8u4/rHZVz/uIzrH+u5mY/Wn5MfvTdpfvTH
t2l+aH5ofvTn79L8+Gj7d/tjaX5ofmh+aH58tH0P/NR4/32aH5ofmh+aH5of
mh+aH5ofmh+aH5ofmh+aH5ofmh+aH5ofmh+aH5ofmh+aH5ofmh+aH5ofmh+a
H5mP8kPzQ/ND8yPzXX5ofmh+9PVZmx+aH5offT5P6/qVH5ofmh+aH5ofWd/y
Q/ND80PzI/uh/Mj6lx+aH5ofmh+aH5mP8kPzQ/ND8yP7r/zI/JQfmh+aH5of
mh+Zr/JD80PzQ/Mj+738yPyVH5ofmh/5/DTH9f/5ofmh+aH5ofmh+aH5ofmR
1y8/ert+fh3Xz6/j+vl1XD+/juvn13H9/Dqun1/H9fPruH5+HdfP13Mqul8/
v47r59dx/fw6rp9f40d//326Xz+/juvn13H9/Dqun1/H9fPruH5+HdfPr+P6
+XVcP7+O6+fXcf38Oq6fX8f18+u4fn4d18+v4/r5dVw/v47r59dx/fw6rp9f
x/Xz67h+fh3Xz6/j+vl1XD+/juvn13H9/Dqun1/H9fPruH5+HdfPr+P6+XVc
P7+O6+fXcf38Oq6fX8f18+u4fn4d18+v4/r5dVw/v47r59dx/fw6rp9fx/Xz
67h+fh3Xz6/j+vl1XD+/juvn13H9/Dqun1/H9fPruH5+HdfPr+P6+XVcP7+O
6+fXcf38Oq6fX8f18+u4fn4d18+v4/r5dVw/v47r59dx/fw6rp9fx/Xz67h+
fh3Xz6/j+vl1XD+/juvn13H9/Dqun1/H9fPruH5+HdfPr+P6+XVcP7+O6+fX
cf18PYf+2bn+kfjRe5PmR398m+aH5ofmR3/+Ls0PzQ/ND80PzQ/ND82P/v77
ND80PzQ/ND80PzQ/ND80PzQ/ND80PzQ/ND80PzQ/ND80PzQ/ND80PzQ/ND80
PzQ/ND80PzQ/ND8yH+WH5ofmh+ZH5rv80PzQ/OjrszY/ND80P/p8ntb1Kz80
PzQ/ND80P7K+5Yfmh+aH5kf2Q/mR9S8/ND80PzQ/ND8yH+WH5ofmh+ZH9l/5
kfkpPzQ/ND80PzQ/Ml/lh+aH5ofmR/Z7+ZH5Kz80PzQ/8vnZvrf+SPzQ/ND8
0PzQ/ND80PzQ/Mjrlx+93X91G/df3cb9V7dx/9Vt3H91G/df3cb9V7dx/9Vt
3H91G/df3cb9V7dx/9Vt3H91G/df3cb9V7dx/9Vt3H91G/df3cb9V7dx/9Vt
3H91G/df3cb9V7dx/9Vt3H91G/df3cb9V7dx/9Vt3H91G/df3cb9V7dx/9Vt
3H91G/df3cb9V7dx/9Vt3H91G/df3cb9V7dx/9Vt3H91G/df3cb9V7dx/9Vt
3H91G/df3cb9V7dx/9Vt3H91G/df3cb9V7dx/9Vt3H91G/df3cb9V7dx/9Vt
3H91G/df3cb9V7dx/9Vt3H91G/df3cb9V7dx/9Vt3H91G/df3cb9V7dx/9Vt
3H91G/df3cb9V7dx/9Vt3H91G/df3cb9V7dx/9Vt3H91G/df3cb9V7dx/9Vt
3H91G/df3cb9V7dx/9Vt3H91G/df3cb9V7dx/9Vt3H91G/df3cb9V7dx/9Vt
3H91G/df3cb9V7dx/9Vt3H91G/df3cb9V7dx/9Utfvzq19z8/fjRe5PmR398
m+aH5ofmR3/+Ls0PzQ/ND80PzQ/ND82P/v77ND80PzQ/ND80PzQ/ND80PzQ/
ND80PzQ/ND80PzQ/ND80PzQ/ND80PzQ/ND80PzQ/ND80PzQ/ND8yH+WH5ofm
h+ZH5rv80PzQ/OjrszY/ND80P/p8ntb1Kz80PzQ/ND80P7K+5Yfmh+aH5kf2
Q/mR9S8/ND80PzQ/ND8yH+WH5ofmh+ZH9l/5kfkpPzQ/ND80PzQ/Ml/lh+aH
5ofmR/Z7+ZH5Kz80PzQ/8vnpumQ1PzQ/ND80PzQ/ND80PzQ/8vrlR2/3797H
/bv3+KH7/bv3+KH7/bv3cf/ufdy/e48fut+/ex/3797H/bv3cf/ufdy/ex/3
797H/bv3+KH7/bv3cf/ufdy/ex/3797H/bv3cf/ufdy/ex/3797H/bv3cf/u
fdy/ex/3797H/bv3cf/ufdy/ex/3797H/bv3cf/ufdy/ex/3797H/bv3cf/u
fdy/ex/3797H/bv3cf/ufdy/ex/3797H/bv3cf/ufdy/ex/3797H/bv3cf/u
fdy/ex/3797H/bv3cf/ufdy/ex/3797H/bv3cf/ufdy/ex/3797H/bv3cf/u
fdy/ex/3797H/bv3cf/ufdy/ex/3797H/bv3cf/ufdy/ex/3797H/bv3cf/u
fdy/ex/3797H/bv3cf/ufdy/ex/3797H/bv3cf/ufdy/ex/3797H/bv3cf/u
fdy/ex/3797H/bv3cf/ufdy/ex/3797H/bv3cf/ufdy/ex/3797H/bv3cf/u
fdy/e48fr7f96s/Ej96bND/649s0PzQ/ND/683dpfmh+aH5ofmh+aH5ofvT3
36f5ofmh+aH5ofmh+aH5ofmh+aH5ofmh+aH5ofmh+aH5ofmh+aH5ofmh+aH5
ofmh+aH5ofmh+aH5kfkoPzQ/ND80PzLf5Yfmh+ZHX5+1+aH5ofnR5/O0rl/5
ofmh+aH5ofmR9S0/ND80PzQ/sh/Kj6x/+aH5ofmh+aH5kfkoPzQ/ND80P7L/
yo/MT/mh+aH5ofmh+ZH5Kj80PzQ/ND+y38uPzF/5ofmh+ZHPz/JD80PzQ/ND
80PzQ/ND80PzI69ffvR2/uMxzn884ofu5z8e8UP38x+Pcf7jMc5/POKH7uc/
HuP8x2Oc/3iM8x+Pcf7jMc5/PMb5j0f80P38x2Oc/3iM8x+Pcf7jMc5/PMb5
j8c4//EY5z8e4/zHY5z/eIzzH49x/uMxzn88xvmPxzj/8RjnPx7j/MdjnP94
jPMfj3H+4zHOfzzG+Y/HOP/xGOc/HuP8x2Oc/3iM8x+Pcf7jMc5/PMb5j8c4
//EY5z8e4/zHY5z/eIzzH49x/uMxzn88xvmPxzj/8RjnPx7j/MdjnP94jPMf
j3H+4zHOfzzG+Y/HOP/xGOc/HuP8x2Oc/3iM8x+Pcf7jMc5/PMb5j8c4//EY
5z8e4/zHY5z/eIzzH49x/uMxzn88xvmPxzj/8RjnPx7j/MdjnP94jPMfj3H+
4zHOfzzG+Y/HOP/xGOc/HuP8x2Oc/3iM8x+Pcf7jMc5/PMb5j8c4//EY5z8e
4/zHY5z/eIzzH4/48fpn/c7/L3703qT50R/fpvmh+aH50Z+/S/ND80PzQ/ND
80PzQ/Ojv/8+zQ/ND80PzQ/ND80PzQ/ND80PzQ/ND80PzQ/ND80PzQ/ND80P
zQ/ND80PzQ/ND80PzQ/ND80PzY/MR/mh+aH5ofmR+S4/ND80P/r6rM0PzQ/N
jz6fp3X9yg/ND80PzQ/Nj6xv+aH5ofmh+ZH9UH5k/csPzQ/ND80PzY/MR/mh
+aH5ofmR/Vd+ZH7KD80PzQ/ND82PzFf5ofmh+aH5kf1efmT+yg/ND82PfH46
l1LND80PzQ/ND80PzQ/ND82PvH750dv5wec4P/iMH7qfH3zGD93PDz7H+cHn
OD/4jB+6nx98jvODz3F+8DnODz7H+cHnOD/4HOcHn/FD9/ODz3F+8DnODz7H
+cHnOD/4HOcHn+P84HOcH3yO84PPcX7wOc4PPsf5wec4P/gc5wef4/zgc5wf
fI7zg89xfvA5zg8+x/nB5zg/+BznB5/j/OBznB98jvODz3F+8DnODz7H+cHn
OD/4HOcHn+P84HOcH3yO84PPcX7wOc4PPsf5wec4P/gc5wef4/zgc5wffI7z
g89xfvA5zg8+x/nB5zg/+BznB5/j/OBznB98jvODz3F+8DnODz7H+cHnOD/4
HOcHn+P84HOcH3yO84PPcX7wOc4PPsf5wec4P/gc5wef4/zgc5wffI7zg89x
fvA5zg8+x/nB5zg/+BznB5/j/OBznB98jvODz3F+8DnODz7H+cHnOD/4HOcH
n+P84HOcH3yO84PPcX7wOc4PPuPHa2w++Q/jR+9Nmh/98W2aH5ofmh/9+bs0
PzQ/ND80PzQ/ND80P/r779P80PzQ/ND80PzQ/ND80PzQ/ND80PzQ/ND80PzQ
/ND80PzQ/ND80PzQ/ND80PzQ/ND80PzQ/ND8yHyUH5ofmh+aH5nv8kPzQ/Oj
r8/a/ND80Pzo83la16/80PzQ/ND80PzI+pYfmh+aH5of2Q/lR9a//ND80PzQ
/ND8yHyUH5ofmh+aH9l/5Ufmp/zQ/ND80PzQ/Mh8lR+aH5ofmh/Z7+VH5q/8
0PzQ/MjnZ/mh+aH5ofmh+aH5ofmh+aH5kdcvP3o7f7689fPnepPu5889vk33
8+fLWz9/vrz18+eev0v38+fLGz80P3Q/f7689fPnyxs/dD9/7v336X7+fHnr
58+Xt37+fHnr58+Xt37+fHnr58+Xt37+fHnr58+Xt37+fHnr58+Xt37+fHnr
58+Xt37+fHnr58+Xt37+fHnr58+Xt37+fHnr58+Xt37+fHnr58+Xt37+fHnr
58+Xt37+fHnr58+Xt37+fHnr58+Xt37+fHnr588/zEf5ofv58+Wtnz9f3vr5
8w/z3c6fL2/9/Pny1s+fW5+1+/nz5a2fP1/e+vlz83la16+dP1/e+vnz5a2f
P1/e+vnz5a2fP/+wvu38+fLWz58vb/38+fLWz59/2A/t/PmH9W/nz5e3fv58
eevnz5e3fv58eevnzz/MR/mh+/nz5a2fP1/e+vnzD/uvnT//MD/t/Pny1s+f
L2/9/Pny1s+fL2/9/PmH+Wrnz5e3fv58eevnz5e3fv78w34vPzJ/7fz58tbP
ny9v/fz5h8/P8kP38+fLWz9/vrz18+fLWz9/vrz18+fLWz9/vrz18+fLWz9/
/uH12/lzvSyP1+X01Y/emzQ/+uPbND80PzQ/+vN3aX5ofmh+aH5ofmh+aH70
99+n+aH5ofmh+aH5ofmh+aH5ofmh+aH5ofmh+aH5ofmh+aH5ofmh+aH5ofmh
+aH5ofmh+aH5ofmh+ZH5KD80PzQ/ND8y3+WH5ofmR1+ftfmh+aH50efztK5f
+aH5ofmh+aH5kfUtPzQ/ND80P7Ifyo+sf/mh+aH5ofmh+ZH5KD80PzQ/ND+y
/8qPzE/5ofmh+aH5ofmR+So/ND80PzQ/st/Lj8xf+aH5ofmRz8/yQ/ND80Pz
Q/ND80PzQ/ND8yOvX370XpZ/5zXXPyp+9N6k+dEf36b5ofmh+dGfv0vzQ/ND
80PzQ/ND80Pzo7//Ps0PzQ/ND80PzQ/ND80PzQ/ND80PzQ/ND80PzQ/ND80P
zQ/ND80PzQ/ND80PzQ/ND80PzQ/ND82PzEf5ofmh+aH5kfkuPzQ/ND/6+qzN
D80PzY8+n6d1/coPzQ/ND80PzY+sb/mh+aH5ofmR/VB+ZP3LD80PzQ/ND82P
zEf5ofmh+aH5kf1XfmR+yg/ND80PzQ/Nj8xX+aH5ofmh+ZH9Xn5k/soPzQ/N
j3x+lh+aH5ofmh+aH5ofmh+aH5ofef3yo/ey/PA3vAYnfvTepPnRH9+m+aH5
ofnRn79L80PzQ/ND80PzQ/ND86O//z7ND80PzQ/ND80PzQ/ND80PzQ/ND80P
zQ/ND80PzQ/ND80PzQ/ND80PzQ/ND80PzQ/ND80PzQ/Nj8xH+aH5ofmh+ZH5
Lj80PzQ/+vqszQ/ND82PPp+ndf3KD80PzQ/ND82PrG/5ofmh+aH5kf1QfmT9
yw/ND80PzQ/Nj8xH+aH5ofmh+ZH9V35kfsoPzQ/ND80PzY/MV/mh+aH5ofmR
/V5+ZP7KD80PzY98fpYfmh+aH5ofmh+aH5ofmh+aH3n98qP3snz2c+ZHx4/e
mzQ/+uPbND80PzQ/+vN3aX5ofmh+aH5ofmh+aH7099+n+aH5ofmh+aH5ofmh
+aH5ofmh+aH5ofmh+aH5ofmh+aH5ofmh+aH5ofmh+aH5ofmh+aH5ofmh+ZH5
KD80PzQ/ND8y3+WH5ofmR1+ftfmh+aH50efztK5f+aH5ofmh+aH5kfUtPzQ/
ND80P7Ifyo+sf/mh+aH5ofmh+ZH5KD80PzQ/ND+y/8qPzE/5ofmh+aH5ofmR
+So/ND80PzQ/st/Lj8xf+aH5ofmRz8/yQ/ND80PzQ/ND80PzQ/ND8yOvX370
Xpa/8T52n/gx8aP3Js2P/vg2zQ/ND82P/vxdmh+aH5ofmh+aH5ofmh/9/fdp
fmh+aH5ofmh+aH5ofmh+aH5ofmh+aH5ofmh+aH5ofmh+aH5ofmh+aH5ofmh+
aH5ofmh+aH5ofmQ+yg/ND80PzY/Md/mh+aH50ddnbX5ofmh+9Pk8retXfmh+
aH5ofmh+ZH3LD80PzQ/Nj+yH8iPrX35ofmh+aH5ofmQ+yg/ND80PzY/sv/Ij
81N+aH5ofmh+aH5kvsoPzQ/ND82P7PfyI/NXfmh+aH7k87P80PzQ/ND80PzQ
/ND80PzQ/Mjrlx+9l+XXvObmc+NH702aH/3xbZofmh+aH/35uzQ/ND80PzQ/
ND80PzQ/+vvv0/zQ/ND80PzQ/ND80PzQ/ND80PzQ/ND80PzQ/ND80PzQ/ND8
0PzQ/ND80PzQ/ND80PzQ/ND80PzIfJQfmh+aH5ofme/yQ/ND86Ovz9r80PzQ
/OjzeVrXr/zQ/ND80PzQ/Mj6lh+aH5ofmh/ZD+VH1r/80PzQ/ND80PzIfJQf
mh+aH5of2X/lR+an/ND80PzQ/ND8yHyVH5ofmh+aH9nv5Ufmr/zQ/ND8yOdn
+aH5ofmh+aH5ofmh+aH5ofmR1y8/ei/LX359LK1+9N6k+dEf36b5ofmh+dGf
v0vzQ/ND80PzQ/ND80Pzo7//Ps0PzQ/ND80PzQ/ND80PzQ/ND80PzQ/ND80P
zQ/ND80PzQ/ND80PzQ/ND80PzQ/ND80PzQ/ND82PzEf5ofmh+aH5kfkuPzQ/
ND/6+qzND80PzY8+n6d1/coPzQ/ND80PzY+sb/mh+aH5ofmR/VB+ZP3LD80P
zQ/ND82PzEf5ofmh+aH5kf1XfmR+yg/ND80PzQ/Nj8xX+aH5ofmh+ZH9Xn5k
/soPzQ/Nj3x+lh+aH5ofmh+aH5ofmh+aH5ofef3yo/ey/Guvdf6x8aP3Js2P
/vg2zQ/ND82P/vxdmh+aH5ofmh+aH5ofmh/9/fdpfmh+aH5ofmh+aH5ofmh+
aH5ofmh+aH5ofmh+aH5ofmh+aH5ofmh+aH5ofmh+aH5ofmh+aH5ofmQ+yg/N
D80PzY/Md/mh+aH50ddnbX5ofmh+9Pk8retXfmh+aH5ofmh+ZH3LD80PzQ/N
j+yH8iPrX35ofmh+aH5ofmQ+yg/ND80PzY/sv/Ij81N+aH5ofmh+aH5kvsoP
zQ/ND82P7PfyI/NXfmh+aH7k87P80PzQ/ND80PzQ/ND80PzQ/Mjrlx+9l+Xw
Yeq/8js+L3703qT50R/fpvmh+aH50Z+/S/ND80PzQ/ND80PzQ/Ojv/8+zQ/N
D80PzQ/ND80PzQ/ND80PzQ/ND80PzQ/ND80PzQ/ND80PzQ/ND80PzQ/ND80P
zQ/ND80PzY/MR/mh+aH5ofmR+S4/ND80P/r6rM0PzQ/Njz6fp3X9yg/ND80P
zQ/Nj6xv+aH5ofmh+ZH9UH5k/csPzQ/ND80PzY/MR/mh+aH5ofmR/Vd+ZH7K
D80PzQ/ND82PzFf5ofmh+aH5kf1efmT+yg/ND82PfH6WH5ofmh+aH5ofmh+a
H5ofmh95/fKj97L84te6/Lj40XuT5kd/fJvmh+aH5kd//i7ND80PzQ/ND80P
zQ/Nj/7++zQ/ND80PzQ/ND80PzQ/ND80PzQ/ND80PzQ/ND80PzQ/ND80PzQ/
ND80PzQ/ND80PzQ/ND80PzQ/Mh/lh+aH5ofmR+a7/ND80Pzo67M2PzQ/ND/6
fJ7W9Ss/ND80PzQ/ND+yvuWH5ofmh+ZH9kP5kfUvPzQ/ND80PzQ/Mh/lh+aH
5ofmR/Zf+ZH5KT80PzQ/ND80PzJf5Yfmh+aH5kf2e/mR+Ss/ND80P/L5WX5o
fmh+aH5ofmh+aH5ofmh+5PXLj97L8t9/4v0f9vPjR+9Nmh/98W2aH5ofmh/9
+bs0PzQ/ND80PzQ/ND80P/r779P80PzQ/ND80PzQ/ND80PzQ/ND80PzQ/ND8
0PzQ/ND80PzQ/ND80PzQ/ND80PzQ/ND80PzQ/ND8yHyUH5ofmh+aH5nv8kPz
Q/Ojr8/a/ND80Pzo83la16/80PzQ/ND80PzI+pYfmh+aH5of2Q/lR9a//ND8
0PzQ/ND8yHyUH5ofmh+aH9l/5Ufmp/zQ/ND80PzQ/Mh8lR+aH5ofmh/Z7+VH
5q/80PzQ/MjnZ/mh+aH5ofmh+aH5ofmh+aH5kdcvP3ovyy94/TuufvTepPnR
H9+m+aH5ofnRn79L80PzQ/ND80PzQ/ND86O//z7ND80PzQ/ND80PzQ/ND80P
zQ/ND80PzQ/ND80PzQ/ND80PzQ/ND80PzQ/ND80PzQ/ND80PzQ/Nj8xH+aH5
ofmh+ZH5Lj80PzQ/+vqszQ/ND82PPp+ndf3KD80PzQ/ND82PrG/5ofmh+aH5
kf1QfmT9yw/ND80PzQ/Nj8xH+aH5ofmh+ZH9V35kfsoPzQ/ND80PzY/MV/mh
+aH5ofmR/V5+ZP7KD80PzY98fpYfmh+aH5ofmh+aH5ofmh+aH3n98qP3svx3
f/j9Pz8+fvTepPnRH9+m+aH5ofnRn79L80PzQ/ND80PzQ/ND86O//z7ND80P
zQ/ND80PzQ/ND80PzQ/ND80PzQ/ND80PzQ/ND80PzQ/ND80PzQ/ND80PzQ/N
D80PzQ/Nj8xH+aH5ofmh+ZH5Lj80PzQ/+vqszQ/ND82PPp+ndf3KD80PzQ/N
D82PrG/5ofmh+aH5kf1QfmT9yw/ND80PzQ/Nj8xH+aH5ofmh+ZH9V35kfsoP
zQ/ND80PzY/MV/mh+aH5ofmR/V5+ZP7KD80PzY98fpYfmh+aH5ofmh+aH5of
mh+aH3n98qP3snzF6+/9E+JH702aH/3xbZofmh+aH/35uzQ/ND80PzQ/ND80
PzQ/+vvv0/zQ/ND80PzQ/ND80PzQ/ND80PzQ/ND80PzQ/ND80PzQ/ND80PzQ
/ND80PzQ/ND80PzQ/ND80PzIfJQfmh+aH5ofme/yQ/ND86Ovz9r80PzQ/Ojz
eVrXr/zQ/ND80PzQ/Mj6lh+aH5ofmh/ZD+VH1r/80PzQ/ND80PzIfJQfmh+a
H5of2X/lR+an/ND80PzQ/ND8yHyVH5ofmh+aH9nv5Ufmr/zQ/ND8yOdn+aH5
ofmh+aH5ofmh+aH5ofmR1y8/ei/LH/j4+1/0C+JH702aH/3xbZofmh+aH/35
uzQ/ND80PzQ/ND80PzQ/+vvv0/zQ/ND80PzQ/ND80PzQ/ND80PzQ/ND80PzQ
/ND80PzQ/ND80PzQ/ND80PzQ/ND80PzQ/ND80PzIfJQfmh+aH5ofme/yQ/ND
86Ovz9r80PzQ/OjzeVrXr/zQ/ND80PzQ/Mj6lh+aH5ofmh/ZD+VH1r/80PzQ
/ND80PzIfJQfmh+aH5of2X/lR+an/ND80PzQ/ND8yHyVH5ofmh+aH9nv5Ufm
r/zQ/ND8yOdn+aH5ofmh+aH5ofmh+aH5ofmR1y8/ei/Lx15/zp8YP3pv0vzo
j2/T/ND80Pzoz9+l+aH5ofmh+aH5ofmh+dHff5/mh+aH5ofmh+aH5ofmh+aH
5ofmh+aH5ofmh+aH5ofmh+aH5ofmh+aH5ofmh+aH5ofmh+aH5ofmR+aj/ND8
0PzQ/Mh8lx+aH5offX3W5ofmh+ZHn8/Tun7lh+aH5ofmh+ZH1rf80PzQ/ND8
yH4oP7L+5Yfmh+aH5ofmR+aj/ND80PzQ/Mj+Kz8yP+WH5ofmh+aH5kfmq/zQ
/ND80PzIfi8/Mn/lh+aH5kc+P8sPzQ/ND80PzQ/ND80PzQ/Nj7x++dF7Wf7L
7/2+T3zZD65+9N6k+dEf36b5ofmh+dGfv0vzQ/ND80PzQ/ND80Pzo7//Ps0P
zQ/ND80PzQ/ND80PzQ/ND80PzQ/ND80PzQ/ND80PzQ/ND80PzQ/ND80PzQ/N
D80PzQ/ND82PzEf5ofmh+aH5kfkuPzQ/ND/6+qzND80PzY8+n6d1/coPzQ/N
D80PzY+sb/mh+aH5ofmR/VB+ZP3LD80PzQ/ND82PzEf5ofmh+aH5kf1XfmR+
yg/ND80PzQ/Nj8xX+aH5ofmh+ZH9Xn5k/soPzQ/Nj3x+lh+aH5ofmh+aH5of
mh+aH5ofef3yo/ey/OT3sfnkPxI/em/S/OiPb9P80PzQ/OjP36X5ofmh+aH5
ofmh+aH50d9/n+aH5ofmh+aH5ofmh+aH5ofmh+aH5ofmh+aH5ofmh+aH5ofm
h+aH5ofmh+aH5ofmh+aH5ofmh+ZH5qP80PzQ/ND8yHyXH5ofmh99fdbmh+aH
5kefz9O6fuWH5ofmh+aH5kfWt/zQ/ND80PzIfig/sv7lh+aH5ofmh+ZH5qP8
0PzQ/ND8yP4rPzI/5Yfmh+aH5ofmR+ar/ND80PzQ/Mh+Lz8yf+WH5ofmRz4/
yw/ND80PzQ/ND80PzQ/ND82PvH750XtZ/tMvfL1x/Oi9SfOjP75N80PzQ/Oj
P3+X5ofmh+aH5ofmh+aH5kd//32aH5ofmh+aH5ofmh+aH5ofmh+aH5ofmh+a
H5ofmh+aH5ofmh+aH5ofmh+aH5ofmh+aH5ofmh+aH5mP8kPzQ/ND8yPzXX5o
fmh+9PVZmx+aH5offT5P6/qVH5ofmh+aH5ofWd/yQ/ND80PzI/uh/Mj6lx+a
H5ofmh+aH5mP8kPzQ/ND8yP7r/zI/JQfmh+aH5ofmh+Zr/JD80PzQ/Mj+738
yPyVH5ofmh/5/Cw/ND80PzQ/ND80PzQ/ND80P/L65UfvZfme1z75SfGj9ybN
j/74Ns0PzQ/Nj/78XZofmh+aH5ofmh+aH5of/f33aX5ofmh+aH5ofmh+aH5o
fmh+aH5ofmh+aH5ofmh+aH5ofmh+aH5ofmh+aH5ofmh+aH5ofmh+aH5kPsoP
zQ/ND82PzHf5ofmh+dHXZ21+aH5ofvT5PK3rV35ofmh+aH5ofmR9yw/ND80P
zY/sh/Ij619+aH5ofmh+aH5kPsoPzQ/ND82P7L/yI/NTfmh+aH5ofmh+ZL7K
D80PzQ/Nj+z38iPzV35ofmh+5POz/ND80PzQ/ND80PzQ/ND80PzI65cfvZfl
7bUOqx+9N2l+9Me3aX5ofmh+9Ofv0vzQ/ND80PzQ/ND80Pzo779P80PzQ/ND
80PzQ/ND80PzQ/ND80PzQ/ND80PzQ/ND80PzQ/ND80PzQ/ND80PzQ/ND80Pz
Q/ND8yPzUX5ofmh+aH5kvssPzQ/Nj74+a/ND80Pzo8/naV2/8kPzQ/ND80Pz
I+tbfmh+aH5ofmQ/lB9Z//JD80PzQ/ND8yPzUX5ofmh+aH5k/5UfmZ/yQ/ND
80PzQ/Mj81V+aH5ofmh+ZL+XH5m/8kPzQ/Mjn5/lh+aH5ofmh+aH5ofmh+aH
5kdev/zovSzP92X5zOpH702aH/3xbZofmh+aH/35uzQ/ND80PzQ/ND80PzQ/
+vvv0/zQ/ND80PzQ/ND80PzQ/ND80PzQ/ND80PzQ/ND80PzQ/ND80PzQ/ND8
0PzQ/ND80PzQ/ND80PzIfJQfmh+aH5ofme/yQ/ND86Ovz9r80PzQ/OjzeVrX
r/zQ/ND80PzQ/Mj6lh+aH5ofmh/ZD+VH1r/80PzQ/ND80PzIfJQfmh+aH5of
2X/lR+an/ND80PzQ/ND8yHyVH5ofmh+aH9nv5Ufmr/zQ/ND8yOdn+aH5ofmh
+aH5ofmh+aH5ofmR1y8/ei/LH3//r33zPxo/em/S/OiPb9P80PzQ/OjP36X5
ofmh+aH5ofmh+aH50d9/n+aH5ofmh+aH5ofmh+aH5ofmh+aH5ofmh+aH5ofm
h+aH5ofmh+aH5ofmh+aH5ofmh+aH5ofmh+ZH5qP80PzQ/ND8yHyXH5ofmh99
fdbmh+aH5kefz9O6fuWH5ofmh+aH5kfWt/zQ/ND80PzIfig/sv7lh+aH5ofm
h+ZH5qP80PzQ/ND8yP4rPzI/5Yfmh+aH5ofmR+ar/ND80PzQ/Mh+Lz8yf+WH
5ofmRz4/yw/ND80PzQ/ND80PzQ/ND82PvH750XtZ/v3XXK9+9N6k+dEf36b5
ofmh+dGfv0vzQ/ND80PzQ/ND80Pzo7//Ps0PzQ/ND80PzQ/ND80PzQ/ND80P
zQ/ND80PzQ/ND80PzQ/ND80PzQ/ND80PzQ/ND80PzQ/ND82PzEf5ofmh+aH5
kfkuPzQ/ND/6+qzND80PzY8+n6d1/coPzQ/ND80PzY+sb/mh+aH5ofmR/VB+
ZP3LD80PzQ/ND82PzEf5ofmh+aH5kf1XfmR+yg/ND80PzQ/Nj8xX+aH5ofmh
+ZH9Xn5k/soPzQ/Nj3x+lh+aH5ofmh+aH5ofmh+aH5ofef3yo/ey/NOvf7eP
xI/emzQ/+uPbND80PzQ/+vN3aX5ofmh+aH5ofmh+aH7099+n+aH5ofmh+aH5
ofmh+aH5ofmh+aH5ofmh+aH5ofmh+aH5ofmh+aH5ofmh+aH5ofmh+aH5ofmh
+ZH5KD80PzQ/ND8y3+WH5ofmR1+ftfmh+aH50efztK5f+aH5ofmh+aH5kfUt
PzQ/ND80P7Ifyo+sf/mh+aH5ofmh+ZH5KD80PzQ/ND+y/8qPzE/5ofmh+aH5
ofmR+So/ND80PzQ/st/Lj8xf+aH5ofmRz8/yQ/ND80PzQ/ND80PzQ/ND8yOv
X370XpYfeR+D37360XuT5kd/fJvmh+aH5kd//i7ND80PzQ/ND80PzQ/Nj/7+
+zQ/ND80PzQ/ND80PzQ/ND80PzQ/ND80PzQ/ND80PzQ/ND80PzQ/ND80PzQ/
ND80PzQ/ND80PzQ/Mh/lh+aH5ofmR+a7/ND80Pzo67M2PzQ/ND/6fJ7W9Ss/
ND80PzQ/ND+yvuWH5ofmh+ZH9kP5kfUvPzQ/ND80PzQ/Mh/lh+aH5ofmR/Zf
+ZH5KT80PzQ/ND80PzJf5Yfmh+aH5kf2e/mR+Ss/ND80P/L5WX5ofmh+aH5o
fmh+aH5ofmh+5PXLj97L8t++/7Geqx+9N2l+9Me3aX5ofmh+9Ofv0vzQ/ND8
0PzQ/ND80Pzo779P80PzQ/ND80PzQ/ND80PzQ/ND80PzQ/ND80PzQ/ND80Pz
Q/ND80PzQ/ND80PzQ/ND80PzQ/ND8yPzUX5ofmh+aH5kvssPzQ/Nj74+a/ND
80Pzo8/naV2/8kPzQ/ND80PzI+tbfmh+aH5ofmQ/lB9Z//JD80PzQ/ND8yPz
UX5ofmh+aH5k/5UfmZ/yQ/ND80PzQ/Mj81V+aH5ofmh+ZL+XH5m/8kPzQ/Mj
n5/lh+aH5ofmh+aH5ofmh+aH5kdev/zovSz/1msOf3L86L1J86M/vk3zQ/ND
86M/f5fmh+aH5ofmh+aH5ofmR3//fZofmh+aH5ofmh+aH5ofmh+aH5ofmh+a
H5ofmh+aH5ofmh+aH5ofmh+aH5ofmh+aH5ofmh+aH5ofmY/yQ/ND80PzI/Nd
fmh+aH709VmbH5ofmh99Pk/r+pUfmh+aH5ofmh9Z3/JD80PzQ/Mj+6H8yPqX
H5ofmh+aH5ofmY/yQ/ND80PzI/uv/Mj8lB+aH5ofmh+aH5mv8kPzQ/ND8yP7
vfzI/JUfmh+aH/n8LD80PzQ/ND80PzQ/ND80PzQ/8vrlR+9l+dmvv+fqR+9N
mh/98W2aH5ofmh/9+bs0PzQ/ND80PzQ/ND80P/r779P80PzQ/ND80PzQ/ND8
0PzQ/ND80PzQ/ND80PzQ/ND80PzQ/ND80PzQ/ND80PzQ/ND80PzQ/ND8yHyU
H5ofmh+aH5nv8kPzQ/Ojr8/a/ND80Pzo83la16/80PzQ/ND80PzI+pYfmh+a
H5of2Q/lR9a//ND80PzQ/ND8yHyUH5ofmh+aH9l/5Ufmp/zQ/ND80PzQ/Mh8
lR+aH5ofmh/Z7+VH5q/80PzQ/MjnZ/mh+aH5ofmh+aH5ofmh+aH5kdcvP3ov
y998H7tP/JT40XuT5kd/fJvmh+aH5kd//i7ND80PzQ/ND80PzQ/Nj/7++zQ/
ND80PzQ/ND80PzQ/ND80PzQ/ND80PzQ/ND80PzQ/ND80PzQ/ND80PzQ/ND80
PzQ/ND80PzQ/Mh/lh+aH5ofmR+a7/ND80Pzo67M2PzQ/ND/6fJ7W9Ss/ND80
PzQ/ND+yvuWH5ofmh+ZH9kP5kfUvPzQ/ND80PzQ/Mh/lh+aH5ofmR/Zf+ZH5
KT80PzQ/ND80PzJf5Yfmh+aH5kf2e/mR+Ss/ND80P/L5WX5ofmh+aH5ofmh+
aH5ofmh+5PXLj97L8vtfg7v60XuT5kd/fJvmh+aH5kd//i7ND80PzQ/ND80P
zQ/Nj/7++zQ/ND80PzQ/ND80PzQ/ND80PzQ/ND80PzQ/ND80PzQ/ND80PzQ/
ND80PzQ/ND80PzQ/ND80PzQ/Mh/lh+aH5ofmR+a7/ND80Pzo67M2PzQ/ND/6
fJ7W9Ss/ND80PzQ/ND+yvuWH5ofmh+ZH9kP5kfUvPzQ/ND80PzQ/Mh/lh+aH
5ofmR/Zf+ZH5KT80PzQ/ND80PzJf5Yfmh+aH5kf2e/mR+Ss/ND80P/L5WX5o
fmh+aH5ofmh+aH5ofmh+5PXLj97L8s2vufmi+NF7k+ZHf3yb5ofmh+ZHf/4u
zQ/ND80PzQ/ND80PzY/+/vs0PzQ/ND80PzQ/ND80PzQ/ND80PzQ/ND80PzQ/
ND80PzQ/ND80PzQ/ND80PzQ/ND80PzQ/ND80PzIf5Yfmh+aH5kfmu/zQ/ND8
6OuzNj80PzQ/+nye1vUrPzQ/ND80PzQ/sr7lh+aH5ofmR/ZD+ZH1Lz80PzQ/
ND80PzIf5Yfmh+aH5kf2X/mR+Sk/ND80PzQ/ND8yX+WH5ofmh+ZH9nv5kfkr
PzQ/ND/y+Vl+aH5ofmh+aH5ofmh+aH5ofuT1y4/ey/Ilrz/X6kfvTZof/fFt
mh+aH5of/fm7ND80PzQ/ND80PzQ/ND/6++/T/ND80PzQ/ND80PzQ/ND80PzQ
/ND80PzQ/ND80PzQ/ND80PzQ/ND80PzQ/ND80PzQ/ND80PzQ/Mh8lB+aH5of
mh+Z7/JD80Pzo6/P2vzQ/ND86PN5Wtev/ND80PzQ/ND8yPqWH5ofmh+aH9kP
5UfWv/zQ/ND80PzQ/Mh8lB+aH5ofmh/Zf+VH5qf80PzQ/ND80PzIfJUfmh+a
H5of2e/lR+av/ND80PzI52f5ofmh+aH5ofmh+aH5ofmh+ZHXLz96L8vx9bG0
+tF7k+ZHf3yb5ofmh+ZHf/4uzQ/ND80PzQ/ND80PzY/+/vs0PzQ/ND80PzQ/
ND80PzQ/ND80PzQ/ND80PzQ/ND80PzQ/ND80PzQ/ND80PzQ/ND80PzQ/ND80
PzIf5Yfmh+aH5kfmu/zQ/ND86OuzNj80PzQ/+nye1vUrPzQ/ND80PzQ/sr7l
h+aH5ofmR/ZD+ZH1Lz80PzQ/ND80PzIf5Yfmh+aH5kf2X/mR+Sk/ND80PzQ/
ND8yX+WH5ofmh+ZH9nv5kfkrPzQ/ND/y+Vl+aH5ofmh+aH5ofmh+aH5ofuT1
y4/ey/J73v/Zf+FPjR+9N2l+9Me3aX5ofmh+9Ofv0vzQ/ND80PzQ/ND80Pzo
779P80PzQ/ND80PzQ/ND80PzQ/ND80PzQ/ND80PzQ/ND80PzQ/ND80PzQ/ND
80PzQ/ND80PzQ/ND8yPzUX5ofmh+aH5kvssPzQ/Nj74+a/ND80Pzo8/naV2/
8kPzQ/ND80PzI+tbfmh+aH5ofmQ/lB9Z//JD80PzQ/ND8yPzUX5ofmh+aH5k
/5UfmZ/yQ/ND80PzQ/Mj81V+aH5ofmh+ZL+XH5m/8kPzQ/Mjn5/lh+aH5ofm
h+aH5ofmh+aH5kdev/zovSy/4rXOqx+9N2l+9Me3aX5ofmh+9Ofv0vzQ/ND8
0PzQ/ND80Pzo779P80PzQ/ND80PzQ/ND80PzQ/ND80PzQ/ND80PzQ/ND80Pz
Q/ND80PzQ/ND80PzQ/ND80PzQ/ND8yPzUX5ofmh+aH5kvssPzQ/Nj74+a/ND
80Pzo8/naV2/8kPzQ/ND80PzI+tbfmh+aH5ofmQ/lB9Z//JD80PzQ/ND8yPz
UX5ofmh+aH5k/5UfmZ/yQ/ND80PzQ/Mj81V+aH5ofmh+ZL+XH5m/8kPzQ/Mj
n5/lh+aH5ofmh+aH5ofmh+aH5kdev/zovSw/6bWPPho/em/S/OiPb9P80PzQ
/OjP36X5ofmh+aH5ofmh+aH50d9/n+aH5ofmh+aH5ofmh+aH5ofmh+aH5ofm
h+aH5ofmh+aH5ofmh+aH5ofmh+aH5ofmh+aH5ofmh+ZH5qP80PzQ/ND8yHyX
H5ofmh99fdbmh+aH5kefz9O6fuWH5ofmh+aH5kfWt/zQ/ND80PzIfig/sv7l
h+aH5ofmh+ZH5qP80PzQ/ND8yP4rPzI/5Yfmh+aH5ofmR+ar/ND80PzQ/Mh+
Lz8yf+WH5ofmRz4/yw/ND80PzQ/ND80PzQ/ND82PvH750XtZ/tyHqf/K71j9
6L1J86M/vk3zQ/ND86M/f5fmh+aH5ofmh+aH5ofmR3//fZofmh+aH5ofmh+a
H5ofmh+aH5ofmh+aH5ofmh+aH5ofmh+aH5ofmh+aH5ofmh+aH5ofmh+aH5of
mY/yQ/ND80PzI/Ndfmh+aH709VmbH5ofmh99Pk/r+pUfmh+aH5ofmh9Z3/JD
80PzQ/Mj+6H8yPqXH5ofmh+aH5ofmY/yQ/ND80PzI/uv/Mj8lB+aH5ofmh+a
H5mv8kPzQ/ND8yP7vfzI/JUfmh+aH/n8LD80PzQ/ND80PzQ/ND80PzQ/8vrl
R+9l+Y9fHwurH703aX70x7dpfmh+aH705+/S/ND80PzQ/ND80PzQ/Ojvv0/z
Q/ND80PzQ/ND80PzQ/ND80PzQ/ND80PzQ/ND80PzQ/ND80PzQ/ND80PzQ/ND
80PzQ/ND80PzI/NRfmh+aH5ofmS+yw/ND82Pvj5r80PzQ/Ojz+dpXb/yQ/ND
80PzQ/Mj61t+aH5ofmh+ZD+UH1n/8kPzQ/ND80PzI/NRfmh+aH5ofmT/lR+Z
n/JD80PzQ/ND8yPzVX5ofmh+aH5kv5cfmb/yQ/ND8yOfn+WH5ofmh+aH5ofm
h+aH5ofmR16//Oi9LL/ktS4/LX703qT50R/fpvmh+aH50Z+/S/ND80PzQ/ND
80PzQ/Ojv/8+zQ/ND80PzQ/ND80PzQ/ND80PzQ/ND80PzQ/ND80PzQ/ND80P
zQ/ND80PzQ/ND80PzQ/ND80PzY/MR/mh+aH5ofmR+S4/ND80P/r6rM0PzQ/N
jz6fp3X9yg/ND80PzQ/Nj6xv+aH5ofmh+ZH9UH5k/csPzQ/ND80PzY/MR/mh
+aH5ofmR/Vd+ZH7KD80PzQ/ND82PzFf5ofmh+aH5kf1efmT+yg/ND82PfH6W
H5ofmh+aH5ofmh+aH5ofmh95/fKj97L8mN/zOR92zupH702aH/3xbZofmh+a
H/35uzQ/ND80PzQ/ND80PzQ/+vvv0/zQ/ND80PzQ/ND80PzQ/ND80PzQ/ND8
0PzQ/ND80PzQ/ND80PzQ/ND80PzQ/ND80PzQ/ND80PzIfJQfmh+aH5ofme/y
Q/ND86Ovz9r80PzQ/OjzeVrXr/zQ/ND80PzQ/Mj6lh+aH5ofmh/ZD+VH1r/8
0PzQ/ND80PzIfJQfmh+aH5of2X/lR+an/ND80PzQ/ND8yHyVH5ofmh+aH9nv
5Ufmr/zQ/ND8yOdn+aH5ofmh+aH5ofmh+aH5ofmR1y8/ei/Ln/zE+z/sF8eP
3ps0P/rj2zQ/ND80P/rzd2l+aH5ofmh+aH5ofmh+9Pffp/mh+aH5ofmh+aH5
ofmh+aH5ofmh+aH5ofmh+aH5ofmh+aH5ofmh+aH5ofmh+aH5ofmh+aH5ofmR
+Sg/ND80PzQ/Mt/lh+aH5kdfn7X5ofmh+dHn87SuX/mh+aH5ofmh+ZH1LT80
PzQ/ND+yH8qPrH/5ofmh+aH5ofmR+Sg/ND80PzQ/sv/Kj8xP+aH5ofmh+aH5
kfkqPzQ/ND80P7Lfy4/MX/mh+aH5kc/P8kPzQ/ND80PzQ/ND80PzQ/Mjr19+
9F6W73rN+epH702aH/3xbZofmh+aH/35uzQ/ND80PzQ/ND80PzQ/+vvv0/zQ
/ND80PzQ/ND80PzQ/ND80PzQ/ND80PzQ/ND80PzQ/ND80PzQ/ND80PzQ/ND8
0PzQ/ND80PzIfJQfmh+aH5ofme/yQ/ND86Ovz9r80PzQ/OjzeVrXr/zQ/ND8
0PzQ/Mj6lh+aH5ofmh/ZD+VH1r/80PzQ/ND80PzIfJQfmh+aH5of2X/lR+an
/ND80PzQ/ND8yHyVH5ofmh+aH9nv5Ufmr/zQ/ND8yOdn+aH5ofmh+aH5ofmh
+aH5ofmR1y8/ei/LL/rsIMeP3ps0P/rj2zQ/ND80P/rzd2l+aH5ofmh+aH5o
fmh+9Pffp/mh+aH5ofmh+aH5ofmh+aH5ofmh+aH5ofmh+aH5ofmh+aH5ofmh
+aH5ofmh+aH5ofmh+aH5ofmR+Sg/ND80PzQ/Mt/lh+aH5kdfn7X5ofmh+dHn
87SuX/mh+aH5ofmh+ZH1LT80PzQ/ND+yH8qPrH/5ofmh+aH5ofmR+Sg/ND80
PzQ/sv/Kj8xP+aH5ofmh+aH5kfkqPzQ/ND80P7Lfy4/MX/mh+aH5kc/P8kPz
Q/ND80PzQ/ND80PzQ/Mjr19+9F6Wz3zB+8b66fGj9ybNj/74Ns0PzQ/Nj/78
XZofmh+aH5ofmh+aH5of/f33aX5ofmh+aH5ofmh+aH5ofmh+aH5ofmh+aH5o
fmh+aH5ofmh+aH5ofmh+aH5ofmh+aH5ofmh+aH5kPsoPzQ/ND82PzHf5ofmh
+dHXZ21+aH5ofvT5PK3rV35ofmh+aH5ofmR9yw/ND80PzY/sh/Ij619+aH5o
fmh+aH5kPsoPzQ/ND82P7L/yI/NTfmh+aH5ofmh+ZL7KD80PzQ/Nj+z38iPz
V35ofmh+5POz/ND80PzQ/ND80PzQ/ND80PzI65cfvZflk3/4/T+rH703aX70
x7dpfmh+aH705+/S/ND80PzQ/ND80PzQ/Ojvv0/zQ/ND80PzQ/ND80PzQ/ND
80PzQ/ND80PzQ/ND80PzQ/ND80PzQ/ND80PzQ/ND80PzQ/ND80PzI/NRfmh+
aH5ofmS+yw/ND82Pvj5r80PzQ/Ojz+dpXb/yQ/ND80PzQ/Mj61t+aH5ofmh+
ZD+UH1n/8kPzQ/ND80PzI/NRfmh+aH5ofmT/lR+Zn/JD80PzQ/ND8yPzVX5o
fmh+aH5kv5cfmb/yQ/ND8yOfn+WH5ofmh+aH5ofmh+aH5ofmR16//Oi9LL/p
NZc/I3703qT50R/fpvmh+aH50Z+/S/ND80PzQ/ND80PzQ/Ojv/8+zQ/ND80P
zQ/ND80PzQ/ND80PzQ/ND80PzQ/ND80PzQ/ND80PzQ/ND80PzQ/ND80PzQ/N
D80PzY/MR/mh+aH5ofmR+S4/ND80P/r6rM0PzQ/Njz6fp3X9yg/ND80PzQ/N
j6xv+aH5ofmh+ZH9UH5k/csPzQ/ND80PzY/MR/mh+aH5ofmR/Vd+ZH7KD80P
zQ/ND82PzFf5ofmh+aH5kf1efmT+yg/ND82PfH6WH5ofmh+aH5ofmh+aH5of
mh95/fKj97L8k6+/9+pH702aH/3xbZofmh+aH/35uzQ/ND80PzQ/ND80PzQ/
+vvv0/zQ/ND80PzQ/ND80PzQ/ND80PzQ/ND80PzQ/ND80PzQ/ND80PzQ/ND8
0PzQ/ND80PzQ/ND80PzIfJQfmh+aH5ofme/yQ/ND86Ovz9r80PzQ/OjzeVrX
r/zQ/ND80PzQ/Mj6lh+aH5ofmh/ZD+VH1r/80PzQ/ND80PzIfJQfmh+aH5of
2X/lR+an/ND80PzQ/ND8yHyVH5ofmh+aH9nv5Ufmr/zQ/ND8yOdn+aH5ofmh
+aH5ofmh+aH5ofmR1y8/ei/L3/mwKp/59OpH702aH/3xbZofmh+aH/35uzQ/
ND80PzQ/ND80PzQ/+vvv0/zQ/ND80PzQ/ND80PzQ/ND80PzQ/ND80PzQ/ND8
0PzQ/ND80PzQ/ND80PzQ/ND80PzQ/ND80PzIfJQfmh+aH5ofme/yQ/ND86Ov
z9r80PzQ/OjzeVrXr/zQ/ND80PzQ/Mj6lh+aH5ofmh/ZD+VH1r/80PzQ/ND8
0PzIfJQfmh+aH5of2X/lR+an/ND80PzQ/ND8yHyVH5ofmh+aH9nv5Ufmr/zQ
/ND8yOdn+aH5ofmh+aH5ofmh+aH5ofmR1y8/ei/LH/r4+1/0S+JH702aH/3x
bZofmh+aH/35uzQ/ND80PzQ/ND80PzQ/+vvv0/zQ/ND80PzQ/ND80PzQ/ND8
0PzQ/ND80PzQ/ND80PzQ/ND80PzQ/ND80PzQ/ND80PzQ/ND80PzIfJQfmh+a
H5ofme/yQ/ND86Ovz9r80PzQ/OjzeVrXr/zQ/ND80PzQ/Mj6lh+aH5ofmh/Z
D+VH1r/80PzQ/ND80PzIfJQfmh+aH5of2X/lR+an/ND80PzQ/ND8yHyVH5of
mh+aH9nv5Ufmr/zQ/ND8yOdn+aH5ofmh+aH5ofmh+aH5ofmR1y8/ei/Lr3/N
0epH702aH/3xbZofmh+aH/35uzQ/ND80PzQ/ND80PzQ/+vvv0/zQ/ND80PzQ
/ND80PzQ/ND80PzQ/ND80PzQ/ND80PzQ/ND80PzQ/ND80PzQ/ND80PzQ/ND8
0PzIfJQfmh+aH5ofme/yQ/ND86Ovz9r80PzQ/OjzeVrXr/zQ/ND80PzQ/Mj6
lh+aH5ofmh/ZD+VH1r/80PzQ/ND80PzIfJQfmh+aH5of2X/lR+an/ND80PzQ
/ND8yHyVH5ofmh+aH9nv5Ufmr/zQ/ND8yOdn+aH5ofmh+aH5ofmh+aH5ofmR
1y8/ei/LP/76c/5j8aP3Js2P/vg2zQ/ND82P/vxdmh+aH5ofmh+aH5ofmh/9
/fdpfmh+aH5ofmh+aH5ofmh+aH5ofmh+aH5ofmh+aH5ofmh+aH5ofmh+aH5o
fmh+aH5ofmh+aH5ofmQ+yg/ND80PzY/Md/mh+aH50ddnbX5ofmh+9Pk8retX
fmh+aH5ofmh+ZH3LD80PzQ/Nj+yH8iPrX35ofmh+aH5ofmQ+yg/ND80PzY/s
v/Ij81N+aH5ofmh+aH5kvsoPzQ/ND82P7PfyI/NXfmh+aH7k87P80PzQ/ND8
0PzQ/ND80PzQ/Mjrlx+9l+XT7y/7XasfvTdpfvTHt2l+aH5ofvTn79L80PzQ
/ND80PzQ/ND86O+/T/ND80PzQ/ND80PzQ/ND80PzQ/ND80PzQ/ND80PzQ/ND
80PzQ/ND80PzQ/ND80PzQ/ND80PzQ/Mj81F+aH5ofmh+ZL7LD80PzY++Pmvz
Q/ND86PP52ldv/JD80PzQ/ND8yPrW35ofmh+aH5kP5QfWf/yQ/ND80PzQ/Mj
81F+aH5ofmh+ZP+VH5mf8kPzQ/ND80PzI/NVfmh+aH5ofmS/lx+Zv/JD80Pz
I5+f5Yfmh+aH5ofmh+aH5ofmh+ZHXr/86L0sv+97v+8TX/aDqx+9N2l+9Me3
aX5ofmh+9Ofv0vzQ/ND80PzQ/ND80Pzo779P80PzQ/ND80PzQ/ND80PzQ/ND
80PzQ/ND80PzQ/ND80PzQ/ND80PzQ/ND80PzQ/ND80PzQ/ND8yPzUX5ofmh+
aH5kvssPzQ/Nj74+a/ND80Pzo8/naV2/8kPzQ/ND80PzI+tbfmh+aH5ofmQ/
lB9Z//JD80PzQ/ND8yPzUX5ofmh+aH5k/5UfmZ/yQ/ND80PzQ/Mj81V+aH5o
fmh+ZL+XH5m/8kPzQ/Mjn5/lh+aH5ofmh+aH5ofmh+aH5kdev/zovSzf+Fr3
L40fvTdpfvTHt2l+aH5ofvTn79L80PzQ/ND80PzQ/ND86O+/T/ND80PzQ/ND
80PzQ/ND80PzQ/ND80PzQ/ND80PzQ/ND80PzQ/ND80PzQ/ND80PzQ/ND80Pz
Q/Mj81F+aH5ofmh+ZL7LD80PzY++PmvzQ/ND86PP52ldv/JD80PzQ/ND8yPr
W35ofmh+aH5kP5QfWf/yQ/ND80PzQ/Mj81F+aH5ofmh+ZP+VH5mf8kPzQ/ND
80PzI/NVfmh+aH5ofmS/lx+Zv/JD80PzI5+f5Yfmh+aH5ofmh+aH5ofmh+ZH
Xr/86L0sH30fm0+ufvTepPnRH9+m+aH5ofnRn79L80PzQ/ND80PzQ/ND86O/
/z7ND80PzQ/ND80PzQ/ND80PzQ/ND80PzQ/ND80PzQ/ND80PzQ/ND80PzQ/N
D80PzQ/ND80PzQ/Nj8xH+aH5ofmh+ZH5Lj80PzQ/+vqszQ/ND82PPp+ndf3K
D80PzQ/ND82PrG/5ofmh+aH5kf1QfmT9yw/ND80PzQ/Nj8xH+aH5ofmh+ZH9
V35kfsoPzQ/ND80PzY/MV/mh+aH5ofmR/V5+ZP7KD80PzY98fpYfmh+aH5of
mh+aH5ofmh+aH3n98qP3svyl97/Gl3wsfvTepPnRH9+m+aH5ofnRn79L80Pz
Q/ND80PzQ/ND86O//z7ND80PzQ/ND80PzQ/ND80PzQ/ND80PzQ/ND80PzQ/N
D80PzQ/ND80PzQ/ND80PzQ/ND80PzQ/Nj8xH+aH5ofmh+ZH5Lj80PzQ/+vqs
zQ/ND82PPp+ndf3KD80PzQ/ND82PrG/5ofmh+aH5kf1QfmT9yw/ND80PzQ/N
j8xH+aH5ofmh+ZH9V35kfsoPzQ/ND80PzY/MV/mh+aH5ofmR/V5+ZP7KD80P
zY98fpYfmh+aH5ofmh+aH5ofmh+aH3n98qP3svzn78dBvmf1o/cmzY/++DbN
D80PzY/+/F2aH5ofmh+aH5ofmh+aH/3992l+aH5ofmh+aH5ofmh+aH5ofmh+
aH5ofmh+aH5ofmh+aH5ofmh+aH5ofmh+aH5ofmh+aH5ofmh+ZD7KD80PzQ/N
j8x3+aH5ofnR12dtfmh+aH70+Tyt61d+aH5ofmh+aH5kfcsPzQ/ND82P7Ify
I+tffmh+aH5ofmh+ZD7KD80PzQ/Nj+y/8iPzU35ofmh+aH5ofmS+yg/ND80P
zY/s9/Ij81d+aH5ofuTzs/zQ/ND80PzQ/ND80PzQ/ND8yOuXH72X5etf67T6
0XuT5kd/fJvmh+aH5kd//i7ND80PzQ/ND80PzQ/Nj/7++zQ/ND80PzQ/ND80
PzQ/ND80PzQ/ND80PzQ/ND80PzQ/ND80PzQ/ND80PzQ/ND80PzQ/ND80PzQ/
Mh/lh+aH5ofmR+a7/ND80Pzo67M2PzQ/ND/6fJ7W9Ss/ND80PzQ/ND+yvuWH
5ofmh+ZH9kP5kfUvPzQ/9P9fZh3jem5WYRz+dsASIBDRUI1okSJWQkGWABIb
QFkARkDvht5Nencsgc4FHcpICIkmUub+533eT+dyu18c23fmnM/P8EPzQ/Oj
+xE/ND80PzQ/ev7iR/cnfmh+aH5ofmh+dL/ih+aH5ofmR897/Oj+xQ/ND82P
fj/jh+aH5ofmh+aH5ofmh+aH5kefHz9mr/XH1zn5Sf2YfbT5Ma+fbX5ofmh+
zPuvNj80PzQ/ND80PzQ/ND/m++82PzQ/ND80PzQ/ND80PzQ/ND80PzQ/ND80
PzQ/ND80PzQ/ND80PzQ/ND80PzQ/ND80PzQ/ND80P7of8UPzQ/ND86P7HT80
PzQ/5nx280PzQ/Nj7uez5xc/ND80PzQ/ND863/ih+aH5ofnR8xA/Ov/4ofmh
+aH5ofnR/Ygfmh+aH5ofPX/xo/sTPzQ/ND80PzQ/ul/xQ/ND80Pzo+c9fnT/
4ofmh+ZHv5/xQ/ND80PzQ/ND80PzQ/ND86PPjx+z1/rta6+2H7OPNj/m9bPN
D80PzY95/9Xmh+aH5ofmh+aH5ofmx3z/3eaH5ofmh+aH5ofmh+aH5ofmh+aH
5ofmh+aH5ofmh+aH5ofmh+aH5ofmh+aH5ofmh+aH5ofmh+ZH9yN+aH5ofmh+
dL/jh+aH5secz25+aH5ofsz9fPb84ofmh+aH5ofmR+cbPzQ/ND80P3oe4kfn
Hz80PzQ/ND80P7of8UPzQ/ND86PnL350f+KH5ofmh+aH5kf3K35ofmh+aH70
vMeP7l/80PzQ/Oj3M35ofmh+aH5ofmh+aH5ofmh+9PnxY/Zav37NYfsx+2jz
Y14/2/zQ/ND8mPdfbX5ofmh+aH5ofmh+aH7M999tfmh+aH5ofmh+aH5ofmh+
aH5ofmh+aH5ofmh+aH5ofmh+aH5ofmh+aH5ofmh+aH5ofmh+aH5ofnQ/4ofm
h+aH5kf3O35ofmh+zPns5ofmh+bH3M9nzy9+aH5ofmh+aH50vvFD80PzQ/Oj
5yF+dP7xQ/ND80PzQ/Oj+xE/ND80PzQ/ev7iR/cnfmh+aH5ofmh+dL/ih+aH
5ofmR897/Oj+xQ/ND82Pfj/jh+aH5ofmh+aH5ofmh+aH5kefHz9mr/Xj1++9
/Zh9tPkxr59tfmh+aH7M+682PzQ/ND80PzQ/ND80P+b77zY/ND80PzQ/ND80
PzQ/ND80PzQ/ND80PzQ/ND80PzQ/ND80PzQ/ND80PzQ/ND80PzQ/ND80PzQ/
uh/xQ/ND80Pzo/sdPzQ/ND/mfHbzQ/ND82Pu57PnFz80PzQ/ND80Pzrf+KH5
ofmh+dHzED86//ih+aH5ofmh+dH9iB+aH5ofmh89f/Gj+xM/ND80PzQ/ND+6
X/FD80PzQ/Oj5z1+dP/ih+aH5ke/n/FD80PzQ/ND80PzQ/ND80Pzo8+PH7PX
+v5tLP/bfsw+2vyY1882PzQ/ND/m/VebH5ofmh+aH5ofmh+aH/P9d5sfmh+a
H5ofmh+aH5ofmh+aH5ofmh+aH5ofmh+aH5ofmh+aH5ofmh+aH5ofmh+aH5of
mh+aH5of3Y/4ofmh+aH50f2OH5ofmh9zPrv5ofmh+TH389nzix+aH5ofmh+a
H51v/ND80PzQ/Oh5iB+df/zQ/ND80PzQ/Oh+xA/ND80PzY+ev/jR/Ykfmh+a
H5ofmh/dr/ih+aH5ofnR8x4/un/xQ/ND86Pfz/ih+aH5ofmh+aH5ofmh+aH5
0efHj9lr/fPTVvz3F1/Uj9lHmx/z+tnmh+aH5se8/2rzQ/ND80PzQ/ND80Pz
Y77/bvND80PzQ/ND80PzQ/ND80PzQ/ND80PzQ/ND80PzQ/ND80PzQ/ND80Pz
Q/ND80PzQ/ND80PzQ/Oj+xE/ND80PzQ/ut/xQ/ND82POZzc/ND80P+Z+Pnt+
8UPzQ/ND80Pzo/ONH5ofmh+aHz0P8aPzjx+aH5ofmh+aH92P+KH5ofmh+dHz
Fz+6P/FD80PzQ/ND86P7FT80PzQ/ND963uNH9y9+aH5ofvT7GT80PzQ/ND80
PzQ/ND80PzQ/+vz4MXutb9/+t99sP2YfbX7M62ebH5ofmh/z/qvND80PzQ/N
D80PzQ/Nj/n+u80PzQ/ND80PzQ/ND80PzQ/ND80PzQ/ND80PzQ/ND80PzQ/N
D80PzQ/ND80PzQ/ND80PzQ/ND82P7kf80PzQ/ND86H7HD80PzY85n9380PzQ
/Jj7+ez5xQ/ND80PzQ/Nj843fmh+aH5ofvQ8xI/OP35ofmh+aH5ofnQ/4ofm
h+aH5kfPX/zo/sQPzQ/ND80PzY/uV/zQ/ND80PzoeY8f3b/4ofmh+dHvZ/zQ
/ND80PzQ/ND80PzQ/ND86PPjx+y1/vK2hn/afsw+2vyY1882PzQ/ND/m/Veb
H5ofmh+aH5ofmh+aH/P9d5sfmh+aH5ofmh+aH5ofmh+aH5ofmh+aH5ofmh+a
H5ofmh+aH5ofmh+aH5ofmh+aH5ofmh+aH5of3Y/4ofmh+aH50f2OH5ofmh9z
Prv5ofmh+TH389nzix+aH5ofmh+aH51v/ND80PzQ/Oh5iB+df/zQ/ND80PzQ
/Oh+xA/ND80PzY+ev/jR/Ykfmh+aH5ofmh/dr/ih+aH5ofnR8x4/un/xQ/ND
86Pfz/ih+aH5ofmh+aH5ofmh+aH50efHj9lr/f6119uP2UebH/P62eaH5ofm
x7z/avND80PzQ/ND80PzQ/Njvv9u80PzQ/ND80PzQ/ND80PzQ/ND80PzQ/ND
80PzQ/ND80PzQ/ND80PzQ/ND80PzQ/ND80PzQ/ND86P7ET80PzQ/ND+63/FD
80PzY85nNz80PzQ/5n4+e37xQ/ND80PzQ/Oj840fmh+aH5ofPQ/xo/OPH5of
mh+aH5of3Y/4ofmh+aH50fMXP7o/8UPzQ/ND80Pzo/sVPzQ/ND80P3re40f3
L35ofmh+9PsZPzQ/ND80PzQ/ND80PzQ/ND/6/Pgxe63P34ntx+yjzY95/Wzz
Q/ND82Pef7X5ofmh+aH5ofmh+aH5Md9/t/mh+aH5ofmh+aH5ofmh+aH5ofmh
+aH5ofmh+aH5ofmh+aH5ofmh+aH5ofmh+aH5ofmh+aH5ofnR/Ygfmh+aH5of
3e/4ofmh+THns5sfmh+aH3M/nz2/+KH5ofmh+aH50fnGD80PzQ/Nj56H+NH5
xw/ND80PzQ/Nj+5H/ND80PzQ/Oj5ix/dn/ih+aH5ofmh+dH9ih+aH5ofmh89
7/Gj+xc/ND80P/r9jB+aH5ofmh+aH5ofmh+aH5offX78mL3Wh9ff20/rx+yj
zY95/WzzQ/ND82Pef7X5ofmh+aH5ofmh+aH5Md9/t/mh+aH5ofmh+aH5ofmh
+aH5ofmh+aH5ofmh+aH5ofmh+aH5ofmh+aH5ofmh+aH5ofmh+aH5ofnR/Ygf
mh+aH5of3e/4ofmh+THns5sfmh+aH3M/nz2/+KH5ofmh+aH50fnGD80PzQ/N
j56H+NH5xw/ND80PzQ/Nj+5H/ND80PzQ/Oj5ix/dn/ih+aH5ofmh+dH9ih+a
H5ofmh897/Gj+xc/ND80P/r9jB+aH5ofmh+aH5ofmh+aH5offX78mL3Wj17n
avsx+2jzY14/2/zQ/ND8mPdfbX5ofmh+aH5ofmh+aH7M999tfmh+aH5ofmh+
aH5ofmh+aH5ofmh+aH5ofmh+aH5ofmh+aH5ofmh+aH5ofmh+aH5ofmh+aH5o
fnQ/4ofmh+aH5kf3O35ofmh+zPns5ofmh+bH3M9nzy9+aH5ofmh+aH50vvFD
80PzQ/Oj5yF+dP7xQ/ND80PzQ/Oj+xE/ND80PzQ/ev7iR/cnfmh+aH5ofmh+
dL/ih+aH5ofmR897/Oj+xQ/ND82Pfj/jh+aH5ofmh+aH5ofmh+aH5kefHz9m
r/XvtzX48/Zj9tHmx7x+tvmh+aH5Me+/2vzQ/ND80PzQ/ND80PyY77/b/ND8
0PzQ/ND80PzQ/ND80PzQ/ND80PzQ/ND80PzQ/ND80PzQ/ND80PzQ/ND80PzQ
/ND80PzQ/Oh+xA/ND80PzY/ud/zQ/ND8mPPZzQ/ND82PuZ/Pnl/80PzQ/ND8
0PzofOOH5ofmh+ZHz0P86Pzjh+aH5ofmh+ZH9yN+aH5ofmh+9PzFj+5P/ND8
0PzQ/ND86H7FD80PzQ/Nj573+NH9ix+aH5of/X7GD80PzQ/ND80PzQ/ND80P
zY8+P37MXusfP3/7i9h+zD7a/JjXzzY/ND80P+b9V5sfmh+aH5ofmh+aH5of
8/13mx+aH5ofmh+aH5ofmh+aH5ofmh+aH5ofmh+aH5ofmh+aH5ofmh+aH5of
mh+aH5ofmh+aH5ofmh/dj/ih+aH5ofnR/Y4fmh+aH3M+u/mh+aH5Mffz2fOL
H5ofmh+aH5ofnW/80PzQ/ND86HmIH51//ND80PzQ/ND86H7ED80PzQ/Nj56/
+NH9iR+aH5ofmh+aH92v+KH5ofmh+dHzHj+6f/FD80Pzo9/P+KH5ofmh+aH5
ofmh+aH5ofnR58eP2Wv9/e3X+n77Mfto82NeP9v80PzQ/Jj3X21+aH5ofmh+
aH5ofmh+zPffbX5ofmh+aH5ofmh+aH5ofmh+aH5ofmh+aH5ofmh+aH5ofmh+
aH5ofmh+aH5ofmh+aH5ofmh+aH50P+KH5ofmh+ZH9zt+aH5ofsz57OaH5ofm
x9zPZ88vfmh+aH5ofmh+dL7xQ/ND80Pzo+chfnT+8UPzQ/ND80Pzo/sRPzQ/
ND80P3r+4kf3J35ofmh+aH5ofnS/4ofmh+aH5kfPe/zo/sUPzQ/Nj34/44fm
h+aH5ofmh+aH5ofmh+ZHnx8/Zq/1zdvaf/hZ/Zh9tPkxr59tfmh+aH7M+682
PzQ/ND80PzQ/ND80P+b77zY/ND80PzQ/ND80PzQ/ND80PzQ/ND80PzQ/ND80
PzQ/ND80PzQ/ND80PzQ/ND80PzQ/ND80PzQ/uh/xQ/ND80Pzo/sdPzQ/ND/m
fHbzQ/ND82Pu57PnFz80PzQ/ND80Pzrf+KH5ofmh+dHzED86//ih+aH5ofmh
+dH9iB+aH5ofmh89f/Gj+xM/ND80PzQ/ND+6X/FD80PzQ/Oj5z1+dP/ih+aH
5ke/n/FD80PzQ/ND80PzQ/ND80Pzo8+PH7PX+vxd3X7MPtr8mNfPNj80PzQ/
5v1Xmx+aH5ofmh+aH5ofmh/z/XebH5ofmh+aH5ofmh+aH5ofmh+aH5ofmh+a
H5ofmh+aH5ofmh+aH5ofmh+aH5ofmh+aH5ofmh+aH92P+KH5ofmh+dH9jh+a
H5ofcz67+aH5ofkx9/PZ84sfmh+aH5ofmh+db/zQ/ND80PzoeYgfnX/80PzQ
/ND80PzofsQPzQ/ND82Pnr/40f2JH5ofmh+aH5of3a/4ofmh+aH50fMeP7p/
8UPzQ/Oj38/4ofmh+aH5ofmh+aH5ofmh+dHnx4/Za73G8Nftx+yjzY95/Wzz
Q/ND82Pef7X5ofmh+aH5ofmh+aH5Md9/t/mh+aH5ofmh+aH5ofmh+aH5ofmh
+aH5ofmh+aH5ofmh+aH5ofmh+aH5ofmh+aH5ofmh+aH5ofnR/Ygfmh+aH5of
3e/4ofmh+THns5sfmh+aH3M/nz2/+KH5ofmh+aH50fnGD80PzQ/Nj56H+NH5
xw/ND80PzQ/Nj+5H/ND80PzQ/Oj5ix/dn/ih+aH5ofmh+dH9ih+aH5ofmh89
7/Gj+xc/ND80P/r9jB+aH5ofmh+aH5ofmh+aH5offX78mL3WF68/5/Zj9tHm
x7x+tvmh+aH5Me+/2vzQ/ND80PzQ/ND80PyY77/b/ND80PzQ/ND80PzQ/ND8
0PzQ/ND80PzQ/ND80PzQ/ND80PzQ/ND80PzQ/ND80PzQ/ND80PzQ/Oh+xA/N
D80PzY/ud/zQ/ND8mPPZzQ/ND82PuZ/Pnl/80PzQ/ND80PzofOOH5ofmh+ZH
z0P86Pzjh+aH5ofmh+ZH9yN+aH5ofmh+9PzFj+5P/ND80PzQ/ND86H7FD80P
zQ/Nj573+NH9ix+aH5of/X7GD80PzQ/ND80PzQ/ND80PzY8+P37M9vNl/Zh9
tPkxr59tfmh+aH7M+682PzQ/ND80PzQ/ND80P+b77zY/ND80PzQ/ND80PzQ/
ND80PzQ/ND80PzQ/ND80PzQ/ND80PzQ/ND80PzQ/ND80PzQ/ND80PzQ/ND80
PzQ/ND80PzQ/ND/mfHbzQ/ND80Pzo/OLH5ofmh+aH5ofnW/80PzQ/ND80Pzo
/OOH5ofmh+aH5ofmh+aH5ofmh+aH5ofmh+aH5ofmh+aH5ofmh+aH5ofmh+aH
5ofmh+aH5ofmh+aH5ofmh+aH5kef//r5+O77+buvPozv/lr6D6/PxXfvrn9s
u//T0v7yy39tj7T73/f797tvXl9rXt+/v+d9vv51fp+/ffWr175913b9dez+
8+nfN7mu55933z/f//X/vd/987qfj32///L+/Z73AzJ3R9I=
   "], {
    {GrayLevel[0.8], EdgeForm[None], 
     GraphicsGroupBox[PolygonBox[CompressedData["
1:eJw03WO47Nq2heEVVMXatm3btm3btm3btm3btm17n33zPa3dH3n67KMnfYxU
Mt6aa921z51wo+1X2i4cMWLETcuMGBH1sZt8xAjyzfpjy/6I+2PQH1v3x7A/
kv7YxjHtj61cp7Z7f4zUHyP3x270cr7FCPWm1+Yj1J98W/fI+mPn/qj7o+mP
XRzb/tjD/Ubpj109Rt/t+yPvj6I/tnMP8h08VvbHTv1Rue+e7jFqfxzaHxP0
x4T9cWB/jNMf4/bHPv0xen+M0R/79ceY/TFWf+zvOHZ/7Os6tb37YzRfs5d7
kx/gc+l7kHuP1x8HO47fH4d5/on64xCPsaYj+mPi/pikPw53nfyG/li6P/rH
NOJI1yftjzODESNm6Y9Z+2NH3zf3fHR/TNYf/eMccUJ/TN0f0/THSf0xbX9M
1x8nO07fHye6Tu3Y/piiP6bsj3P7Y47+mLM/ju+PqdzrONfJT3GPGfrjrP6Y
tT9m64+zHWfvj/PcY67+OMdj9D2tP2bsj5n641T3ID/dYzP3x1G+V+7ngv6Y
uz/m6Y9r+mPx/liiPy7uj/n6Y/7+uLQ/FuiPBfvjMseF+uMS16kd48+G+zzf
66LvRf0xr3td6HnIL3ePhfvjWs+5ZH9c57hUf1zdH4t5Tdd7jGd2ZX8s0h+L
9scV7kF+lce45kY/22X74+b+WK4/lu+Pz0boHeU9uq0/VuyPlfrjjv5YuT9W
6Y87HVftj9tdp/ZIf6zfHxv0x8P9sZ7zW/tjBfe6xfOQ3+Ueq/XHA/2xdn+s
0x8POq7bH4+634b98ZDH6HtPf6zeH2v0x93uQX6vx9bsj/v7Yy33fcw9NuqP
l0doD7Onnx8hU/Dmqf7YdIQsemaE7MCSZx3x6WnXqY3XP9BR+mPk/njcvTfu
j+d8Ln1fcG8Me9ERh17x/PjxksdY02sjtK+w5FXXyW/ys+I5ve46ht3ne+U+
3/AYnr3piGFfj9D+Z3+/N0I24ccHI2QKDn3oiDfvu07t3REykWveGSFzyT/y
ubj1sSNufT5C7w72fOGIN2+PkNFc/6XHcPHTEfKLd+4T9yD/ynXW/Y3XjlXf
jZBH7NE/R8gC9vG3rlP7cYT2G678MEI2kf88Qo7gyk+uk7/lz4n1/eI6hp3Z
H7OMkC/fe056/TZCfmHbX54fV/52xJJf3YPz/vHYGf3xxwg5yLp/dw/yf11n
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
nHeJx3DrgkT2se7z3YP8Utfx7DJHDLsikVMY9uDI/f7pj3X745pEBuHTdYkM
wqfrHXHoWtep3ZXICAy4M5Ej5Fcn8o5eVyWym/wG98Ct2xJ5hCW3O2LS3e6H
N3d4jL43JTIO/250D/KbPYZztybyi773uAffJ08k2s/s70cS+YI99ydyimfy
YCJHcOUhR6x6wHVq9yWylWvudW/yh30ufR91bzx7zBGTnvT8WPK4x1jT04n2
G6485Tr5L4nee973Z1zHs3fS3pf+2KM/bvF9c8/PJTIOz15JZBN+vJbIFBx6
3RFvXnWd2guJbMXaDxM5ghMvJ7KSXi/1x7bO33APPHsvkUF4874jFn7kHtjz
gcfo+1Yi+/DsTfcgf9tj2Pms75X7+SSRTTj0QyIX2NOfJ9pjGPBlIkdw5StH
TPrCdWrP+7PhPj/2uuj7WSLX6PWp5yH/2j1w60fPiSs/OfKd9n0is1jTzx7j
mX2byEH8+8Y9yL/zGNf86meLW78nsglTp0z1jvIe/ZXIIHz6J5EX2POvIyb9
7Tq1NJUX2JCkcoT8z0Te0esPz0P+P/fArTiVHVgySBWxMEvVD0uGqcboy/8Q
NPZh23/uQR6kGsOqKJVr9M1T9cCh0VLtYfY0/2YCU/CmSmXTlf3RpLIDS9pU
EZ/qVHVqZaq/O+OaIlVvcv4tBufSd+RUvTFslFQRh0ZPNT9+jJpqjDWN6X2F
JWOkqpP/5mfFcxorVR3DwlT3yn2OnWoMz8ZJFTFsulT7n/09YSqb8GPiVKbg
0CSpIt5MlKpObYJUJnLN+KnMJZ801bm4NVmqiFtTpXp3sGfqVBFvxktlNNdP
k2oMF6dI5Rfv3OSpepBPm6rOuqdPtXasmjGVR+zReVNZwD6eIVWd2iyp9huu
zJzKJvLZUzmCK7P1P7+YKB831efE+uZIVcewdxP9roMvM6Wak15zpfIL2+ZL
NT+uzJ8qYsmcqXpw3gKpxt7pj3lSOci6507Vg3zBVPV3fd7unnuhVGM4t3Cq
iHNLpHIEn5ZKZQeWLJ0q4tOSqerUtky1x9hbq6ayDFcWT2UlvRZL5S/5Mql6
YNhKqUzBj5VTRexZLVUPTFol1Rh9l0tlIhYum6oH+fKpxrBtxVQ20XeNVH7x
nbNJqv3M/l471XuPT+umsgNL1ksV8WmdVHVqx6d6/3jvVk+1Lvqulco7eq2Z
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
H56NVqoH+Til6jg6fqm1Y9WEpfzCp2lKmYITE5SqU5uklE3suYlLmUU+WSkj
MGbSUnXyGUt9J/FcJy9Vx6SZSz1nLJmo1Jz0mrKUcRg2ban58Wm6UhFjpijV
g/OmLzWGQ1OXMpF1T1WqB/kMpeqsg993+btI/nw+S6n5sWrzUu8B78WcpZzC
jLlKRRyao5RT1BYtZQdmLFYq4sTspbzjvEVKGcd5s5VynNqspeYkX6iUI7iy
cKnINYuX6ocr85WyD9vmKeUj/s1dal3k85Ya47wFSxlH35VKmYIHK5ayhnyp
Uh591h/L9D9/XsiPZUtFXFm6VP1zn4db/C62fCm/8GnJUsbRa4lS6yVfrlQP
zlullCO4slopR9hbK5daF7XVS4397PmYB8tWKDUP6161VA+uX6CU0dzn/KU+
G/I1SvXAvPVKOYJPG5SyA0s2LBXxaf1SdWprl3IQX7cuZRmurFvKSnqtU6pO
vlGpHhi2hd8d/NjSEXu2cQ9M2spj9N2klIlYuHGpHuSblhrDtu1KmYU9e5Zy
AQ/2cmRP71jKIwzYuZQjuLKt5+T6XTyGT2uV+g7gPtcs9TmR7+QeXL+Z52c/
7FDqu4c5dnUPDNvb82PMPo78WXB7r5dr9vUYbu1eykQs3M09yPfwGPfGn0f3
9f7cz9fh3P6O2HZoKY+w6vBSduDQEY74dJjr1C4rtR/YZyeVMgVLDillH70O
LuU4+ZHugWHHl3IEV05wxMWT3QN7TvQYfY8u5SDOHeUe5Md4DLeOK2UcfU8t
ZRNGXlhqb7OPzyjlIz6dVcoL/DjbEWPOdJ3aM6X84h08xeui7+mlvlPpdZrn
IT/HPfDsIs+JMRc7sp8uKOULa7rEY+y580r5iIvnugf5+R7jmme9FvbBsb5v
7vlyPwecu7qUmzh3bSk7sOQ6R3y6xnVqV/g6TL2jlB24clUpi+l1pevk17sH
ht1ayhH8u80RF+90D1y53WP0vbGUiVh4g3uQ3+QxbLvUnwfv1t2lXMOwx0u5
wJ6+r9QeY889UMoX/HjQEVfud53a06X2Hs/yLq+LvveWco1e93ge8ofcA+ee
8Jy48qQjljxWyjvW9JTHmOORUvbh4sPuQf6ox7jmOT9D3AoqvTc887BS5F14
uZRT7PtXHDHjpVIGUXu/lFmY8YEjZrxYykfOe6+UcZz3Qil/qT3v+cnfKeUI
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
H0vU8hEXF6/Vg3zJWmOf+rxDPTfXHeJ8+Vo11rV6LSMwY41aEVdWq2Uftd1r
7QH21sa1/MKSVWu5w3kb1XKE2iq1LKa2ci1/yTeo5QsWblgrcs2mtTzie2Od
Wg7izVq1HMTINWuti3ztWmOct34tj+i7Q609zJ7eqdYeZq9vVcsIzNjaEVe2
rOUXtXNrmcV7d54j790WtfYP521S675Z6+a1vsOobea1k+/sOdlDuziyt3b0
uljT9rUcZK3b1nIQI7fxusi38xjnrVfLYu5z3VqfDflu/c+dn80+tdzEuf1q
2YEl+zvi076uU9uzlo+YemQtO3Bl71oW02sv18kPcA8M499b4wj+He6Ii0e5
B64c4TH6HlTLRCw80D3ID/YYth1TyzLcOr2WKXhwhiN7+vhae4w9d2ItX/Dj
aM/J9Sd5DGPOqfWdxHPdo9b7yz2f4B5cf76fM5YcV8s75jjZPTDvTM+PMWc5
4sqxXi/XnO0x5ju1loMYeYp7kJ/mMe7tEN839r/oZ8+78LKfPe/IpbX2P2Zc
XMsgDLuhllmYcaMjZtzkiBOX+Fyuv6iWm1x/fS37uP7CWi5Tu66WHdSurGUf
zt1bywX23xW1XKN2mdeFlxf486PX5R7jvGtrOUXf+9yDPX2/I/v49v5YqZYT
dzjix239saJrRH4/4/eyFWq5RX5rrZz6XbU8wq1bahlH7WZ/HuQP1vKFPfSQ
I3vrnloOcp8PeF2cd7f7UbvT61rVa2ItuHZNLX+5z6trmU5+lT8/8qdrGYEZ
zzjiylO17KP2WC0TcfT1Wn5hyZO13OG812o5Qu2JWhZTe9zXkb9S693Bwlcd
ueat/ti1lhkv1HKQd+65Wg5i5LNeF/nzHuO8T2vtf/buZ47s6c8d2cfv1/IC
Pz5wxKR3a+09vHnPkfMeqWU33wkP+zmQP+oxPouXau0J9sMb/jww9W3fB99L
X3h+9tOXjvxZ8B3XmfuTWg5yDx/VchAjP/QayT/2GOfx3ybx31zy31t+Xcs7
nJt0pP796Pr3qD9+qOUObv1UywL8+NkRq350ndr/ajmCH//Wco38+1pu0uu7
WhaT/+IeWPVXLVPw429HjPzP/bDnH4/R97daPmLhr+5B/rvHsO3PWjbRd0Sj
HnhZNtrD7PW0kTtYEjX6XsTLQaM9jx/DRhFj4kZ1amGj71SuCRr1Jk8anUvf
rFFvnMsbRVypGs2PQ0WjMdbUNNpX7LO6UZ189kbvCna2jersywnafg/3+T39
8Yfvm3seqZFNmDd6IzdxYsxGduDKWI0iDo3RqE5tlEaGYvAkjSzDjNEaWUyv
URvVycdu1APnJmxkDaZO1Cji4qSNeuDTxI3G6DtuIxOxZ5xGPcjHazSGeV2j
e+V+Jm/kGvtp5kZ7m308VaN9hTHTNPICP6ZtFDFm6kZ1aiM3+my4z8karYu+
Uzbat/SaotE85NM16oFnszSaE2NmbRT5fpupkS+sabZGYzyzGRr5iIvTN+pB
PmOjMa6Zo9Gzxba5GrmGhds2ekd5j+brjzdrObdAIyMwYMFGEYfmb1Sntkwj
v/Bj6Uaukc/TyF+8mbvRPOQLNeqBYUs08gJXlmwUMXLZRv1waKlGY/RdpJGP
uLhwox7kizYaw6HFG9lE3+Ua9eC/b1ur0R5mT6/WyBS8WbH/+Zs+ftsfKzey
A0tWaRTxaaVGdWorNLKMa5Zv1Jt81Ubn0nf1Rr0xbI1GEYfWbjQ/fqzZaIw1
ret9hSXrNKqTz9noWfGc1mtUx7DFGt0r97l+ozE826BRxLCdGu1/9vemjWzC
j80bmYJDWzjizWauU9ukkYlcs3Ejc8m39Lm4tZUjbm3ndwd7tnfEm40aGc31
O3gMF7dp5Bfv3NbuQb6j66x7Z68dq3Zt5BF79IBGFrCPd3Gd2h6N9huu7N7I
JvK9GjmCK3u6Tr5ho8+J9e3tOoZN0Oj3FXzZzXPSa99GfmHbgZ4fVw5yxJJ9
3IPzDvbY+P2xfyMHWfd+7kF+iOsT+B3ku5Hf9xnDJNZxWCPvcO7oRo7g07GN
7MCS4xzx6RjXqV3baI+xt85oZBmuHNXISnod2chf8uPdA8NObWQKfpzmiD1n
ugcmne4x+p7YyEQsPME9yE/yGLad0sgm+p7dyC++c65otJ/Z3+c1eu/x6YJG
dmDJRf0xbyOfzned2suN3j/eu7O8Lvqe28g7ep3jecgvdg8Mu9Jz4sdVjuyt
yxs5xZqu9hiuXNrIRCy8xD3IL/MY17zitfC+n+z75p6v83PAs5saGYdPtzRy
BFdudcSkm12ndr2vw9f7G1mGJTc28pdeN7hOfpt74Bbf2XiEQ/c6Ys8D7oE3
93mMvnc0chD/bncP8js9hnPX+PPg3XqokV/49FwjI7Dh0UYesc8eb2QBljzh
iDGPuU7tpUbfQzzLB70u+j7SyDh6Pex5yJ90D2x73nNiyQuOGPNsI+NY04se
Y46nG3mHhU+5B/kzHuOaV/0MMSlt9d7wzLNWkXfhrUY24cTbjtjzZiObqH3W
yAuc+NwRG95oZBznfdrINc57vZHd1F7z/OQfN7IDSz5x5Jov3A9L3m/kHZ69
28hEzHvH6yJ/z2Oc91Ej1+j7cyNHMOCnRr6Qf93IoMP749v+OKKRGd85Ysk3
rh/hiFX8/vVDI7Mw6av+ONS9vvR6yb93D877tZEdWPJ7IzvYQ794XdT+8Ngp
no958OtHz8O6f3MPrv+wkcvc5wf+bMj/dA+c+6+RHZgUtPICP8JWEZNGtKpT
+6eRfZhatfILS/7XyEd6/es6edSqB27lrd4dzChaRbypW/XAobLVGH2H/c8X
NvIvbtUDF5NWY7yXbSun2Jdjt9r/7N1xWkX29MitDMKSUVt5gR9Nqzm5frRW
Y/j0dyP3uc+//DmRj9Kqxw1+fnx38f00UqvvG+YYvVUPDBu31fz4MV6reFd/
dK3WyzXjtxrjzxhjtjIRC8do1YN8rFZj3NuErVzDs4lb+YWLP/Q/H90fx/TH
ZK0cwacpWtmBJVO2ivg0eas6tVlaOYIfM7eyjHzSVlbSa5JW85BP1aoHhs3Q
yhT8mLFVxJ5ZW/XDnplajdF3mlYmYuHUrXqQT9tqDNumb2UTfWdr1QMjF2q1
t9nH87WyBofmbPXdg1tzt7IDS+ZpFfFmrlZ1anO0+u7kmtlb9Saft9W59J2/
VW9sW6BVxJKFW82PNwu2GmNNi7baY+y5RVrVybdr5Sbv/mKt6tgzUatnyPOb
rtV9c89LtPIO55ZtZRxmLN/KEUxaoVXEnuVa1akt1cpT3F2rlSl4sEwrf+m1
dKs6+YqtemDb6q3sw8I1WkXsWbtVD0xas9UYfVdu5SCGrdSqB/kqrcbwb/FW
98r9rNvKL+zZqv950Gp/b9Bqv+HKRq3swJKNW0V82rBVndqSrT4b7nOdVuui
7/qt9iq91ms1D/kmrXpg2NaeEz+2ceT7bYtWTmHMth7jmW3WykQs3LRVD/LN
PcY12/vZ4tmOrfzCxYtbvaO8R7u0sgardmu1/zFjd0d82tV1age1sgMzDmxl
GfnOrayk106eh3wP98Cn/Vo5ghn7O+Liwe6HNwd4jL57tTIR//Z0D/K9PYZn
+7byiL6HuAd/L3JCqz3MnsYdTMGbw1u93/h0ZCs7sOQoR3w6wnVqh7VyjWsO
dW/yo30ufY91bww7zhGHTvT8+HG8x1jTya32FZac5Dr5Dn5WPKdTXMewfXyv
3OepHsOz0xwx7IpW+5/9fXYrm/Dj3Fam4NB5jnhzjuvUzmplItec2cpc8vN9
Lm5d4Ihbl7R6d7DnUke8OaOV0Vx/mcdw8aJWfvHOXege5Je7zrqv9Nqx6upW
HrFHb2tlAfv4KtepXddqv+HKta1sIr+hlSO4cr3r5Kf7c2J9N7qOYau1+h0F
X67xnPS6uZVf2Ha758eVOxyx5Cb34Lw7PbZqf9zaykHWfYt7kN/l+mqOOMTc
d3sM5+5xxLkHWzmCTw+3sgNLHnHEp4dcp/Zxqz3G3nq+lWW48kArK+l1fyt/
yR91Dwx7upUp+PGMI/a84B6Y9Fx/bOm+j7cyEQsfcw/yJzyGbU+1som+L7Xy
i++c91rtZ/b3q63ee3x6vZUdWPKGIz695jq1rNP7x3v3otdF31daeUevlz0P
+ZvugWHve078+MCRvfVuK6dY04cew5W3W5mIhW+5B/k7HuOaJ32v3OdHvo5n
8ImfA5792sojPPiilXdY9VUrUzDma0d8+tJ1ap+3MpdrPmtlLvk3PhervnXE
sx9beYdJPzli0qdeC9f/7DFM+r6VfXj2nXuQ/+I66/7Na8eqP1r5hU9RJ1Nw
4nfXqf3dyib23F+tzCL/t5URGPOP6+Rpp+8knuv/XMekvNNzxpI/PSe9RnQy
DsPiTvPj06BTxJj/3IPzhp3GcCjsZCLrDjr1IE861VkHv+/yd5H8+bzoND9W
zd/pPeC9aDs5hRldp4hDTSenqI3TyQ7MGLdTxIm6k3ecN3Yn4ziv6uQ4tbLT
nORjdnIEV8bqFLlmvE79cGXUTvZh28idfMS/kTqti3yUTmOcN0Yn4+g7ZSdT
8GCKTtaQT9jJo3v7Y+L+5/ta+TFJp4grE3Wq3+fzcIvfxSbr5Bc+TdDJOHqN
32m95JN26sF5U3dyBFem7eQIe2uqTuuiNl2nsac8H/Ng2eSd5mHd03TqwfWj
dzKa+xyt02dDPn2nHpg3WydH8GmOTnZgyZydIj7N3qlObeZODuLrwp0sw5VZ
O1lJr1k61cnn6tQDwxbo9O7gx4KdIvYs0qkHJi3UaYy+83QyEQvn7tSDfN5O
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
hjnT00YyBW+mGP78cCiTpopkB5ZMHSni05SR6tQmj2QZcyaL1Jt8mkjX0ne6
SL0xbPpIEYdmirQ+fswQaYw9zeJzhSUzR6qTj4z0WfE5zRqpjmH9SPfKfc4W
aQzPZo8UMWzJSOef8z1PJJvwY75IpuDQ/JEi3swbqU5t7kgmMmeuSOaSLxDp
WtxaMFLErUUjPTvYs1ikiDdzRjKa+YtHGsPFhSP5xTO3UKQe5EtEqrPvpSLt
HauWieQRZ3SNSBZwjpeOVKe2fKTzhivLRbKJfKXhz9+EcmWFSHVcmSPS+8T+
Vo5Ux7DfQ/2+gi/LRlqTXqtG8gvb1oy0Pq6sFSliySqRenDd2pHGfhu+Vo/k
IPteLVIP8nUi1VnzjN7wsx++Zulp7CTvY71I3uHcxpEcwadNI9mBJZs54tMm
kerUDol0xjhbO0SyDFc2imQlvTaM5C/55u6BYdtGMgU/tnPEnh3dA5O29xh9
t4xkIhZu4R7kW3kM27aJZBN9d47kF985+0c6z5zv3SI99/i0RyQ7sGRPR3za
3XVqV0V6/njudvK+6LtrJO/otYvXId/LPTDsAK+JHwc6crb2i+QUezrIY7iy
TyQTsXBv9yDf12PMudp74Xnf2vfNPR/qzwHPjoxkHD4dHckRXDnGEZOOcp3a
YZ6Hr6dFsgxLjojkL70Od538WPfALb6z8QiHTnHEntPdA29O9Rh9j4/kIP4d
5x7kJ3gM5w72+8GzdWYkv/Dp0khGYMM5kTzinJ0XyQIsOd8RY851ndqVkb6H
+CzP8L7oe3Yk4+h1ltchv8A9sO0yr4kllztizCWRjGNPV3iMNS6K5B0WXuge
5Bd7jDnX+DPEpPcjPTd85h848izcGMkmnLjJEXtuiGQTtfsieYET9ztiw/WR
jOO6eyO5xnXXRbKb2rVen/zuSHZgyT2OzHnA/bDk9kje4dktkUzEvJu9L/Lb
hq8Vfd1dkVyj79ORHMGApyL5Qv5wJIPWH74eHb42iGTGY45Y8ojrGzhiFb9/
PRHJLEx6aPha170e9H7JH3cPrns2kh1Y8nwkOzhDz3hf1F7w2DZej3Xw60mv
w76fcw/m3xnJZe7zDr835C+6B869HskOTHozkhf48ZYjJr3hOrVXItmHqR9H
8gtLXovkI71edZ38bffArQ8jPTuY8ZEj3nziHjj0P4/R991IDuLfO+5B/p7H
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
IjtwZc1EFtNrjUR18vUS9cCwTRI5gn+bJoq4uIV74MpmHqPvBolMxML1E/Ug
3zDRGLatkuj94NnaKpFrGLZbIhc409smOmOcue0T+YIfOzjiynauU9sr0dnj
s9zS+6LvNolco9fWXod8R/fAud29Jq7s4Ygluybyjj3t6THW2DmRfbi4k3uQ
7+Ix5uzrzxC3bkj03PCZ3+jIs3BQIqc49wc7YsaBiQyidlwiszDjeEfMOCCR
j1x3bCLjuG7/RP5S28/rkx+dyBHMOMaROSe4H94cnshBzDs0kY/Ydoj3RX6Y
x7juqEQe0ffsRI5gwFmJfCE/OZFB0w9fpw5fMyQy4zRHLDnFdWobp8PvyGH8
b/g6I5FZmHRSItfodaL3S366e3DduYnswJLzE9nBGTrH+6J2gcew5MlEzzfP
9Zleh32f5x7MPzKR3dznEX5vyC90D5y7PJEdmHTV8LVoIj+udsSkK1zHkksS
2YeptybyC0suS+QjvS51nfwa98CtmxI9O5hxsyPe3OYeOHSLx+h7XSIH8e9a
9yC/3mM8l3ckcopz+XCi88/ZfcSRM313IoOw5N5EXuDH7V6T+fd5DJ8uTuQ+
93mR3yfye9yD+Rsn+n0IX+5K9H3DGve7B4Y96vXx4zHHjYavO71f5jzuMfo9
mMhELHzAPcgf8th6vhaHWPsJz+M5eMrPAp49l8gRfHohkR1Y8qIjPj3vOrXv
Ep0HztnbiSzDlWcTWUmvZxL5S/6Se2DYG4lMwY83HbHnHffApLc8Rt9XEpmI
hS+7B/mrHsO21xPZRN/3EvmFkV8mOtuc4w8Tfd9g1f8SeYEfHztizEeuU0tS
+cUz+K73Rd8PEn2P0ut9r0P+iXvg2VdeE2O+duQ8fZHIF/b0jcc4c58l8hEX
P3UP8s89xpzXfK/c57eex2fwvT8HnBsl1fnHhp8TGYp5vyZyBFd+c8SqX1yn
9lMif5nzYyJnyX/3tbj1hyO2/ZPILCz51xELf/BemP+fx/Dyr0QOYtif7kE+
IlWdfY+aau+YNHoq1zBs4lS+YMNoqerUxkp13jh/Y6ZyinycVO7gytip6uRx
qu8nPtdxU9VxKE31OWPMGKnWpNf4qbzDs5Gp1seVIFXEm/FS9eC6MNUY3kyU
ykf2PeHw5ysT5VGqOvvYJNV7xHvQS7U+ni2d6jngueinMgsDqlQRP8pUHlGb
MpVf+DFVqogfRSoruW6KVN5xXZ7KYmpZqjXJJ0tlCn5MnioyZ+pU/bCnS2Ui
/jWprMS5OtW+yNtUY1w3aSqb6DtbKlPwYNZU1pBPl+r7CZNmGP78dCI/ZkwV
cWX6VHVqG6V6/njuZk7lFz5Nm8o4ek2Tar/kM6XqwXVzpHIEV+ZK5Qhna/ZU
+6I2d6qx170eRmLZLKnWYd9zpurB/ElSOc59DlK9N+TzpOqBeQulcgSfFkll
B5Ysmiri08Kp6tTmT+Ugvi6fyjJcWTCVlfRaIFWdfLFUPTBsmVTPDn4smypi
zwqpemDScqnG6LtEKhOxcPFUPciXTDWGbSulMgt71k3lAh6slypypldN5REG
rJ7KEVxZMdWazF8j1Rg+zZfqO4D7nDfV+0S+WqoezF8q1fqch1VSffewxpqp
emDY+qnWx5gNUsW/h6+VU+2XORumGuO5WTuViVi4Vqoe5OukGuPezvR/7zPr
8LVpqjOKr/x3QM/xHAxfW6XyAnu2dsSkLVP5RW33VF5gwx6OGLBFKsu4brdU
vnDd5qkcpLaZ1yTfJZUpWLirI3P2dD9s2z6Va5i0bSr7sHAb74t8O49x3c6p
bKLvIanOMGf64FTWkO+Tykd82i+VF/ixvyPG7Os6NX6v5d8N+Tv5wFROYdje
qb5T6bWX90t+gHtw3WGp7MCYI1KdJc7Wod4XtSM9his3pLKS5/0gr8O+D3cP
5t/oOudgp+FrAt/zUe6BeSelsgOHTnbEmxNTOULt2FSGYu15qc4/fpyQykeu
OzeVL9SOT2UxteM8j/zsVA7izTmOzLkglTuYcXoqs7Dt1FQmYuEp3hf5aR7j
uh38mfN9dXUqCzjH16Y625zjS1N5gR+XOWLSJamsoXZMKve5z6P93pBfnOqs
ct35vm/2elGqc0vtQu+d/Dqvydm93pHP6Rrviz1dlco+9npFKvtw8XLvi/xK
j3HdzanMwsJPUz1bfOafOfLM3pHqzOPEnY6YdHsqv6g9ksoLnHjUERtuS+UU
1z2cyjWuuzWVm9Ru8frkD6byAgsfcmTOY+7Hd9S9qbzDqrtTuYaLd3lf5Pd4
jOseSGUTfV9MdW45xy+k8oX8yVS/N2DS06mMwIxnHHHlKdep8bcm/x7GmcQt
bMKtJ1L9/Umvx71f8mfdg+teTuUFrrw2fO2Y6gy95H1Re91jWHJTqnPG5/T/
PrLvV9yD5/T+VOZyn/f5vSF/wz1w7r1UruHEB6nswKEPHfHmfdepvZ3KUKz9
KpUjGPBuKnPp9Y7r5B+5B559nurZwb8vHPHma/fAoS89Rt+PU9mHW/9zD/JP
PMZz+W0qpzDmj1TnlnP8pyNn94dU5w1XfkplBGZ84zWZ/7PHMOatVO5zn2/6
fSL/0T2Yf1aq36vw5ftUZ5g1fnEPPPvL62PM345nDF/feb/M+cdjZw5fv6Xy
ERd/dQ/y3z12iq+bxWszb2bn/7rGvsbsyQjMGKuniCtj9GQftUl7OgOcraAn
v7Bk9J7c4bqRPTlCbbSeLKY2ak/+kk/Uky9YOHFPkTlRTx7xvTFeTw7izTg9
OYiRY/e0L/Jxexrjugl78oi+dU9nmDPd9nSGOetZT0ZgRt5TxJVeT35RW6Yn
s3julu0p8tylPZ0frgt7um/2mvT0HUYt7mnv5F1Pa3KGBj1FzlbT077YU9WT
g+y17MlBjCx62hd5v6cxrpugJ4u5z/F7em/IJ+mpN5/NVD25iXPT9GQHlkzb
U8SnqXuqU5u8Jx8xdfae7MCVKXuymF5T9FQnn66nHhjG7184gn/8HkbExTl6
6oErs/U0Rt8ZejIRC6fvqQf5jD2NYdvcPVmGW4v1ZAoeLN5T5EzP19MZ48wt
0JMv+DHX8OdXU81fsKcxjFm6p+8kPtfJenp+uef5e+rB/OV6+pyxZN6evGON
hXrqgXlL9LQ+xizZU8SVeXraL3OW6mmM9RbpyUGMXLinHuSL9jTGvc3U031j
/wE9ffY8Cwf19NnzjKzS0/nHjJV6MgjD1u/JLMzYoKeIGRv2FHFi5Z6uZf6K
PbnJ/PV6so/5K/TkMrV1e7KD2ho92Ydz2/TkAudv9Z5co7ZqT/vCy+V7ev/o
tVpPY1y3Tk9O0Xdb9+BMb+fIOd5s+BqlJyc2d8SPTYevEa4R+f2M38v+S+UW
+SY95dS37Mkj3Nq4J+OobdTT+0G+Q0++cIZ2dORsbd2Tg9zn9t4X123lftS2
8L5G957YC66t3ZO/3OdaPZlOvmZP7x/5Xj0ZgRl7O+LKnj3ZR23XnkzE0cN6
8gtL9ujJHa47tCdHqO3ek8XUdvM88oP97GDhIY7MOaInjzBj/54c5JnbtycH
MXIf74t8P49x3ck9nX/O7imOnOlTHTnHx/bkBX4c54hJR/d09vDmGEeu27kn
u/lO2MmfA/kuHuO9OLCnM8F5ONzvB/dwpO+D76XTvD7n6XRH/hY8ynXWPqkn
B7mHE3pyECOP9x7JT/QY1/H3KP8exr+jndWTcXj2ajF8hoavHYeva3qyCRvO
78kgDLuwJxew5CJH3LrAdWrnDV9zes45PfmLnRf7Wny6xBHnrujJEVy50hFL
rvX6mHSVx7Dzsp4cxLBL3YP8atfZ9+Wu0/c698Cwu3o625zjG3v6XuT78Pae
DMKVmzyGnbf0dP6x5FZHvLmhJ3+Zf5vHmH+He2Dbp/6MMe9ur4kxd7rOPq73
vuh1j+v4dH9P543zd6/HOHP3OVK72Xtkfw/4Wkx6qCfvsPDlnjzi3D/Wk6GY
8URPjmDMk46Y9Ljr1B7tyV/mPNKTy+RP+Vpse9oR257vyRS8ecERXx/2Xpj/
osfw8tme3MG2Z9yD/CXX2feDvifu5xXfB8592NN55ny/6jHMe7OnM4Y3b/dk
B5a844g3b7lO7Y2ezipzXu/prJK/62sx7D1HnPvIa+LH/xzx5jWvz/yPPcb3
3gc9mche33cP8k9c5/l4Phu+b8PX1sPXZz09Lzj3RU/G4eIfPdmESV/35AXm
fduTF3jwnSMmfeM6ta96Mpc5X7of+fe+Frd+cMS5X3pyBDN+dcSYP70+Jv3m
Mez8qScT8eZH9yD/3XX2/bPr9P3LPfBs7Ewu4MG/Pf37FyaNkckUvPnPY2cP
X6MOx8/tyZjRMkV8+qen/70c80fPNMb8MTP1wKrP/b7yno6TaU38GCtTnX38
7X3Ra9xMdbyZIJNT+DRepjGMGT9TpDZhpjpWTZQpYtLEmSKmhpk84ty3mc48
5zvKNIYrSSabcCjNFDnrQSYTmd/LNIZPWaaIT3mmiEllJtcwqZ8pYk+caR3W
qDKN4WKTySn2VGTqwfw6U53ayEz3wT66THvHpEkymYVDk2U6tzg0yFSnNmmm
OrXJM9WxYapM1uDTFJnG8GbKTJHacz05gS9TZ7oWq6bNZBmGTZ/JJkyaIVPE
lWkyXct1M2Yaw56ZM/XFreky9WD+TJnq1EZkeu74Hpsl07XYNlsmy7Bq8Uwu
4MFcmTzCg3kymYIx82aK+DR3pjq1OTO5xpw5MnlNPl+ma7Fq/kwRzxbO5BGW
LJIpYszamc4q53LRTGMYuWAm+/BsgUw9yBfLVGffC2Wq03eJTPeBYatmMgIb
lsw0hlvLZjpL+LR8JlMwZoVMEZ+Wy1SntoxdY87Smb4XyVfMdC1WrZQp4tlq
mdbEktUzRYxZKtP6zF8j0xiurJLJPva6cqYe5GtmquPZQZnOAM/7WpnGeL8O
zHROqG2XyQXO/QaZnMKDjTL5gk8bZ4qYtGGmOrX1M/nInPUyeU2+SaZreY42
G75GyWQY3mPcmHafiEPrZnKT+dt4DCO3yOQdtm3uHuTbus6+18n0+TN/e98H
Vu2TyRHM2MFjuLVLJqfwabdMZxtjdnfEql1dp7ZzJuOYs1MmE8n38LUYtqcj
xuzrNfFpP0d82tHrM39/j+HN3pnsY697uQf5Aa7zOR3szxCTDnHErdsyPU88
R4dnsgl7jsxkE/Yc5YhPR7hO7dRMXmDDKZkcIT8sk9H0OtTrkB/tHhh2YiZf
cOgkRyw5zf2w5GSP0ffYTMZh2zHuQX6cx7DwhEzG0fd098CqizO5gAfnZ7IG
S84avmbNZNI5w9fsmSw51xFjznad2pmZLGPOGe5Nfp6vpe8F7o1hFzpi2CVe
H0su8hh7uiyTNVhyqesLej2MxLXLXcew432v3OcVHsOzKx0x7O5MFmDAdZkM
woAbMjmCKzc6YtL1rlO7NpNlzLkmk9HkN/lafLrZEcNuz/Ts4McdjrhydSYr
mX+nx3Dx1kze8czd4h7kd7nOvu/x3rHqvkweYc9Tw9emmTy413VqD2Y6wxjw
QCbTyR/OZArGPOQ6+VV+n9jfI65v4M+V7yi+n+73mvR6LJNZePa018eSZxwx
5lH34LpnPbbl8PVEJvvw7HH3IH/OdTwbc/h344X58LkYvl7I5BqGvZTJKXz9
KJMLePBqJo/w4PVMpmDMG4749Jrr1F7J5BpzXnY/8jd9LVa95Yhn72XyCEve
d8SY/3l97PnAYxj5Tib78Oxt9yD/0HX2/a7r9P3YPfDp+0wucKY/y/R9g1Xf
ZLIGhz73GG59mckUjPnKEbc+zfSdxPyvPcb8b90Dw8pczyvP6Q9eE1e+c519
fOJ90etH1zHml0y+4NZPHuMs/uxI7Qvvkf396mux7fdMlmHkOLks4Kz/nckp
LPk3ky+Y9J8j9vzjOrW/MvnInD8z+Us+Ite1GDZKrohhY+TyCIfGzBWx5w/v
hflj5RrDyNFyWYaRo+bqQT52rjr7/s33xP2Mm+s+MCzNZQQ2jJdrDLcmynXe
8GBkLlMwJsgV8WniXHVqE+ayjDkT5DKOPMx1LVZFuSKe9XKtiSVZrogx4+da
n/l5rjG+65Jc9rHXOFcP8iJXnefjxUznj7PXz/W8YFidyyl8nSGXBRjQ5fII
qybJZQcOTZor4tMgV51am8s45jS5+pFPlutarJo8V8SwqXMZhB/T5Iq4MmOu
9fFmuuHPT2YycspcrmHSFLl6kE+fq86+p8pVp+9MuXpg0ny5XMCDWe0R78fc
uUzBm9lyjeHTHLlMwZg5c0V8miXX3+fMnyvXGPPnydUDq6pc7yvv6fy51sSP
eXPV2cfMufZFrwVy1fFm4VxO4dOCucYwZqFckdoiuepYtWiuiEmL5YqYumQu
jzj3q+c685zvpXKN4coyuWzCoWVzRc76ErlMZP5yucbwaflcEZ9WyBUxaaVc
rmHSyrki9iydax3WWCXXGC6ulssp9rRirh7MXzVXndriue6DfayRa++YtFYu
s3BonVznFofWzFWntnauOrV1c9WxYYNc1uDTernG8Gb9XJHa6LmcwJcNc12L
VRvnsgzDNs1lEyZt5ogrG+W6lus29xj2bJmrL25tkqsH87dwndpWruPZ1o4Y
to0jVu2bywU82CGXR3iwUy5TMGZnR3za0XVq2+dyjTnb5fKafBdfi1W7OuLZ
nrk8wpK9HDHmpOFr2lzncm+PYeTuuezDs93cg3wf19n3Hq7Tdz/fB4YdncsI
bNjfY7h1cK6zhE+H5jIFYw5zxKdDXKd2UC7XmHNgru9F8sN9LVYd4Yhnx3hN
LDnWEWMO8PrMP85juHJULvvY65HuQX6863h2giOenez3CZ9uz3VOOB+n5TIO
ny7JZQQGnO4xbDgzlzVYdZYjPp2ay2jmn+2x2Yevcxxx61xH3Do/l1M4d4Ej
Vp3hdVjjQo/h08W5rGRP57kH8y9yndopvif2can3jlWX53IKw67M5RQ+XeY6
tStcp3aV67h1bS53cOtqj2HANY7U7vD7hyXX+Vo8uyGXNXh2Uy7LcOtmR9y6
3tdy3S0ew7DbchnEZ3OjezD/Vtep8fssf2fz9/mdXh+rvs71bPFM3ZvLKRy6
P5dTOPSAI1bd5zq1p3PZgRNP5TKF/J5cXtPr7lxWkj/oHnj2eC5rMOkJR1x5
xv1w5UmP0ffhXN7h3EPuQf6Ix3DxsVze0fdZ98CtN3MZgQ2v5nIHV17I5RQ+
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
T/paTHrKEdue68sOLHneET9e9vo49ILH8PKZvuzDrafdg/xF19n3s67T9xX3
wK0P+nIBD17vyyMcercvU/DmDY/tMny91ZcpGPO2Iz691pdrzH/HY8x/zz2w
6kG/r7ynH3pN/HjfdfbxqvdFr49cx5tP+nIKn/7nMYz52JHap65j1WeOmPS5
I6Z+1ZdHnPs/+jrznO+vPYYr3/ZlEw5958hZ/7IvE5n/vcfw6QdHfPrREZN+
7ss1TPrFEXu+8Tqs8avHcPH3vpxiTz+5B/N/c53aF74P9vGn945Jf/dlFg79
29e5xaG/XKf2j+vU/nMdG0atZA0+jag0hjejVIrULuvLCXwZrdK1WDVGJcsw
bKxKNmHS2JUiroxe6VquG6fSGPaMV6kvbo1ZqQfzx61Up/ZmX88dz9z4la7F
tgkrWYZVTSUX8CCo5BEeRJVMwZhk+PONffkUVqpTG1nJNeZMXMlr8rTStVjV
qxTxrKzkEZb0K0WMmaXSWeVcVpXGMDKvZB+eZZV6kNeV6uy7qFSnb1vpPjBs
ukpGYENXaQy3Jqt0lvBpikqmYMyUlSI+TV6pTm1Su8acSSp9L5JPVelarJq6
UsSz6SutiSUzVIoYM6i0PvNnrDSGK9NWso+9TlOpB/lMlep4tlalM8DzPnOl
Md6vNSudE2qLVXKBcz9nJafwYO5KvuDTPJUiJs1VqU5tjko+Mmf2Sl6Tz1vp
Wp6j+SpFDMN7jMMn3Cfi0GyV3GT+IpXGMHKBSt5h2/yVepAvWqnOvmet9Pkz
f/FK94FVq1RyBDOWqDSGW8tUcgqflqt0tjFm+UoRq5atVKe2dCXjmLNUJRPJ
V6h0LYatWClizKqV1sSn1SpFfFqy0vrMX73SGN6sXMk+9rpSpR7ka1Sq8zmt
XekzxKR1KkXcOr7S88RztH4lm7Bnw0o2Yc9GlSI+bVCpTm3bSl5gwzaVHCFf
r5LR9Fq30jrkG1fqgWFbVvIFh7ZyxJLt3A9LtvYYfTetZBy2bVKpB/lmHsPC
LSoZR9/t3QOr9qnkAh7sXskaLNlp+Jqgkkm7DF8TVbJkV0eM2dl1ajtWsow5
O7g3+W6+lr57uDeG7TV8xZUM29frY8neHmNP+1eyBkv2cz33ehiJawe4jmGb
+165zwM9hmcHOWLYKZUswIDDKxmEAUdWcgRXjnLEpCNcp3ZYJcuYc2glo8mP
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
gXOvNvIIS15zxJi33A97XvcYfV9oZB8WPu8e5C8NX9s28u+VRn7R9233wKfP
GhmBDf9r5A6uvNfo+wmrPhi+9m7kyoeOePO+69TebWQcc95xb/KPfC19P3Zv
PPvE8cDh63Ovjyufeow9fdnIHVz5wvVDvR52YtxXruPZy75X7vNrj2HbN454
9l8jF/Dgx0Ye4cHPjUzBmF8c8ekn16n90Mg15nzfyGvyX30tVv3miGd/NXp2
sORvR4z5rpGbzP/HYxj5RyP7eOZ+dw/yf11n3yNa7R23Rm1lEyZN0MoLnBil
VZ3aGK2cunD4Gr2V7+RjtbIGq8ZsVSf/1u8T+xu7VR23Hm90JnheR2u1Jr3G
bWUNnk3Yan18mqhVxJhxWvXguolbjeHW+K3sY9/jtepBPrJVHc/4dzX+bwL8
3wOiVmcUwz4a/rzv8LXf8NVrZRA+5a0MwqeiVcShrFWd2mStjMCASVs5Qp62
8o5eSSu7yctWPXCra+URlgxaRUyavFU/vJmk1Rh9q1bG4V+/VQ/yutUYzrWt
/KLvFK168H0yS6vzzPmeoZUv2DN1K6f4TKZt5QiuTNcqYtU0rerUpmplK3Om
bNWbfPpW19J3xla98WymVhGTZhv+/GIjS2ZuNcae5mh13nBl9lZ18g1aPfc8
73O2quMZv1vz7wH8Dd+0um/uee5WxuHZAq1swo+FWpmCQwu3inizYKs6tXlb
2Yq1y7ZyBCfmb2UlveZrVSdfpFUPPFuqlUF4s3SriIXLteqBPcu0GqPvYq3s
w7NFW/UgX7zVGHbO1epeuZ8VWtmEQ+u0coEzvXKrM4YBq7ZyBFdWaxUxaZVW
dWrztHpvuM/lW+2Lviu1co1eK7Zah3z1Vj1wa91Wa+LKeq0i32lrtzKLPa3f
aozPbM1WDuLfGq16kK/Vaow5G7b6bHFr41Y2YeqprZ5RnqPNWhmET1u08gJ7
tnTEpM1dp7ZLKy+wYedWjpBvOnyNcK9NWq1DvpV74NYOrezAkh0dsXBX98OS
nTxG321a2YdtW7sH+bYew6rtW7lG393cg9/TD2p1hjnTuIMpeLNnK5vi4Wvv
VnZgyT6O+LSX69T2aPU7B3N2d2/yfX0tffd3bww7wBGHDvb6+HGgx9jToa3O
FZYc4jr5Rq0+Kz6nw1zHsO18r9zn4R7DsyMcMezsVuef831sK5vw4/hWpuDQ
CY54c5zr1I5pZSJzjm5lLvmJvha3TnLErdNaPTvYc7oj3hzVymjmn+ExXDyl
lV88cye7B/lZw9es3vc53jtWndfKI87ola0s4Byf6zq1C1udN1y5oJVN5Be3
cgRXLnKd/Ei/T+zvEtcxbMlWv+vgy/lek16XtfIL267y+rhytSOWXOoeXHeN
x5YYvq5o5SD7vtw9yK91fUlHHGLt6zyGc9c74twtrRzBp9ta2YEltzvi062u
U3u11RnjbD3YyjJcubmVlfS6qZW/5He4B4bd18oU/LjfEXsecg9MesBj9L2r
lYlYeKd7kN/tMWy7t5VN9H2klV9857zQ6jxzvh9v9dzj05Ot7MCSpxzx6QnX
qf3V6vnjuXvY+6LvY628o9ejXof8affAsBe9Jn685MjZer6VU+zpZY/hyrOt
TMTCZ9yD/DmPMece3yv3+Yrn8Rm85s8Bzz5r5REevNXKO6x6p5UpGPOuIz69
7Tq1N1uZy5w3WplL/p6vxar3HfGM/44M7zDpY0dMet17Yf4nHsOkD1vZh2cf
uAf5p66z78+9d6z6spVf+PRLK1Nw4gvXqX3TyibO3NetzCL/rpURGPOt6+R/
tvpO4nP93nVM+tufM5Z85TXp9WMr4zDsV6+PT785YswP7sF1v3sMh35uZSL7
/sk9yP9wnX1gP7+38jvlv8Ofz2xl1YydngOei9E6OYUZo3eKODRqJ6eoTdTJ
DsyYuFPEiVE6ecd1E3YyjutGdHKc2n9ek3z8To7gygSdInNGduqHK2N3sg/b
xuzkI/6N0Wlf5GN1GuO68ToZR9+ykyl4UHSyhjzq5NENw1cy/PnGVn6knSKu
xJ3qN/o63OJ3sayTX/gUdjKOXkGn/ZL3OvXguqqTI7jSdHKEs9XvtC9qbaex
e70e62BZ3mkd9l136sH8cTsZzX2O0+m9Ie869cC8KTo5gk9TdbIDS6buFPFp
yk51apN2chBfZ+1kGa5M3slKek3WqU4+TaceGDZTp2cHP2buFLFntk49MGmW
TmP0na6TiVg4bace5NN3GsO2OTqZhT0Ld3IBDxbpFDnTc3fyCAPm7eQIrsze
aU3mz9dpDJ8m6fQdwH0OOr1P5PN06sH8GTqtz3mYq9N3D2vM36kHhi3aaX2M
WaxT5G/BOTvtlzmLdxrDrQU7mYiFC3TqQb5QpzHujf9NCf87S/63kUt2Mg7P
lu5kFtYu18kjrFqhkx04tGKniE/Ld6pTW6eTHTixdidTyJftZB+9lunUm3yl
Tj0wbI1OjuDKmp0iLq7bqR+urNVpjL6rdHIQ51bu1IN81U5juLV6J+Pou16n
Hhi5daezzTnevJM1OLTR8PVPK6s26WQHlmzaKeLNxp3q1Dbo9D2Kr+t36k2+
ma+l7xbujW1bOmLJNl4fb7byGHvartMZ48xt6zr5aZ3c5Nnf3nXs2W8wNGL4
yoev1TrdN/e8YyfvcG63TsZhxh6dHMGkPR2xZ3fXqe3cyVPcPbiTKXiwayd/
6bWL6+R7uQe2HdDJPiw80BF7DnEPTDrIY/Tdp5ODGLa3e5Dv6zH828H3yv0c
1skv7Dmp03nmfB/Z6bzhytGd7MCSYxzx6SjXqe3k94b7PNT7ou8Rnc4qvQ73
OuTHugeGnew18eMUR87xiZ2cYk+neozP7PhOJmLhce5BfoLHmHO6P1s8O7OT
X7j4TKdnlOfonE7WYNV5nc4/ZpzviE/nuk7tqk52YMaVnSwjP7uTlfQ6y+uQ
X+Ae+HRZJ0cw43JHXLza/fDmCo/R96JOJuLfhe5BfrHH8OzSTh7R9xr34L/Z
v6PTGeZM39LJFLy5fvhaqpNJN3ayA0tucsSnG1yndl0ny5hzrXuT3+xr6Xur
e2PYbY44dKfXx4/bPcae7u50rrDkLtfJz/Bnxed0j+sYdonvlfu812N4dp8j
hr3Y6fxzvh/uZBN+PDZ8bdjJoccd8eYR1/HmoU4mMufBTuaSP+FrcetJR9x6
ttOzgz3POeLNA52MZv7zHsPFpzv5xTP3lHuQv+A6+37Je8eqVzp5xBl9v5MF
nOOXXaf2eqfzhiuvdbKJ/M1OjuDKG66T3+/3if295TqG7d/pdxR8edVr0uud
Tn5h2wdeH1c+dMSSt92D6z7y2H7D13udHGTf77oH+f9c398x89ofewznPnHE
uS87OYJPX3eyA0u+ccSnr1ynNt5AZ4yz9Vsny3Dli05W0uvzTv6Sf+seGPZz
J1Pw4xdH7PndPTDpV4/R9/tOJmLhd+5B/oPHsO2nTjbR989OfvGdM+ZA55nz
/U+n5x6f/utkB5aMGCji07+uU5tpoOeP5+4P74u+f3fyjl5/eR3yUQbqgWFj
DbQmfow9UORsjTGQU+xpnIHGcGW0gUzEwlEH6kE++kBjzPnR98p9jjvQPD6D
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
vNr7eAZLdBHLrgvdn4lH8OCmTLyDVbdkYgqMudUWPt3sOLEbMzGXPTdkYi7+
bc6FVbfbwrO7M/EOJt1jC5Ouz9QP++/1Gky6MxP74NkdroF/n+P0/YB7h1UP
ZeIXfHo2E1PgxIOOE3s0E5uYuUcyMQv/8UyMgDGPOY7/UqbvJJ7rE47DpFf8
nGHJwz6TWk9lYhwMe87nw6fnbWHMk65B3gteg0PPZGIifT/tGvgvOk4fsJ/f
rfymfNXnw6pqF70HvBdvZeIUzHjbFg69mYlTxD7LxA6Y8bktnHgjE+/I+zQT
48h7PRPHib3mM/E/zsQRuPKJLXu+cD248n4m9sG2dzPxEf69477w3/MaeR9l
Yhx1F2ZiCjz4KRNr8L/OxKNJfCahyZn48Z0tXPnG8cm2cIvfYj9k4hd8+ioT
46j1pfvF/941yPslE0fgym+ZOMJs/ey+iP3utdk+j3Ng2Y8+h75/dQ32f5iJ
0dzzA382+H+4Bsz7LxNH4FOui9gBS/JdZOFTuy6KE/s7Ewfha7OLWAZX/s3E
Smr94zh+oYtqwLBaF7078KPeRRb2tLqoBkxqdNEadUtdxERYWOyiGvjlLlqD
bR26iFmwpx6tDgkdHWqEhtrPhwaE+oeKoSNDR4Tad9GZ7C+FP9CxvzJ9B3DP
P/054Re8j1qVLjqfeVgs/nnR0OGxXg4d5VrN0DHuoxU61v5ykbtUF31ftQ9/
mGPV0ODQIOrbUqvmOxHrEBruPYuEjrO/aGiE/SVCo0OjQkuFxoROCHUKnWh/
Sa+N1r923G5yaJL+3xf/byeGOrrGyNDitseHlg6d5Fr8ZxYnhE5p9///ZGG7
U+3z16ZTXHcl1yO2bGhs6OTQMrbU4n+ydJxjK7jeeP3VZ7vTXGud0NzQnNCa
oZmhGaFVQtND00Krhc4InR5aPXSm/VW9Nl2v8/9zp+on3/8tZ6zheuzpGprl
M9YKzba/bugs97G2eyG2fmh+aF5oPVvy+oYeDD0Q2iB0tvO2ycV7F7oy9///
mdX/35X7bxg6N3ROqHvowtAFoc1DF4cuCm0RusT+Zl4jb+PQ+aHzQtuHrgtd
G9rUNRaENrElb8vQpa7VK3R16KrQtqFr7PcOXe9a27kesa1Dl4cuC21lS60e
oSsc6+Z7cOcdQzeGbgjtG7o3dE9ol9AtoZtDu4VuC90a2j10u/1dvUbeRr4f
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
W1FM6l5ULZjRM2yPoviyTVE+/GBt66LYuUXYzYua+93C7loUX4hvVRQLWNul
KFaytmVRLMayH77sHHanonhDLj6M2CPs7kWxavuw2xXFvm3D9iqKf1j6g2XE
ifH9w5149sztgWEPKGpuDw57UFGc2DfsPkXxo09RPuxgbe+ieM/9NiuK+1g+
I2aU+F5FMZEeuT/zytqeRc0tljswq4cUdTazy/PBhyv0Qn9wih77FsW8/cPu
VxT7sPQHE4kTg1X9Q4f7Gc8LneV3dL59Zv2o0MCiODHIfslrRxbFheNDI4pi
wUj7RcePKIojxI8rilmsDSiKmwPcB5wYHhpWFPuOsw9jRrkubBoaGlIUz44O
DS6Ka4PdX91xYu1d79ii5nVC6JSi5hY7vigGjQmdUBQbTgqdWBQzTrbfyWvk
nehZ5M+mMAl+jS3qNwc1Rhf1XTrafS/rOLXgxMTQqUW9X5NDk4pix6nuj3ma
4lg7Px/mbXn3y3krex+1Wr7fMUUx9xh/RnDoNNeCC2eGziiKGTNDM4riyyz7
a3iNPNg5PTStqJk/L3RuUUykxulFMfd058Gq2a4F584u6h2CL+fYhx/nu9aG
rkcMTs0NzSmKfXNcC4ad5RhMuSC0oKh5vTp0VVGzeo195uzi0EVFseHS0CVF
cW2Bz4YflznWxfebWhT3p/rz2sL7qMXvqR3D7lDU7FL7wqL4dLlrwYxr3QeM
uc5+d+fSd+/Q9Y7BwStDVxTFwitcaxvfiRi/iXbwPn4b9XZt1m5wLdhwZ+iO
ophxl/09vHZ7Ue/+G6HXi2LHo6FHiuIN8duK4gdrDxfFINZuLYq72FuK4spD
oQeLYs3D9uHQ46HHiuLLfaF7i+LfPaG7i+Lc3e5vX8eJ9XW9B4qa3ZdCLxY1
u6+EXi6KDc+Eni6KGc/a7++1p4p6z/4N/VPUe/af/cMdf7IoVj7m+x/mtSeK
+g57wndgZl712czQa/aPdi/0N8g9vlAU/54PPVcU555zf0c5Tmx/3+/+ohh8
vz+jY/1MOAOuvRt6pyhmvB96ryiWfGB/lNfIg4tvhd4sihlfhb4sirnUeLso
1r7tPJj1oWvBj8+L+r0F/76wD0e+dq0JrkcM9n0c+qgo/n3kWrDsE8fg1Leh
b4qa/99DvxU1w3/YZ7Z+CH1fFC9+Cv1YFMO+8dmwZKFj8/w8/y7qO4C78h5P
8z5qwQ7+n8N43qe59ndF8eln14Ilf7oPOPKX/SnOpe+zfA4x+Pdr6JeiOPiL
a830nYjB8k99f575etHDuiU98w3Crl/S3JfDlkpiTzFsoSRGLBp2kZIYsVhJ
PlxYvCQfXrCPPTCLffmSGMe+DiUxlLVcScxgrX1JXKuHrZU0byuGXaEknrFW
LYlhlZL6g8HU4HOEd8SJwSDqtUqa3c4l1WJuVyrJhwtLh+1UEieWKcm/uai1
pUr6HYZ/U1G/z7A32hJfsiQOLRd22ZJirC1REuM6lvS5MDNtYVcuaYaSknx4
x/2WL4krxOkP/rFGXXhGbfrjt+Et7gnucr9mSfzFNkpiOpbPETasGXaNkpjR
tSQfXrC2ekksXCVsl5LYsXHYjUriDfHVSuIHaxuWxCDWVi2Ju1j2w5VuJb1D
sIZcfBixadhNSuIL79o6JfFv7bBrlcQ5LP3BR+LEmNVeYbcpaXa3Lclnbrcr
yYcTW4bdoiR+bFWSz8xtHnazkjhCHB9mZ2HTktiG5XnwfcBnQAz2MQfMBgyl
dz4XmNe9pPswP9uX1AfzxP8vCD5zzpnkwSx671kS/3qE3bokDmLpFT4SJ8bf
5fPnUv7MCtd2LOn/z2SlajAudGpVvNkt1nYtiQF7hN29JH7sWZIPF1gjD14c
FPbAkjiCPaAkZlFjl5K4id25JDbtVVIteLF/2P1K4kffknxYc3BJdeEj9YjB
vn3C7l0S57DUgmX7lhSDSdTrUxK3DimpFrM7ODSoJHYcGTqiJD4eFvbQkma9
f+jwkvgxwH47r5HHdye5/UpiMJYzCq7HHvg00GfAkaPsw5ij3UfFvRBjnoaG
hpQ0V0OcxzsyPzSvpPk7xnnLleN3bmhsWfzlrtwfJg0LHVsSF0aGji+JGSeE
RpfElTH2l/DaqJLYeVxoeEmMmBg6tSTmUmNESSwe4TwYdqJrwZhTQuNL4uAE
+/Bmkmt1dj1isObk0EklMfEk14JDYx1r+R7cmfmZEppc0tzOCc0uaZ6mhaaW
xInTQ9NL4scZ9lfxGnkdfD8+ozbXo7/MNU4raV5P83nw6UzXghlzfTaMOcv+
Wu5lVknzPM8xODgzNKMkFs5wra7OJQbLzvYzhmfnhs4p6b15LvRsSWxYEDq/
pJm/MHRBSQy4yP6mXiMPXlwbuqYkfmGvLokv1DivJNae5/Ng1sWuBSeuDF1R
Eleusg93rnPdXq5HDA5eGrqkJP5d4lpw5zLHerje5SUx7HrXYnbvDt1VEktu
D90W2il0U+jGkphxS+jmklhyq/2dvUbejs69oSSW3eAzdnM99sCsO3wG3LnT
Pry4x33s5V6IMU/3he4taa7udV43Px+eGYy533lb+37cGX494BjMetA+8/xy
6KWSePFY6NGSWPJE6PGS+PKk/X5eI+9g5z5SEhOxD5fEpKe8B049bR/WPF/S
OwRfXrB/oPc9VBJ7XnQMbvGuPVMSv55xrcHulzyY9IrvwEy+Fnq1pLn9KPRh
SWx61XnM2ZuhN0qaN+zrJfHj7dBbJXHkLecd4L74vODNO87jdwpcGVcSD173
2XDr/dB7JfHjY/cBOz6xP8rxd0viyqeOjXG/H5TEwQ9cizM+cx6/73kXeb+W
c4wacO2L0Ocl8ePb0DclMeP70HclseQH+1O8Rh6z1D6Y3SqLI3+G/iiJQdT4
uiRWYr8qiVk/uha8+C30a0n8+N0+DPrLtWa7HjHYtzD0U0n8+8m1YNnPjs1w
vV9K4tY/ob9LmuNa9Fgt633nPw7xX0nMyMc/58piSaEsH46wRh7v2fph1yuL
g3+7P2aGGv+WxLt/fR7MKpZVC17UyzqbWWqU5cMUeqmUNWfNsmKwrxy2VBb/
sNSCZeQS4/3eoKyezvRduT/86lDW84BHi4ddrCx+LBG2Y1lcWbIsH6awRh78
W6Ss/bCjc9gVy+IjNRYti7tY8uDUUmXVgjvLl/UdDmtWKMuHLyuVVQsOUY8Y
vFs6bKeymIelFlxbpqwYfOWd4nOBR21hVy6LBWuF7VrWXGVh07IYsErYLmWx
ZNWyfOaPNfJgB89w3bL4Rz36g2XUSMpiHJbz4NNqZdWCHWuXdTYsWacsH07R
y5pl8YbaxODcGmFXL4t3WGrBQXKJwaBuZT1LnvGRoSP87Afahwubht2kLE50
L8uHSaxtXBYXtgu7bVks2L4sH2YR36gsjhDvVRbvWNuwLBZi6QNmbBO2Z1ks
IRcfdvQuqy782jLsFmUxbvOwm5XFQiz9wT/ixGAQ9XqUNfN7hd2zLI5g9yiL
PTuF3bEsRuwSdueymLFrWf6XJa2Rx+8tfPbBoN1jbbey+EWNHcpiHpa+4RBx
asGMfcLuXdbM9Am7b1kcYY3+mKf9yorx++4rnwfz6JfzYA37qAWPud/WZXEZ
u1VZHNq/rFow45CwB5fFiUPD9iuLH4eV5cMO1siDeQeGPaAsdhwdGlwWd6hx
UFl8xJIHpw4vqxaMOMrvEMwYZB/uDHGtqusRg3cDQv3LYl5/1yr4fSTGHB4T
GlrWrI4JnVDW7J5oH3YMDw0rixMjQseVxbWhPhuWHO8YTOd+fcviPpbPaxHv
oxbfkzxXnmd71z62LGaNdC14cZL7gB8n2285l76XLevPFsRg3+jQqLL4N8q1
lvSdiMGv8WX9mQRuTQidwrvEu1aJd6kifkwKTSyLGVNCk8tiyWn227xGHryY
E5pdFkews8piEDVOLYuVp/o8mDXVteDFjNCZZfFjpn1YM9d1u7oeMdg3PTSt
LP5Ncy1Ydrpjq7veGWVx6yzXYm4vDl1UFmMWhM4vi1Nnh+aXxYxzQ+eUxZLz
7HfzGnnrO3deWdyd5zM2dj32wLILfAbsuNA+/LjEfWzmXogxW5eHLitrxrCX
lvWuPx96rqxZvMJ5K/i58SxX8125P1y7KnRlWYy4PnRdWfy4MXRDWay5yf4O
XiMPjl4Turqs+b8ndHdZfKTGtWXx91rnwa2bXQvm3Rm6oyzW3GUfltzrWnu7
HjGYdWvolrI4eItrwbPbHOvpe3BnWHN/6L6y5vjp0FNlzdlDoQfLYsYjoYfL
Ysmj9g/0Gnm9fD8+oz6uR399XeOBsmb1AZ8Hsx5zLXjxjM+GH8/aP9y9PFnW
d9tzjsG+J0KPl8W/x13rMOcSg18v+BnDrZdCL5b13hRjFgsVMebV0Ctlzf3r
odfKYsYb9o/xGnkw4uPQR2WxA/thWZyixstlsfJlnweP3nQtGPF+6L2ymPGB
ffjyieuOcT1i8O7t0Ftlse0t14Jf7zg2yvXeLYtVn7oWs/tj6IeyWPJtWRzi
vf4i9HlZzPgq9GVZLPna/gSvkTfeuZ+VxbXPfMYk12MPzPrOZ8Cd7+3Di5/c
x1T3Qox5+jm0sKy5Wui8QX4+PDMY84vzRvp+3Bl+/eoYzPrNPvNcj+dZq4gX
f4f+Kosl/4b+KYsv/9mf5zXy5jr3z7KYiP2jLCbxH3JjD5zKVeTDmlJF7xB8
KVfkz/a+38tiT6WiGNziXctXxC8steBUtaI8mNSo6A7MZCtss6K57RR2qYrY
xBp5zNkiYTtUNG/Y9hXxY7Gwi1bEESx5s9wXnxe8WbyiPH6bwJXby+IBNTgb
bi0RtmNF/Fi6oj5gxzIV+XCNOLXgyrIVxWAW/S5ZEQex1OKM5SrK291n3ubz
l68oBtdWqMiHH218Z1bEjDRsUhFLsop8OMIaecxSz7A9KuLI2mHXqohB1Fip
IlZiO1fErC4V1YIXa4ZdoyJ+dK3Ih0HrVFQLDlGPGOxbNewqFfEPSy1YtlpF
MZhEvdUr4tZ6YdetaI63CLt5Re97t7AbVMSMjcJuWBFLNq7IhyOsdfN7NjB0
ZEUcpB79MTPUWL8i3mE5D2ZtUlEteLFlRWczS1tV5MMUetmsojnbuqIY7Ose
dtOK+IelFiwjlxjM5X7cGQ7x2bMffm1T0fNg/vcOu1dFbNo+7HYVsWSHsL0r
YsyOFfnwhTXyYCK521bEWmyviti0U0V7YNXOFfkwaPeKfm/BoD0q8mEq++gJ
Bu1ZUQx+8btsl4rYh6UWrKJf8mDTPhXdAR71CbtvRVw4LOyhFTGMNfKYsb5h
96+ITdj9KmLDgWEPqGgWseQV/TyPqIg9B1WUBzuO8vOGd9TgbJh1SNiDK+LR
4RX1AVP624dnxKkFbwY4Bvvot19F/MNSq+DzyePvB/lz+bJm2CD3wfO/ILSg
IkYcGzqmImYMs9/02tCKGHFS6MSKuHCy/YbjQypiCvExFbGPtaMr4jh2cEX8
OCE0uiKujLEPR8a6Liw7PjSiIt4dFxpeEReHu79FHSe2hOuNqmj+p4ZOq4gp
2CkVceiU0PiKeHFqaEJF/Jhof0WvkcdvrxW9Dx5NDk2qiGXUGFcR48a575Ud
pxb8mB6aVtEsnRE6vSKmTHN/zNmZjvFbr7PPT9wv563qfdTq6PuNrIjRI/0Z
waQZrgU/zgrNrYgZ80PzKmLJ2fbX8xp58G92aFZFHLkkdHFFDKLGnIpYOcd5
MOsc14IXF1b0DsGPi+zDoEtda3PXIwb7zgudWxH/znUtWHa+Y7Dm8tBlFc3/
TaEbK5rhm+0z81eFrqyIH9eErq6IcZf5bBhzrWNdfb+ZFX0HzPTn1cv7qAUH
F7iPnq59RUXMus61YMkt7gPG3Gq/h3PpG07d5hjsuyF0fUX8u961dvSdiPF3
+czlMubc7d4Py+6wD4fuDd1TETPuD91XEYcesN/Ha+QxB++H3quIHU+FnqyI
ZdS4uyL2Ye+qiFkPuhb8eDz0WEVcecI+rHnatQ5zPWJw7eHQQxXx7yHXglOP
OHaI6z1aEZOeDT1T0dy+FXqzIh69EHq+Ik68HHqpIn68Yn+w116s6J0rVYO1
VTHuGfc30DWeq4jBz/k8+PSqa8GMt3028/OO/eHu5Y2KZutdx+Dg66HXKmLh
a641zLnEeO/LVfV0sO/K/eHaB34ecO2T0McVMeOz0KcVseRz+2O9Rh5c/ND7
YcaPoR8qYi41PqqItR85D2Z94Vrw47vQtxXx73v7cOQn15rqesRg31ehLyvi
35euBcu+dgz2vOfPBWb9HFpY0QzzH0v+r6LZ+i30a0W8+CP0e0X8+NP+LK+R
x8zxDAtVcW6h+5vhGr9UxLVffB5M+su14EeuqrNhR74qHzbRy78VzTO1icG8
f0J/V8S+v11rvnOJwalKVc+SZ7xJ2I2reuabVuUz582wjarmvlWVD3tYq1fF
iE5hl6qKEUtX5cMm4rWqWEZ8yapYyVq1Kl5i6QNGLBG2Y1XMIBcfvixTVV0Y
t2jYRapiWYew7atiGJb+4BxxYnCIeotXNfNp2KQqjmDbqmLP8mGXq4oRK4Zd
oSpmdK7Kv7OiNfImh77l37OoikErV/XvX8AvaixbFdew9A2HiFMLZnQJm1U1
M6uGXaUqjrBGf8zTalXFeI/3CLt7VcyjX86DNeyjFpzlfotVxW4snxEcWr2q
WjBjnbBrV8WJ9cKuWxU/1q/Khx2skQfzuoZdsyp2bBF286q4Q421quIjljw4
1S3sBlUxontV7xDM2KwqH+5sWVUt2EM9YvBuo7AbVsU8LLXgF+8jMeZw67Bb
VTWrO4XdsarZ3bkqH3ZsE7ZnVZzYNmyvqrjGPs6GJdtVFYPp3G+NqriP5fOC
L+yjFr9L4Mo3FXGN2j2qYtb2VdWCF7tU1Qf82LUqH36QS9/s362qGOzbIWzv
qviHpRYs407EJvnMr30+z5/98GvPqt4J+LFv2H2qYsZ+YftUxZL9q/LhCGvk
MQejQiOr4sjhocOqYhA19q6Kldi9qmJW36pqwYt+YQ+pih+HVuXDoP6uBYeo
Rwz2HRj2gKr4h6UWLDuoqhhMot7BVXHriNCAquZ2eGhYVWw6KjSwKk4MDg2q
ih9H26947Si/cxeEFlTFwQHur+QaR1bF4CN9Hnwa4low4zifzfyMsN/evRxb
1Wwd7xgcPCY0tCoWDnWtlnOJwVzux50X92fPfrg22s+DuZ8aOq0qxp0UOrEq
fowNnVwVV8bZX8Zr5HVy7piq+Io9oSpOjfceuHWKfdgxqap/VwyWTLa/pPfR
E1yc4hjM4t8pm1AVBye4Vup+yYNB03wHmHV6aHpVLDg7NL8qVk13HnM2I3Rm
VfOGPaMqjswKzaxqLmc6bxM/z/Or4s1s58GUC/28V3MNzoZfc0NzquLIOe4D
rpxrf23HqQVfznMMDs4LnVUVC89yrY19/nm+83dVfQfAr4vcB8//1dArVc38
5aHLqmLAFfa38tqlVfHi5tBNVfHiFvtbOn5JVVwjfmNV3GTt4qrYebHPhhc3
hK6vih832oc1t7ouvLsmdHVVXLsqdGVVPLvS/fVynFhv17uuqvl/IHR/VUzB
3lcVg+4I3V4VL+4K3VkVP+62v6fXyOM94zvz66p4dG/onqrYRo3bqmLcbe57
H8epBT8eCj1Y1Sw9Enq4KqY86P6Ys0cd47feXj6/j/vlvAO9j1rb+37XVsXx
a/0ZwaTHXAt+PBN6uipmPBd6tiqWPG//CK+RB/+eDD1RFUfeDL1RFYOo8VRV
rHzKeTDrBdeCF69V9Q7Bj9ftw6C3XGuY6xGDfS+FXqyKfy+6Fix72TFY807o
7arm//PQZ1XN8Bf2mfn3Q+9VxY8PQx9Uxbi3fTaM+cixQ32/x6v6Dnjcn9cJ
3kctOPiK+xjl2u9WxayPXQuWfOk+YMxX9kc6l77h1NeOwb5PQ59Uxb9PXGuc
70SMf6+ff7eMf+8HPn1f1azuW4vnH7qnJk78HFpYFXt+sX+6136qigU5/sdP
apr5fE3+dMd/rIojxP+rimus/VAVB3/w2bDv39A/VTHoP/uwpFBTXRj0R+j3
qpj3W+jXqtj3q/ub5TgxmPR36K+qZrd91GjVNMPYZk08Koct1cSJathKTfyo
1eTDDtbI4+8L+e3L71z41Ii1ek1spUaxJgZj6Rs+EacWzFgkbIeaZmixsIvW
xBHW6I85W7ymGO/3JmE3romJ9Mt5zB77qMV7v2lNeXN91z+rYlLHmmrBjOXC
LlsTX5avyYcfrC1TEzuXCrtkTXO/StguNfGF+NI1sYC1rCZWstapJhZj2Q9f
0rBJTbwhFx9GrBZ21ZpYtVLYzjWxb8WwK9TEPyz9wTLixOb4Tjx75naDWFu/
prndMGy3mjixVtiuNfFj7Zp82MHamjXxnvstURP3sXxGzCjxNWpiIj1yf+aV
tdVrmlssd2BWN6rpbGaX54MPV+iF/uAUPa5XE/PWDbtOTezD0h9MJE4MVm0W
truf8dDQEL+jx9hn1rcOu1VNnOhRk8/8s7ZlTVzYOexONbFgl5p8+ER8i5o4
QnzHmpjF2uY1cRNLH3Bih7C9a2IfufgwZtea6sKmbcP2qoln24TtWRPXsPQH
B4kTgzvU276med0/7H41zS22T00M2iPs7jWxYa+we9bEjL1r8uEFa+Tt6Vnk
z6YLza99avrNQY3davouxdI3TCJOLThxQNi+Nb1fB4U9sCZ2sEZ/zNPBNcX4
LuH5MG9wkH45j/eSfdSCtdxvu5qYi+Uzgmv9wh5SExeOCA2oiRkDQ0fWxJej
7Be9Rh7sPDx0WE0zf1xoeE1MpEb/mpjb33mwapBrwblj/Q7Bl2H24ccI1+rg
esTg1NGhwTWxb7Br1f0+EoMpI0PH1zSvp4TG1zSrE+wzZyeERtfEhhNDY2ri
2vE+G36c5Bi8536H1sR9LJ/XUt5HLX5PwZW2mmaX2qNq4tPJrgUzTnUfMGai
/Y7Ope+VQ5Mcg4PjQmNrYuFY11redyLGb6I27+O30cquzdpk14INZ4bOqIkZ
M+yv5rXTa3r3rw9dVxM7zg2dUxNviE+viR+snV0Tg1ibVhN3sVNr4sr80Lya
WHO2fTh0fui8mvgyJzS7Jv7NCs2siXMz3d9ajhNbz/XOqml2rwxdUdPsXh26
qiY2XBy6qCZmXGJ/M69dWNN79lro1Zres9ftd3f8gppYeZ7vv6nXFtT0HbbA
d2BmrvHZzNC19rdxL/TXwz1eXhP/LgtdWhPnLnV/WztObF3fb25NDJ7rz2h7
PxPOgGu3hG6uiRm3hW6tiSW329/Va+TBxRtDN9TEjAdDD9TEXGrcVBNrb3Ie
zLrDteAH/y0Mfm/Bv/vtw5GHXGt/1yMG++4K3VkT/+50LVh2t2Nw6pHQwzXN
/wuh52ua4RftM1tPhB6viRdPhZ6siWEP+2xY8rRjQ/08X6npO4C78h4f5n3U
gh1v+Hn3c+3HauLTM64FS15yH3DkZfuHOPfRmhjzimPw77nQszVx8FnXGug7
EYPl9/j+PPN6PRhW1zNvhm3UNffvhd6tiT3vhN6uiRFfhr6oiRFf2YcLX9sf
6X3sGeF9b9XEOPZ9XhNDWXuzJmaw9llNXPso9GFN8/Zr6JeaeMbaBzUx7H33
N9w1+BxPcJzYONf7tKbZ/c21mNvf7cOFH0Lf18SJH+2f5rXvavodhj+lJo5i
J9sS/7YmDi0M/eQYa9/UxLhv/LkwM3+G/qhphv6yf6bv93NNXPnD/Z3hNepO
d236y9w3PY31/T6pib/Yj2ti+sf+HGFDMZ5noS5mlOry4QVr+bpY+F/o35rY
sUisdaiLN8RzdfGDtfZ1MYg1/ocp4S6W/XClVdc7BGvIxYcRi4VdtC6+8K5V
6+JfJWy5Ls5h6Q8+EifGrC4fdrm6ZneFunzmdsW6fDixVNgl6+JHp7p8Zm6J
sB3r4ghxfJj9T+jvmtj2t5/HfH8GxGAfc8BswFB653OBeYvXdR/mp3NdfTBP
K9XlM+ecSR7Movdl6+LfMmGXrouDWHqFj8SJwTX+Gz/Ugl9JXf/dn0GLBwNC
LywuFnSLtQ3qYs8qYbvUxYPVw65WF0vWqMuHEaytWhenyM3qYiU2rYtHa9a1
Bz51rcuHH+uGXacudqxXlw+DNqyrD7iyfl0xmLV22LXq4iCWWjCUfsmDR9Qj
D2ZtVFct5rZn2B51ff9tGnaTujiyVdgt62Jl97pizP3mYTeriyVb1OXDXfZt
XBd72EcMJm1dVy2e7dDQkLqYsU1dZ8MUzicPplKD/mBPr7rymLPtw25X14xt
W1eMmWMNHx7RF70yo73r2gPndgy7Q11zfkDYvnUxYtewu9TFj93D7lYXY/ao
y4clrJEHZ8nduS7+Yneqi1t71rUHlu1Vlw9L+oTdty7e7FeXD4/ZR0/wcf+6
YvBmn7B718UdLLXgJv2SB1+5B3eDWwfWdR/m+KjQwLoYd1BdMWbr0LD96mLG
4aHD6mJJf/twhDXymENyD6lrRrEH18WkAd4Dw46wDy8G+Wz4Mdg+s80++oA9
RztWco9H1sXEI12r7veCvJ/5nBrxuTXEtWP83sC2YaFj62LQKaHxdXFiROi4
uuZ/ZOj4ungwyv5iXiNvEecOr4uvw10XTo32Hrh1gn0YcXLopLqYMdY+DJrg
PuDNOMfgy4mhMXUxcYxrLe9+yVva9ciDX6e6FvM/MzSjLgZNDk2qiyVnhE6v
i09THIMlU0On1cWYafZX9r6JdTGIfdPrYtOZrtXyZ8nnCy9m+ew1fD55K7kG
/cGV2c6DR2eF5tbFlDmOreM1fNg0z3kwaL59mHS2feb8vNC5dc3z1aGr6mLA
+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
xDtqjG6JhdhRLfFsrGvBjomhU1tiyST7sGaq67a5HjGYNz40riX2jXMteHeK
Y51db0JLPJrmWrBgXuisljgyOzSrJTadETq9JY7MCJ3ZEldm2l/da+St6tzp
LTFuus/o6nrsgVVzfAb8mmsfjsx3H+u6F2Jw5JzQ2S3x5mzn8ZtuDZ8Pb851
3oq+H3eGZec5Br/Ot8/83xi6oaX5vzh0UUssuTR0SUuMucz+Fl4jbzPnXtgS
17AXtMSmy70HVl1hH3Zc09I7BFOuC13bEi/Zt6Al3lzvGPziXbuyJfZd6Vo7
uF/y4NRNvgMMuiV0c0tcuD90X0ucutl5zPDtodta4hT21pYYc2fojpZm/Q7n
beK++Lzg1F3O4zub95TZ2NU1OBvG3BO6uyUePeA+YMqD9vd2nFrw5iHH+rjf
e1ti372uBb8edh7/N0X+fo2/b4NPj7U0q2u1j/coNKu92PNU6MmW2PNM6OmW
uPOs/f5eI4+ZfyP0P5bOOo6qamnDqKgIcvqcfVrAAAsDxUJEERsMVAxAVECR
UFBKUQRpEARUsLu7u7v12mIndrfiN8/3vn+8v7mzZq1Zs/Ze85wN1+t9s60Y
gX2jrfhFjqfbinfYp9qKUy86F+x4LfRqW7Hkdfuw5G3nHe18xGDby6GX2opx
LzkXXHvFsVHO97+2YtU7zkUffx76rK248nHoI7+D90LvthU/Pgi931Zc+dD+
RI8xb7znLmsrti7zHpOcjzXw6xPvAYM+tQ87vnAdp7oWYvTZl6HlbdVvyz2P
+52Ld5JNiTdfeR5/r8n3N9/aI31Wzg+/vgl93Va8+DH0Q1ux5OfQT23Fl1/s
n+4x5sHU70LfthUXVoT+bSuukeP7tmLl954Hq351Lvjyd+ivtuLNP/ZhzH/O
tdT5iMGv30O/tRX7fnMu2PaHYzN8Ds4Md1aKZ9AipR5uG3bNlHqrZdhVUuLH
amFXTYkrq6fkwwbGmDfL5+MZwTjyUR/9SY6VU+Ialv3gVKuUcsGPVEp7w5V0
Sj5sopY2KbEpk1IM3rUOu0ZKzMOSC64xlxicyqf0jmFSMWwhpXuza9hdUmJP
OWySEieqYSspsaeWkg87GGMeLFgv7Lop8QK7Tkr8IkcpJd5h2Q9O1VPKBTM6
hG2fEkvWTsmHHR1TyguPyEcMljXDNlJiHpZcsGmtlGIwiHztUuJQp5Ry0btb
hO2SEks2TYlDMGnDsBukxIyNw26UEks6p+TDEcaYB7+Yu35K3xxY9oBN5GMN
zNospT3gzuYp+fBiy5TqgCPUQox+2ips15T6Css8fjN4P7wzGLN1SvPgMefj
zPBrm5RiMGvblHz6ea+we6bEix3Cdk+JJTuG7ZESX3ZKyYcrjDEPfjF3+5SY
iO2WEpN6prQGTu2ckg9rdkvpDsGX3VPyYTPrtkuJPXukFINb3LVeKfELSy44
Rb3Mg0m9UzoDPbl32D4p9e0hYQ9OiU2MMY8+2y/svin1G3aflPixf9i+KXEE
yzwYT108L3hzQErzzjJX/jQPyMHecKtf2ANT4sehKdUBO/qn5MM14uSCKwNS
isEs6j0oJQ5iycUeA1Oad6b3/MP7H5ZSDK4NSsmHH0NCg1NixlGhoSmx5Gj7
K3mMefTSzNCMlDgyJjQ6JQaR48iUWIk9IiVmDXMueHFsaFRK/DjOPgw63rnW
dD5isG946JiU+HeMc8GyEY6t4XwjU/qNGRcam1IfTw1NSem+TwxNSIkZJ4VO
TIklk+wXPTbR9+yG0PUpcfAE15d3jvEp8W6894NZJzsXvDjNe9NL0+zXXcup
KfXZdMdg3+TQKSnx7xTnqnkusVY+H2du72fPevg1y++D/j8ntDQlNs0LzU2J
JfNDp6fEmAX2O3mMeet57pyUWIudnRKbzvAaWLXQPgzinyfjewsGnW1/Ha+j
Jhi0xDH4xXfZopTYt8i5urhe5sGmc30GeHR+6LyUuHBV6MqUGHae59FjF4Uu
TIlN2AtSYsMloYtT6sWLPW9Xv8/rUmLPpZ4HO270+97aOdgbZl0euiwlHl3t
OmDKNfa7O04ueHOtYzu63itS4t8VzrWL92cef+bmN+BJM+wm18H7/yT0cUqM
uD10W0rMuMN+H4/dmhIjHg49lBIXHrHf2/FbUmIK8QdTYh9jN6fExZu9N/x4
IHR/Slx50D4cedR5Ydk9obtT4t1doTtT4uKdrq+v48T6Od99KfX/C6HnU2IK
9rmUOPRE6PGUePFU6MmU+PG0/cM9xjy+vQ73Onj0bOiZlFhGjsdSYtxjrnuw
4+SCHy+FXkypl14JvZwSU150ffTZ/xzjW+8I7z/U9bLfcK8j14E+370pMfpe
PyOY9KpzwaN3Qm+nxIx3Q8tSYsl79sd5jHnw743Q6ylx5IvQ5ykx6K3Qmymx
8k3Pg1nvOxe8+DSlOwQ/PrMPg5Y71xTnIwb7Pgx9kBL/PnAuWPaRY7Dmq9CX
KfX/r6FfUurh3+zT89+GvkmJH9+HvkuJcV96bxjzg2PH+XyvpfQb8Jqf12yv
Ixcc/Nh1zHTur1Ni1o/OBUt+dx0w5g/7MzyXuuHUn47Bvp9DP6XEv5+ca4HP
RIz/7Tj/2xL+t03w6++U/tlZWPVv6J+UONQiHb97KTFj5fjPK6XFoVXS8uEI
Y8yDC6mwbdNiB3bNtFhGjhUpsW+F94BZLdPKBT9ah10jLa60ScuHI+m08sIm
8hGDa6uFXTUt/mHJBadWTysGj8jXKi0mZdLKRd/Ww9bSYkw5bJIWm/Jhc2kx
oxi2kBZLSmn5cIQx5sFT5mbT4i6WPWAS+VgDyypp7QE7qmn58KORVh1whVqI
0VtrhW2m1WNY5nHXdwu7a1q92C6tec+FNs3EN3RGnOasnB+udQjbPi1GdAy7
Xlr8WD9sp7RYs0FaPixhjHlwdJ2wa6fV/1uE7ZIWH8mxblr8xTIPbm2YVi6Y
txk1pcWazdPyYcmWaeWCQ+QjBrM2DrtRWhzEkguedU4rBl85B2eGNVuF7ZpW
H+8ctmdafbZt2G3SYka3sNulxaPuYbdPiyOMMQ/2cz6eERwkH/XRo+TYOq1e
xbIfzNohrVzwoldae9O3u6TlwxRq2SmtnuZdEYN9O4btkRb/sOSCZcwlBr92
T+sdw609w+7he3NyaFJajOkTtndafb9P2L3TYsa+afmwgDHmwYj+YQ9Nix3Y
Q9LiFDn2SouVWPaDR/ullQtGHBS2X1rMODgtH74MSCsvTCQfMXi3f9i+abEN
Sy74dUBaMThEvgPTYtXAtHLRu8eEhqXFkqGhIWkx6PCwg9JixpFhj0iLJYPT
8uEIY8yDYcw9LC2WYdmjhfOxBmYd5T3gztH24cVw19HStRCjn0aGRqTVVyM8
j98V3g/vDMaM8jw4y/k4M/w61jGYdZx9+nlqaEpavBgbOiEtlowPjUuLLxPs
Zz3GvLTnHp8WE7Fj0mLSRK+BUyfahzWn+A7Bl8n223rd6LTYc6pjcIu7dlJa
/DrJuequl3kw6TSfgZ6cHpqWVt+eEVqQFpumeR59Nis0M61+w85Iix9zQrPT
4shsz1vTdfG84M1cz+PbBK5skhYPZnhvuHV6aF5a/FjoOmDHIvsdHScXXFns
2Aaud35aHJzvXOxxpufxPbSJ17H/WY7BtbPtw4/zQuemxYwLQuenxZIL7W/l
MebRSw+E7k+LI9eErk6LQeQ4Jy1WYpemxayLnAteXBm6Ii1+XGUfBl3rXD2d
jxjsuzR0SVr8u9i5YNlljvVwvsvT4tb1oevS6uO7Q3eldd9vCt2YFjNuCd2c
Fktutb+nx5jHPfsk9HFaHLzO9e3uHDekxbsbvB/Mus254MU93pteutf+fq7l
zrT67D7HYN8dodvT4t/tzrWv5xLbwefjzP387FkPvx70+6D/Xwq9mBabHg09
khZLHg89lhZjnrA/0GPM6++5D6fFWuxDabHpSa+BVU/Zh0H8fj+bFoOet3+I
11ETDHrBMfj1TOjptNj3tHMNc73Mg00v+wzw6H+hV9Liwnuhd9Ni2CueR4+9
HnotLTZhX02LDW+G3kirF9/wvJP9Pj9Kiz1veR7s+NTve5RzsDfMeif0dlo8
et91wJQP7J/gOLngzYeOjXe9y9Li3zLnmuT9mbfE36qwHzZ95jp4/5X4Jipn
xIivQl+mxYyv7U/z2PK0GPFb6Ne0uPC7/dMc/yItphD/JS32MfZ5Wlz83HvD
j59DP6XFlV/sw5E/nBeWfR/6Li3efRv6Ji0ufuP6ZjtO7HTn+zGt/l8lzrRy
RkzBrpQRh/4O/ZUWL/4N/ZMWP1bYX+Ix5m1un3XwqEXk+C8tlpHjz7QY96fr
hkn/ORccWS3mr5pRL7UKu3pGTGmZUX302RoZxbq4JvaDf9TLfnCHdeSa5/P9
kBajf/AzgkmtM8oFPzJh0xkxIxc2mxFL8hn5cIQx5sG/tmHXzIgjjbD1jBhE
jlRGrMQyD2YVMsoFL6oZ3SH4UcvIh0HNjHLBIfIRg32lsMWM+IclFyxLMorB
mnZh18qo/zcMu0FGPbxRRj49v3bYDhnxY92w62TEONaxN4xZL6MYfOd8bTL6
DcDyvOAH68gFB+kD6oBx5G6fEbM6ZpQLlmycUR0wpnNGPoxkLnXDKf6cQQz2
rR+2U0b8w5ILxnEmYnxzsYZ88GuzjP6sch7vPxv3KSMOdQ27ZUbM2DrsVhlx
aJuMfDjCGPPgws5he2bEDuxOGbGMHFtkxD5sl4yYtW1GueBHj7A7ZMSVHTPy
4UivjPLCJvIRg2vdwm6XEf+w5IJT22cUg0fk654Rk3bJKBd9u1/YfTNiTJ+w
vTNi0+5hd8uIGXuG3SMjluyVkQ9HGGMePGXurhlxF8seMIl8rIFle2e0B+zY
JyMffvTNqA64Qi3E6K0Dwu6fUY9h+/qunxI6OaNePDCjefyubJ7R+4PTnJXz
w7WDwvbLiBEDwvbPiB+HhR2YEWsGZeTDEsaYB0cPCXtwRv0/PHRMRnwkx6EZ
8RfLPLh1eEa5YN5RoaEZseZo+7BkhHOt6nzDMmLWkWGPyIiDWHLBs8EZxeAr
5+DMsGZUaGRGfXxiaGJGfTY6dFxGzDg+NCYjlpxgv63HmAf7OR/PqJXzUV8b
5zg2o1491vvBrLHOBS9O8t707ST7BdcyIaOePtkx2Dc+NC4j/o1zrrznEoNf
k/2O4daU0Km+N7eFbs2IMdNCp2XU9zNC0zNixkz77TzGPBixKLQwI3Zgz8iI
U+SYmhErp3o/eDTLuWDE/NDpGTFjgX34sth5N3Q+YvBuTmh2Rmyb7Vzwa65j
nZxvXkasOtO56N2LQxdlxJLzM+IQ93pJ6OyMmHFOaGlGLDnXfhePMW8zzz0r
I5ad5T26Oh9rYNYF3gPuXGgfXlziOrZ1LcTop8tCl2bUV5d6Xs3vh3cGYy73
vI4+H2eGX1c4BrOutE8/3x26KyNeXBe6NiOW3BC6PiO+3Gh/V48xr5fnXpMR
E7FXZ8Skm7wGTt1sH9bcntEdgi932O/pdVdlxJ47HYNb3LVbMuLXLc61n+tl
Hky6x2egJ+8L3ZtR3z4ZeiIjNt3refTZg6EHMuo37P0Z8ePh0EMZceQhz9vJ
dfG84M0jnse3CVwZkhEP7vfecOux0KMZ8eMp1wE7nrY/wHFywZVnHBvkeh/P
iIOPOxd7POt5LewP9v7POQbXnrcPP/4XeiUjZrwWejUjlrxuf5THmEcv/Rz6
KSOOfBB6PyMGkePljFiJfSkjZr3hXPDi3dCyjPjxnn0Y9KFzTXQ+YrDvrdCb
GfHvTeeCZW87Ns753smIWx+HPsqoj78LfZvRff8s9GlGzPgi9HlGLFluf4rH
mMc9q8S3RDkrDn7k+iY7xycZ8e4T7wezvnQuePG996aXfrA/y7V8k1Gf/egY
7Ps69FVG/PvKuWZ6LrGxPh9nPt3PnvXw6xe/D/p/1ai3ZVZs+iP0e0Ys+Sv0
Z0aM+dv+mR5j3iLP/S0j1mJ/zYhN/3gNrPrXPgxaKavvLRi0clb+GV5HTTBo
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
WV5sYmzdvPpsg7Dr59Vv2E558WOjsBvmxREs82A8dfG84M3Gec3jmwauvJIT
D8jB3nBrk7Cd8+JHl7zqgB1b5OXDNeLkgitb5hWDWdS7aV4cxJKLPbrmNW+E
93zZ+2+VVwyubZ2XDz+25zczL2bsELZ7XizpkZcPRxhjHr00MOyAvDiyR9jd
82IQObbLi5XYbfNi1o555YIXu4bdJS9+7JaXD4P2zCsXHCIfMdjXM+xOefEP
Sy5YtnNeMZhEvl55cat32L3y6uODwx6U133fJ+zeeTFjv7D75sWSvnn5cISx
fXzPpoVOy4uD5KM+eoYcffLiHZb9YNb+eeWCF4fktTe9dGhePkyhln559Vn/
vGKw78CwB+TFPyy5YBlzicFczseZ4RDPnvXw67C83gf9f1zo2LzYdGTYI/Ji
yZDQ4LwYM9Q+fGGMeTCRuYfnxVrsoLzYdJTXwKqj7cMg/v/h+N6CQSPtw1TW
URMMGuUY/OK7bFhe7BvmXK1dL/Ng02ifAR4dHxqTFxdOCZ2cF8PGeB49Ni40
Ni82YU/Iiw0TQuPz6sXxntf0+5yaF3smeh7smO73nXYO9oZZJ4VOzItHk10H
TDnVftFxcsGbKY6VXe+kvPg3ybka3p95/Jmb34ALzLAZroP3f2/onrwYMS80
Ny9mnG5/PY/NyYsRS0NL8uLCOfbXdXx2XkwhfnZe7JsVmpkXF2d6b/hxVujM
vLhytn04cq7zwrKFoTPy4t2C0Py8uDjf9W3oOLFNnG9xXv1/RejyvJiCvSwv
Dl0QOj8vXlwUujAvflxsfxuPMY9vr228Dh5dGrokL5aR47y8GHee6+7mOLng
x1WhK/PqpWtCV+fFlCtdH312rWN8623r/bu7Xvbr6XXk6uzzLcqL0Yv8jGDS
dc4FP24J3ZwXM24L3ZoXS26339tjzIN/N4ZuyIsjD4YeyItB5LgpL1be5Hkw
6w7nghf35XWH4Mf99mHQQ851kPMRg313he7Mi393Ohcsu9sxWPNI6OG8+v/5
0HN59fAL9un5x0OP5cWPJ0NP5MW4h703jHnKsd18vuvz+g243s9rkNeRCw7e
4zoGOvejeTHraeeCJS+6Dhjzkv0BnkvdcOplx2Dfs6Fn8uLfM8411GcitlU1
fi8r8TtZEZtezeu/1+zXLp5Z6L524sTbobfyYs879o/32Jt5seCz0Kd59fzn
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
KYqFWOqDQcSJ8dvCmXj39O4+Yfcuqnf3C7tvUWzYI+zuRTFjz6J8eMHYbkWx
n/NtWhSzsTwjepH4rkWxkho5P/3J2C5F9S6WM8CVvkXtze8Z7wcfjlAL9cEX
auxTFP96h92rKM5hqQ8+EicGww4K28/veG5oju/oPPv0+YCw/Yvq+4FF+TCC
sUOLYsSw0NFFMeIY+3CF+CFFsYz4UUWxhrGDi+IuljpgydDQkKI4eJR92DPc
eWHKEWEPL4p5g8IeVhT7sNQHH4kTa+F8g4vq13GhsUX1LfaEonprVGhkUWw4
LnRsUcwYbb+1x5jXK/48ea3/bAmT4Bc8a+UcI4r688AI193WcXLBiQmh8UXd
rxNDE4tix3jXRz+d5Bi/Mbwf+i3tetmv4HXkgq2c78iiuIvlGcGhSc4FF04L
TS2KGdND04riywz7a3mMebDz1NDkonr+jNCCophIjilFMXeK58Gqmc4F504v
6g7Bl/n24cdC59rA+YjBqdmhWUWxb5ZzwbA5jsGUxaFFRfXrhaELiurVi+zT
Z2eHziqKDUtDS4ri2iLvDT/Ocazq851SFPexJxfFlCXOxfcLXOleVO+S+8yi
+HSuc8GMi10HjLnE/iaeS93bhy51DA6eHzqvKBae51xb+0zE+D7q7nV8J23v
3Ixd5lyw4brQtUUx43r7vTx2TVF3/9nQM0Wx467QnUXxhvjVRfGDsTuKYhBj
VxXFXeyVRXHl9tBtRbHmDvtw6J7Q3UXx5ebQTUXx78bQDUVx7gbXt4fjxPo4
361F9e7joceK6t0nQ08UxYYHQw8UxYyH7B/ksfuLumc/hn4o6p79ZL+f4/cV
xcq7ff4DPXZvUb9h9/oM9MxT3pseetr+INdCfQNd46NF8e+R0MNFce5h1zfA
cWK9fb5bimLwLX5Gg/1O2AOuvRR6sShmvBJ6uSiW/M/+cI8xDy4+H3quKGa8
G1pWFHPJ8UJRrH3B82DWq84FP94u6nsL/r1jH46851zjnI8Y7Hs99FpR/HvN
uWDZG47BqQ9C7xfV/1+Hviqqh7+xT299Evq4KF58Fvq0KIa9771hyeeOzfX7
/L6o3wDOyj2e7HXkgh0/+32f7NwfFcWnL5wLlnzrOuDId/Zh4oeue473IQb/
vgwtL4qDy51rus9EjL/b48/l/H0/73zdUjCspHfeMex6JfX9n6E/imLP76Hf
imJEy4ivUhIjVi3JhwurleQv9jrWLPS6X4tiHOtWLomhjP1SFDMYW6kkrv0b
+qeofsvGWKYknjH2d1EM+8v1LXAOnuPZjhODQeRrUVLv5krKRd/mS/LhQpuw
rUvixJol+VcUNbZGSd9h+JcXxVHsZbbEW5XEoVTYtiXFGFu9JMZheS70TDFs
oaQeKpXkwzvOly6JK8SpD/4xRl54Rm7q49vwStcEdznff0XxF7uiKKav8HOE
DWvFnGZJzGhXkg8vGGuUxMJq2EpJ7Ngw7AYl8YZ4vSR+MLZ+SQxirFYSd7Gs
hyudSrpDsIa5+DBi47AblcQX7traJfGvQ9j2JXEOS33wkTgxenXrsFuV1Lvb
lOTTt9uW5MOJzcNuVhI/upTk03Obht2kJI4Qx4fZ5bBJSWzD8j74PeAZEIN9
9AG9AUOpnecC8zqXdB74sV1JdfBnv24l+fQ5ezIPZlF715L4t2XYLUriIJZa
4SNxYtu7L/kzazdb/iwL77YvaQ8YsUvYXiUxY9eSfFiwc9ievvdDQoNL4sV+
YfctiVXEdyqJKYztUxK/GNuxJIZie5TEjL3D9imJg8zFhzf7h+1bEqf2DLtH
SWzbPexuJTEOS30wkTgxGES+3iX16mFhB5bU34eHHVRSTx8c9qCSOHFIST59
zli/kt7P3NAc37l59uEp8QNLYiI1cn5+Uxk7oCQ2YzkDfXJESXvTN0eW5MMS
aqE+WEONA0riWv+wh5bENiz1wTzi/X3vT3dNMJiz7lVSj/JO2AM2jAgNL4kZ
I+2v5rFjSuLiUaGhJXFhQmh8SZwlPqwkljE2riQWM3Z0Saw92uthzNjQCSVx
cJx9GHRiaGJJfBkdOq4k/h0bGlUS50a5vjaOE+N3hTPx7unb6aFpJfXtzNCM
krgwOXRKSZw41X7FYyeX1GO8w9klMZuzcnfLjk8qiYsTff7EYyeV1Lcn+Qww
Y5b3Xsf58Nu7FupbyzWeVhLbpoamlMSzKa6v6fhUv+OHQw/5vT5in/f8qH36
fHFoUUmcWBg6oyQ2XRi6oCRGXGQfRlxsf2OvY82GXregJMax7vySuMvY/JJY
wth5JTFuSejsknrs+tB1JXGOsbNK4tCZrm995+Bebuo4sa7Od25J/XqDc9Gr
N9qHBVeELi+JDVfa38Fjl4XSSdyv0PGhTGis/e6OX1oSe64OXVUSzxi7pCSu
XeLnwn26OXRTSffrFvu7+HzXlsSSm1xfL49dUxLDrnJ93PW3Q2+VxFbOd05J
3MUuLYm/S/0c4cG9oXtK4sR99vf32N0l8e+O0O0l8eLJ0BMlMYb4XSUxg7HH
S+IOY3eWxNo7vR6WPFbSHTrMc/HhwtOhp0piCvfuwZKY90Do/pLYdr/rO9hx
YvToq6H/ldSfr9mnX1+3Dw9eCD1fEidetE/PPRd6tiRePG8fTt8WurUkht3q
97G3nwGxtJ/18SVx8yk/Fzj3jM8DV95wHWNCb9of4j2ZN9K1v1IS/14OvVQS
515yrSMcJ5bynuRrazvaY295D9jwYeiDkpjxkf0TPfZ+Sffiv9CKktjxTejr
knhD/L2S+MHYVyUxiLF3S+IudllJXPkytLwk1nxlHw59F/q2JL58Fvq0JP59
Evq4JM597PomO07sNOf7oqRe/TP0R0n9/Xfor5J6+ufQTyVx4hf7p3vsx5I4
tV704rqJ7lzHRP48x38oiZXf+vxzPfZ9SWz+3megT/7x3vTNv/bPci3Ut9g1
/l4S134L/VoS2351fYscJzbV5/u8JAZ/7md0jt8Je8DKllHvKok4sVrYVRPx
Y/VEPuxgjHkwcqWwLRLxKxc2m4i/5Fg5EV+xzINPrRLlgiWwLJWIN7AMH9bk
E+WCj1lzDg62DrtGIhZiyQWD2iSKwa9i2EKivm0Xdq1Efdw+kU8vlcMmiRhR
DVtJxDnWsTf8qCWK8TvE+1wnEb85K/eYvmQduWBKp0Tvm94ldykRk+qJcsGO
DonqgCVrJ/Lpc+ZSNxxiH2KwsBm2kYh5WHLBSs7U9LMe598A3vkhYQ9O9M77
hz00Uc93DrtxImZsFHbDRJzaJuzWiXixbSIfXmyXyIcprGMNrGHdBol4x7qt
EjGYsfUTcYWxrol4t3nYzRL12y5heyViHmObJmLSJonqg83k4DnCROLE4BD5
tkzUu7smykXf7pbIhws9wu6QiBM7JvLfKWmsu+8Zv5ljEn2TEXvbIr59Ig71
DLtTIrYx1i0R47A8F3pmj7C7J+qhPRP58I7z7ZyIK8SpD/4xRl54Rm7q49tw
meuAs5xvi0QMxnZJxGIszxE27B+2byJmHJDIhxeM7ZeIhXuH7ZOIHYPCHpaI
N8T3TcQPxgYmYhBj+yTiLpb1cGVAojsEa5iLDyOOCHt4Ir5w1w5KxL9+YQ9M
xDks9cFH4sTo1ZGhEYl6d5R9+vZY+3DiqNDQRPw42j49NyQ0OBFHhtqH2b3D
7pWIbVjeB78HPANisI8+oDdgKLXzXGDekYnOAz+Ocx1tfUdGJ+pz9mTe6q59
eCL+HRMaloiDw1zrao4T26UcXPN/B/A+7z/sTqEPE/13A/xzZ3BiUuikRP1/
YmhiIi7MDM1IxIJZ9mHDbPslr2NNwesmJOIL66YnYhlj4xOxj7FpiXh0amhy
oh47M7Q4Ee8YOyUR1052fTnngDUVx4mt5XynJerXs5yL/j7bPj09P3R6Ik4s
sN/JY/MS/T0i3747mFuPhB5OxFPicxMxaGHojES/qYzNScTmOX4u9MrS0JJE
PXSO/c4+36JEvbTE9W3sMfJu6NzUd6j3fyjR3X8s9Ggi5nLWqYlYPMXPEX5c
Fro0EScuCV2ciJEXhM5PxIMbQzckuqM3h25KxJhLvWY7r7soETuYe30iFjN2
YSLeMXZdIpZcFboyUc/dF7o3EV8YuyIR/y53fds4BzX1cJxYw2fiPPTq/c5F
fz8YeiARJ+4M3ZGIEbeHbkvEe853XiJOY89NxLNz/Q728TrW9PG6WxNx8yY/
l94euyVRrz7kvQ/wme5JxJIHXN/+Hrs7Edvucn17OQfPt6/jd/kd/xb61e/8
d/vciz/s0+vPhJ5OxIWnQk8m4sJroVcTceGN0OuJOPGm/SO9jjWHe90TibjG
uv8l4g5jjydiH2OvJGLHC6HnE/XVx6GPErGPsecS8e5Z13eYc3AvhzpObITz
vZyoRz9xLnr6U/v08buhZYnY8J79cR57J9Hf6dOL/JmSv/fH8ufIsY6/nYg7
HyRi2wkeeyvRb+xbfi7cp89DnyW6X1/Yn+TzwcJTHae+kzxG3onOTX389tB/
cGG4z/dSIs5iX0zE4Bf9HGHDD6HvE/HjR/tzPPZdIkZ+HfoqEQ/+Cf2diCPE
v03ECMb+SsRcxr5JxOJvvB7e/ZnoDp3lufjc+xWhfxNxhXv3SyL2/Rz6KRH/
fnJ9CxwnRk+uEb8Prcrq0dZl+fR0m7J8+niVsCuXxYaWZfn04kphW5TV58Tx
4fSXoeWJGLbc72O6nwExvqvgyrWJuPmvnwt9/J/PA2/WLKuOq+M/ty3Lp+/Z
k3mwhtpXL4trq4VdtSy2YakV5hEn1st7XpPoWwlL7p627AkbkphbKqu3i2EL
Zd2FLcNuURYbOoRtXxY/1gm7dlk8YB1r4A3r8mVxhLntymIQY7my2MfYWmUx
pRa2WlaPbRK2c1k8Y6xSFs/KZdUHs8mRLYt3xInBMPI1y+rXTcvKxX3dPOxm
ZbFhg7Drl9XbncJ2LItN/cMeWtY9G1CWzz0bWJYPD1jHGnqFdeuVxVCeAc+F
/mFs3bJ6pUtZe8MUzrRxWbyhFuqDZ4xtVBbPNiyrPn4bycHzhXfEicFjztco
i7vYeln8xfIcYcP2YbuVxYzuZfnwgrHtyuLiVmG7lsWF3cPuVhZniW9bFssY
27UsFjO2TVms3bqs9TCG7zC+t+Agc/Fh0J5h9yiLL3yX7VgW/3qE3aEszmGp
Dz4SJ0avHhj2gLJ6t19ZPn17UFk+XNgn7N5lcWLfsnx6rE/Y3mX1HHF8mM1Z
ucfwjLvMu+H3iXd+iJ/vGaEFZfGS2nku9PBeZZ0HfhxcVh3whnX49Dp7Mg8O
Uvv+ZXGub9j9ymIbllphJHFisJhv1Z6+BwtdB/dlcWhRWZw4IuzhZbHp2NCo
shhxnH0YMdo+fTIpdFJZvBgc9siy+IIlF9wh36Cy2Ee+kWUx7ujQUWWxDTu0
rB472XlX8tiQsnh8WFl9AsvJh9/CcfZu5dwjyuIEdZ1Y1n09NTS5rJ4eHxoX
yoTGhk4oi5f46bIYhk2VxTAsfMx63VjPY93xZXFoYmiC1zA2pqxemeK9q97/
lLJYcorPyTdg1rXknWO89xvjZ130OdhjdZ9veFnMxR5TFo+xw8piw9zQnLJ6
e3ZoVlksnB6aVhYbzg6dVdYdXRpaUhYP5njN2l43syyOMPfMshjE2Iyy2McY
dwimcK/nl9Vzl4cuK4tnjJ1eFs/mub72zkFNnRwnRn9e4fX065X26e+r7MOJ
i0IXlsWI80PnlcUOxi4oi9Oc9bSyGDbV76OlnxP3r+k4MRhJH9AbXZ3v3LL6
GXtOWf1ztevo7vNdWhZ/l/iZbu+xS8ri3MWudQvn4Fl3c5wYfxfP32u0Nduu
L+vPnFNqwbjQZzVx4qbQjWX1/y2hm8viwa329/QY82DHA6H7y2IZ9r6yWEOO
G8ri7g3eD37d5lww457Q3WUx5l77MOhB5z3Q+YjBxDtCt5fFwtudCwbd6Vhf
57urLJ495Fz093OhZ8vixVOhJ8v6LXw09EhZff546LGy+v4J+wM9xrz+nvtw
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
sIdXxZguYTevqu+3DLtFVczoWpUPCxhjHozYMWyPqtiB3aEqTpFjs6pYid3U
/64v/p1f5IIR24ftVhUzulflw5edqsoLE8lHDN5tE3brqtiGJRf82raqGBwi
33ZVsapnVbno3b3D9qmKJXtWxSHu9S5he1XFjN3C7loVS3avyocjjDGPHmDu
zlVxDcsesIl8rIFZe1W1B9zpXZUPL/apqg44Qi3E6Kf9wu5bVV9hmcfvCu+H
dwZj+lY1D85yPs4Mv/avKgazDqjKp5+PCg2tiheHhD24Kpb0D3toVXwZUJUP
VxhjHvxi7kFVMRHbryomDaxqDZw6rCof1hxZ1R2CL4Or8mEz6w6sij1DqorB
Le7aoKr4hSXXSq6XeTDpaJ+BnjwmNKyqvh0bOqEqNg3zPPpsZGhEVf2GHV4V
P44NjaqKI6M8D8ZTF88L3hzneXybwJVCVTwY7r3h1pjQ6Kr4Mc51wI7x9td0
nFxwZYJjadd7fFUcPN652GOi5/E9VPA69j/RMbh2kn34cWpoclXMmBqaUhVL
TrNf9xjz6KVLQ5dUxZHTQ/OqYhA5TqmKldiTq2LWNOeCF3NCs6vix1z7MGi+
c3V0PmKwb0ZoelX8m+5csGymY+s436yquHVGaEFVfXxB6Pyq7vuZocVVMePs
0FlVsWSJ/U09xjzu2dOhp6ri4ALX19k5FlXFO+zCqpi11LngxYXem166yP5W
ruW8qvrsYsdg37mhc6ri3znO1dVzia3t83Hmbn72rIdfl/l90P+3h26rik1X
ha6siiXXhK6uijHX2u/pMebt6LlXVMVa7OVVsek6r4FV19uHQTdX9b0Fg26x
v4PXURMMutUx+MV32Q1Vse8G5+rjepkHm+7wGeDRXaE7q+LCo6FHqmLYnZ5H
j90buqcqNmHvrooN94fuq6oX7/O8I/w+n6yKPQ94Hux4xu+7r3OwN8x6KPRg
VTx6zHXAlMftH+w4ueDNE471d70PV8W/h53rcO/PPP5+kD+X8/0Lm551Hbz/
FaF/q2LES6EXq2LGy/aHeeyFqhixLPROVVx41/7Rjj9fFVOIv10V+xh7riou
Pue94cdboTer4srb9uHIe84Ly14LvVoV7/4XeqUqLr7i+kY5TmyM871RVf8v
D31RFVOwn1fFoQ9DH1TFi49DH1XFj0/sT/IY8xL7rINHn4U+rYpl5Hi/Ksa9
77onO04u+PFV6Muqeumb0NdVMeVL10effetY2TWx3xTXy34zvI5co32+16ti
9Ot+RjDpO+eCH7+Efq6KGb+HfquKJX/YX+ixX6vi34+hH6riyMq1+B2riUHk
+KkqVv7keTDrT+eCF/9VdYfgR4uafBi0Sk254BD5iMG+v0N/VcW/v5wLlv3j
GKxZNea2rKn/M2HTNfVwtiafnm8VdvWa+NE67Bo1MY517A1j2tQUm+vzfV/V
b8D3fl7wg3XkgoP/ug4YR+7VamLWmjXlgiW5muqAMfmafBjJXOqGU4WaYrAv
FbZtTfzDkgvGcSZiBfclf2aFa/y9LOvhVFLT39XCiUbYek3sadbkww7GajWx
YP2wnWrq+Q1q8mEY8WpNHCHesSauMVapiYPYck0sWS/sujUxiLn4sGTDmvLC
oA5h29fEvHZh16qJfVjqg3fEicEk8q1TU+92DbtlTT2M3aImHnUOu3FNnNg0
7CY18WOzmnzYwVhn//e6e9bjm7UuPnUJf/Oa2EqOjWpiMJa64RNxcsGMrcNu
VVMPbRt2m5o4whj10Wfb1RTjfh8Z9oiamEi97EfvsW5r3/vBNc2Dv5x17ZqY
1K2mXDBj57A9a+JLr5p8+MHYTjWxc4ew3Wvq+33C7l0TX4jvWBMLGOtTEysZ
61ETi7Gshy+9w+5VE2+Yiw8j9gu7b02s2j3sbjWxb9ewu9TEPyz1wTLixPj9
4Uy8e/p2YNgBNfXtoLCH1cSJfmEPrIkfB9Xkww7GDqiJ95xv+5q4j+UZ0aPE
96+JidTI+elXxvrW1LdYzkCvHl7T3vQu7wcfrlAL9cEpauxfE/MODXtITezD
HlwTE4kTg1VDQ0P8jpeGlviOnmOfXh8eOqYmToywv6rHhtXEhfGhcTWxYIL9
lo4fXRNHiI+tiVmMHVUTN49yHXDihNDxNbFvrH0YMdF5YdNxoWNr4tmo0Mia
uDbS9bV2nFjK+cbU1K/TQqfV1LfYqTWxZ1LopJrYcEro5JqYMdl+2WPM49uq
7HUwiX/24tSa+EWOE2ti24muu+Y4ueDEjND0mu7XrNDMmtgx3fXRT7Mda+H3
Q781XC/7dfA6crX1+UbXxNzRfkZwaI5zwYUzQgtqYsai0MKa+LLY/kYeYx7s
PD00r6aevyB0fk1MJMf8mpg73/Ng1ZnOBefOrekOwZfz7MOPC51rK+cjBqfO
Dp1VE/vOci4YtsQxmHJx6KKa+vW60LU19er19umzy0KX1sSGK0KX18S1i7w3
/LjSsY4+39yauD/Xz2sHryMX31NwZc+aepfcl9TEp6ucC2bc4DpgzI32u3ku
de8RuskxOHhN6OqaWHi1c/XymYjxTbSn1/FttIdzM3azc8GGu0N31cSMe+zv
57E7a7r7b4XerIkdT4Qer4k3xO+oiR+MPVYTgxi7vSbuYm+riSuPhh6piTWP
2YdDT4WerIkvD4YeqIl/94XurYlz97o++Hi/Y/2d7+Gaevd/oVdq6t3XQq/W
xIbnQ8/VxIwX7A/12LM13bMVoX9rumf/2R/i+DM1sfJJn3+wx56u6TfsaZ+B
nnnde9NDb9gf5Vqob4RrfLkm/r0UerEmzr3o+oY7TuxQn++hmhj8kJ/RGL8T
9oBr74XerYkZH4Ter4klH9qf6DHmwcV3Qm/XxIyvQl/WxFxyLKuJtcs8D2Z9
5Fzw44uaving33L7cORr55rmfMRg3yehj2vi38fOBcs+dQxOfRv6pqb+/yP0
e009/Kd9euuH0Pc18eKn0I81Mewb7w1LfnZsqd/nPzX9BnBW7vE8ryMX7GhR
1/ue49zf1cSnX5wLlvzlOuDI3/Zney51L/E+xODfb6Ffa+Lgr861yGf6zc9r
r7q+yXjnXcJuXtc73zLsFnX1/WphV62LPS3DrlIXI7JhM3UxIleXDxfydfnw
gnWsgVmsW7kuxrEuXRdDGVupLmYwlqqLa63DrlFXvzXDNuriGWOt6mLY6nXV
B4PJwXOEd8SJwSDyta2rd9eqKxd9264uHy6UwyZ1caJSl39rTWOlur7D8G+p
iaPYm22JF+viUC1sta4YY4W6GIfludAza4ftUFcPrVOXD+84X70u7hBvXxf/
GCMvPCM39fFteJtrgrucb826+IttUxfTsTxH2LBx2I3qYkbnunx4wdiGdbGw
U9iOdbFjm7Bb18Ub4hvUxQ/GtqqLQYytXxd3sayHK13rukOwhrn4MGK7sNvW
xRfu2mZ18W/TsJvUxTks9cFH4sTo1V3C9qqrd3ety6dvd6vLhxM9wu5QFz92
rMun57qH3b4ujhDHh9nrhV23LrZheR/8HvAMiME++oDegKHUznOBed3qOg/8
2L2uOv7/n1uty6fP2ZN5MIvad66Lfz3D7lQXB7HUCh+JE+M7i1zkhmF9uIPc
B+5II+5DQ33fN/z96mLG/nX5sICxfetixGFhB9bFhUF1+bCK+D51MYX4gLr4
xdjedTEUy94wo3/YQ+viIHPx4c3hdeWFUweF7VcX2w4Me0BdjMNSH0wkTgwG
ke+Qunp1RGh4Xf2MPaYuJg4Oe2Rd/T00NKQuZhxlv4XHmAfreU5wDe4MCx1d
1+8oOY6oi8dY6l7FcXLBlVGhkXX1zXGhY+tiyUjXR2+Ndox7cU5oaV2cO8b7
tfY6ctED53oeDOasB9fVr2OcC06cGJpYF0tOsl/w2IS6eDk2dEJdbJgZmlEX
U4iPr4sXjE2vi7+MjauLy+O8HvadFppaF/um2efezw7Nqosxk0On1MXBk0OT
6mLhJNdXcZwYvyuciXdP754ZWlxX754dOqsuNswPnV4XMxbY7+SxeXWxn/Md
Xxezj/cz6uj43LpYOcvnX89jc+rq3Tk+A1xZ4r27+P3gb+paqK+za1xUF/8W
hs6oi3NnuL6NHScGw84Pned3/GLoBb/zl+zT55eELq6r7y+1v53HLqqLETeE
rq+LETfa39bxC+tiGfHr6mINYxfUxd0LXAcsuTZ0TV0cvM4+7LnJeWHKlaEr
6mLe5aHL6mLfZa6vh+PEdna+q+vq13tD99TVt9i76+qtW0O31MWG20O31cWM
O+z38Rjz+L+7HB8a10JMgl931tWf5Li5ru+Pm133vo6TC07cH7qvrvv1YOiB
uthxn+ujnx5yrKvfD/3W1/Wy30FeR66ePt9VdXH3Kj8jOPSwc8GFJ0NP1MWM
p0NP1cWXZ+wf4THmwc7HQo/W1fOvhv5XFxPJ8XhdzH3c82DVs84F516u6w7B
l1fsw4/XnGuk8xGDU8+HnquLfc85Fwx7wTGY8kbo9br69aPQh3X16sf26bO3
Q2/VxYZloXfq4trr3ht+vOvYAJ/vkbq4/4if11ivIxffL3BlSl29S+436+LT
e84FMz5xHTDmU/tjPJe6Tw195hgc/CD0fl0sfN+5TvKZiNW9J+tqtpM99rlz
wYbvQ9/VxYwf7M/22Ld13f1U/K62bYgdf4f+qos3xL+pix+M/VkXgxj7ui7u
Yr+qiyt/hH6vizV/2odD/4b+qYsvv4R+rot/P4V+rItzP7q++Y4TW+R8v9XV
u62ixtUb6t3WYddoiA0rh12pIWas0pAPLxhr0dA92yJsl4bu2ZYN+fQN8f/q
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
XWC/vdcO9vUXOgf7hoeGpeLfMNfq7DOR49sqd73Cz5/r4deoVO8E/BgTGp2K
GZeHLkvFkivsd3WMdczB3aG7UnFkSuiqVAyixqWpWIm9JBWzxroWvJgUmpiK
H5Ptw6CrXWsj1yMH+64MjUvFv3GuBcvGO7e+601Ixa1rQ9ekmtvpodtSsemG
0PWpODE1dGMqftxkf0vHWMc7907o7VQcvMb9be4a16Vi8HXeDz7d7Fow43bv
zfzcYX8H93Jrqtm60zk4eEtoWioWTnOt7b2WXDefjzPv4nvP9XDtHj8P5v7p
0FOpGPdA6P5U/Hgo9GAqrjxsfy/HWNfTa+9LxVfsvak49YivgVuP2ocdT4Qe
T8WSmfZ393X0BBefdA5mPRaakYqDM1zrEPfLOhj0jM8As54NzUrFgtdCr6Zi
1SyvY85eCD2fat6wz6XiyIuh2anmcrbXDfDzfCsVb17yOpjyrp/3ka7B3vDr
5dCcVBx53X3AlzdDb6Ri2BzXgi9znevjfl9JxcJXXKu/95/rM5eZfgPg13vu
g+e/XMRaZZr5j0IfpmLAx/bPcGxeKl58G/omFS++s3+68x+k4hr5r1Nxk9j7
qdj5vvceHvoq9GUqfnxtH9Z877rw7vPQZ6m49mnok1Q8+8T9DXWe3DDX+yLV
/P8Z+iMVU7C/p2LQj6EfUvHi59BPqfjxi/1RjrGO94zfzCwTj34L/ZqKbdRY
kIpxC9z3aOepBT8Whv5KNUt/hxalYspf7o85+59ztXti/8vcL/td6euoda7P
Nz8Vx+f7HsGkf1wLfiwZ/S6RiRktwjbPxJKWmXw4Qox18G9x6L9UHGkTsRUy
MYgazTKxEsu6G0JLZaoFL1pneofgx/KZfBi0YqZacIh65GDfMmGXzsQ/LLVg
2bKZcrCmXdi2mea/c9jVM81wI5PPzK8ctn0mfnQIu0omxnEde8OYjplyk32+
f1P9Bvzr+wU/uI5acJA5oA8YR+2VMjFr1Uy1YEmSqQ8Yk2byYSRr6RtO8b6Q
g32rhe2UiX9YasE4zkSOf9fPvy3j36DBpyrTrI7J9O+Bfs3Eia5h18jEnjUz
+bCDWJdMLNgk7MaZZn7TTD4MI9+UiSPkN8rENWJ1Jg5i2RuWbBB2/UwM2jCT
D0s2y1QXBq0bdp1MzFs77FqZ2IelP3hHnhxMol63TLO7Q9jtM80wdrtMPNoi
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
897Mz/n24cqw0LmVZmukc3DwnNDZlVh4tmt18lpyy/h8nDnzved6uHaRnwdz
Pzk0qRLjLg1dUokfY0KjK3HlMvtdHGNd7bWjKvEVe3ElTl3ua+DWFfZhx/hK
/24MlkywX/o6eoKLE52DWfz7srGVODjWtTZwv6yDQVf5DDDr6tCUSiy4JTSt
EqumeB1zdl3o2krzhr2mEkduCF1faS6v97oefp63V+LNjV4HU+7y897UNdgb
ft0UmlqJI7e6D7hym/2tnKcWfJnu3Lbu9+ZKLLzZtXby/tN95n8q/QbAr7vd
B8//89BnlWb+gdD9lRjwoP2ejt1XiRdPhZ6sxIun7e/h/L2VuEZ+ZiVuErun
Ejvv8d7w4onQ45X4MdM+rHnGdeHdo6FHKnHt4dBDlXj2kPvbx3lyB7jeY5Xm
/5XQy5WYgp1TiUHPhZ6txIsXQs9X4sds+0c5xjreM34zF1Xi0UuhFyuxjRqz
KjFulvvu7Ty14MdroVcrzdIbodcrMeVV98ecvekc33pHe//j3C/79fN11Nrf
55tRieMzfI9g0lzXgh/vh96rxIx5oQ8qseRD+6c5xjr4907o7Uoc+Tr0VSUG
UePdSqx81+tg1keuBS/mV3qH4McX9mHQN6413PW+rMS+T0IfV+Lfx64Fyz51
DtZ8F/q20vz/Efq90gz/aZ+Z/yG0oBI/fgr9WIlx33pvGPOzcwN8vrcq/Qa8
5ft1sa+jFhz8zH1c6NrfV2LWL64FS/5yHzBmof0LvJa+4dQi52Dfb6FfK/Hv
V9e6zGcix3874zuM7y/49G+lWT2ujncg9FItTiwZdola7Gley4cdxJrVYsEK
YZevNfNtavkwjPziShwh37oW14j9V4mD/3lvWLJc5FvVYhBr8WHJirXqwqCl
wy5Vi3ktw7aoxT4s/cE78uRgEvWWrTW7q4XtVGuGsavW4tFKYdvV4sTKYdvX
4scqtXzYQYx1/DdFvn35zoVPHSPWoRZbqdG2FoOx9A2fyFMLZnQOu3qtGUrC
NmpxhBj9MWdprRzvd4+wO9ViIv2yH7PHddTivd+51jr4y1mXqcWkrFYtmLFG
2C61+NK1lg8/iDXVYmcZtqg19xuF3bAWX8jXtVhAbINarCRW1WIxluvhy/ph
u9XiDWvxYcQmYTeuxap1wq5di31rhV2zFv+w9AfLyJPj94cz8eyZ2+3Cbltr
bncIu30tTmwRdvNa/Niylg87iHWvxXvOl9fiPpZ7xIyS36wWE+mR8zOvxDat
NbdYzsCs7lhrb2aX54MPV+iF/uAUPW5Ti3lbh92qFvuw9AcTyZODVbuF3dXP
+OzQUL+j59hn1vcKu2ctTvSq5TP/xHrW4sKhYQ+pxYLDavnwifwetThC/uBa
zCK2ey1uYukDThwU9sBa7GMtPow5vFZd2LRf2H1r8WyfsHvX4hqW/uAgeXJw
h3oH1JrXPqETas0t9vhaDDoq7JG12HBM2KNrMaN3LR9eEGPd0Z5F/m4Kk+DX
sbW+OahxRK3fUix9N3OeWnCiX6hvrffrpNCJtdjR1/0xTyc7x28Jz2eXWhw8
3vst7euoBWs53/61mIvlHsGh/q4FF04LnVqLGWeETq/Fl8H22zrGOth5Smhg
rZkfERpei4nUGFSLuYO8Dlad6Vpw7ly/Q/BlmH34cZ5rre565ODUWaEhtdg3
xLVg2FDnYMrI0Pm15vXy0GW1ZvUK+8zZRaELa7FhVOjiWlw733vDj0uca+3z
DajF/QG+X6WvoxbfU3BlvVqzS+0LavHpUteCGWPdB4wZZz/zWvpeN3Slc3Bw
TGh0LRaOdq2uPhM5vonW83V8G63r2sTGuxZsuCZ0dS1mXGt/E8em1Hr3nwg9
Xosdt4VurcUb8lfV4gexW2oxiNjkWtzFTqrFlWmhm2ux5hb7cOj20PRafLkx
dEMt/l0fuq4W565zf1s4T24b17up1uw+HHqo1uw+GnqkFhvuDd1Tixn32d/N
sbtrvWfzQ5/Xes++sL+r83fVYuV0nz9pincutHKTfsPu8BmYmRnemxl6zP4+
7oX+ernHB2vx74HQ/bU4d7/728t5clv7fFNrMXiq79EBfibsAdeeCT1dixnP
hmbVYslz9g93jHVw8cnQzFrMeC30ai3mUuOpWqx9yutg1vOuBT9ervW9Bf9e
sQ9HXnetPq5HDvbNDr1Qi38vuBYse9E5OPVm6I1a8/9R6MNaM/yxfWbr7dBb
tXjxbuidWgx7w3vDkvecO9vP87NavwGclfd4oK+jFuz40s+7v2vPrcWn910L
lnziPuDIp/ZP9lr6Hup9yMG/eaEPanHwA9c6w2ciB8tf8vl5x3iPdrFdxX9m
7r8PfVeLPd+GvqnFiD9Df9RixF/24cJC+yN9Hdec5+u+rsU4rvu9FkOJfVWL
GcR+q8W1n0I/1pq35tHPkk3iGbEfajFsgfsb7hrcx4ucJzfG9X6tNbstmlSL
uW3ZJB8u/Bv6pxYn/rM/0bH/1foOw59Qi6PY8bbk/67FoWZRb7FzxBbVYtwi
3xdmZulYs1STZmiZJvnwjvMt0SSukKc/+EeMuvBssfvj23CSexrt8/1Si7/Y
n2sx/Wffx85x/aqhtqFjm8keF7ZD2DZN4gYsbB1/Xs7rWL9kM/GGNSs0aX1H
XwODiC3fJO5iuR4OdXDN1OvxiyYxa7XQSqH2odlRv5P9Y/i/BmlSr+1CLzRT
nDWNsHmodzPVoNadrl+GVmxSnYZrNXkv1rRzTc5Uew11YHar+POyTWIblufB
7wH3oJV7ZR5gb+5rO3lP9l7dtSvfr4b3aO8YuSWayWb+8+q+toPrJ96ji+Mr
2nbxvfs/8LSRFw==
       "]]]}, {}, {}, {}, {}},
   VertexColors->CompressedData["
1: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
OI7juKSrb/1nGjG78s6GuT2LhHWpj8O+zXNxHMdxHMdxPd3oy8I+oy4WCasD
Df1CM7fiOI7jOI7jevpVU21hr4nFQm2fdzM8zx/HcRzHcRzX09ddermndUWx
WBx1cfP6ccE4juM4juO4nt57ZstR9etLhNok1GrClTAcx3Ecx3FcT89/2v5p
9j9KhVfilYaA4CM4juM4juO4nu4faHb8QnipsPaMVXtOjMBxHMdxHMf19FH9
B8w8OKRMVFofivjM8ASO4ziO4ziupz+/Newtn9tlIkSzZ8ukhGgcx3Ecx3Fc
T49aMvbykgXloqfLtT7vDTuJ4ziO4ziO6+mzm8/0cH5eLhp+OB8S1Pk0juM4
juM4rqcbHVnc3cqvQqhbnWph+CwOx3Ecx3Ec19NviNVZHbtXiohFkV9szjyL
4ziO4ziO6+nr8rdue3W2UnhdO1z8OCYex3Ecx3Ec19PjHB92296nSoQcD3PP
X3gJx3Ecx3Ec19O19+f0KNhWJVS7rhrNWHodx3Ecx3Ec19N7LFVbWhVVibiR
J2tGmifhOI7jOI7jevqcVx/2+2pItVjceOhG34JUHMdxHMdxXE/f6xdpVRhQ
LVSnA0KN96lxHMdxHMdxPf32u8a2gzTVYuYZB/utEek4juM4juO4nt48drv9
ztE1wrqN3ffPvDNwHMdxHMdxPV04PB1eHFojWrsP7ODuloXjOI7jOI7r6esy
Fo62eV4jKlIsvUvss3Ecx3Ecx3E9PXpB5id+E2tFnLnZw2nGOTiO4ziO47ie
Xv7Ywbk0slZ4eZm4qp/cx3Ecx3Ecx/X0d7fFugxpphEz89umjcjIw3Ecx3Ec
x/X0qR3fm/a1q0ZY275lEx9dgOM4juM4juvpfsf9ZpWf1QhVULPwPjsLcRzH
cRzHcUlP/qem77UXGqVF7UNrEouKcBzHcRzHcUkfsWZn/vhBWqWO4887f21Y
guM4juM4jkv6pS2WOx54aJXG+madmm5diuM4juM4jku6jV+qjXuUVqnRdV2H
7nPKcBzHcRzHcUk/FfxZeWOlVum6RsMNtdvLcRzHcRzHcUn/ILxF4A6zOqU5
1j0K405W4DiO4ziO45J+NObYcOO5dUptlzuM3JRXieM4juM4jku66YXRdREh
dUoPRsyO+NigGsdxHMdxHJf0A0llBwZn1yltWbz272361eA4juM4juOS3iHD
+5PENjqlHp0DV+ROr8VxHMdxHMcl3b+g+7NJ43RK0ydFZx7ZqsFxHMdxHMcl
3bD6WniJr05p/z/+34DjOI7jOI7Luc9jN5eVN3RKg//4fojjOI7jOI7Lueq3
PaSUUkoppX9RE1rZXZ98IUqp+pTP2JWPkv8yH7G+//e2JTqljgvqx5ks1b2x
//97vOn+95zXPff3+3yr9Pd7nXutmw4NntzlkU7pwQEvjvmd0b3WX3fOm77/
685/3Qlv+v6ve+6/AapP8VQ=
    "]],
  AspectRatio->20,
  DisplayFunction->Identity,
  Frame->True,
  FrameLabel->{{None, 
     FormBox[
      StyleBox["\"Harmonic dipole (arb. units)\"", 14, StripOnInput -> False],
       TraditionalForm]}, {None, None}},
  FrameStyle->GrayLevel[0],
  FrameTicks->{{None, {{0, 
       FormBox["0.`", TraditionalForm], {0.3, 0.}, {
        GrayLevel[0.], 
        AbsoluteThickness[0.25]}}, {2, 
       FormBox["2.`", TraditionalForm], {0.3, 0.}, {
        GrayLevel[0.], 
        AbsoluteThickness[0.25]}}, {4, 
       FormBox["4.`", TraditionalForm], {0.3, 0.}, {
        GrayLevel[0.], 
        AbsoluteThickness[0.25]}}, {6, 
       FormBox["6.`", TraditionalForm], {0.3, 0.}, {
        GrayLevel[0.], 
        AbsoluteThickness[0.25]}}, {8, 
       FormBox["8.`", TraditionalForm], {0.3, 0.}, {
        GrayLevel[0.], 
        AbsoluteThickness[0.25]}}, {10, 
       FormBox["10.`", TraditionalForm], {0.3, 0.}, {
        GrayLevel[0.], 
        AbsoluteThickness[0.25]}}, {
       NCache[
        Rational[1, 2], 0.5], 
       FormBox["\"\"", TraditionalForm], {0.15, 0.}, {
        GrayLevel[0.], 
        AbsoluteThickness[0.125]}}, {1, 
       FormBox["\"\"", TraditionalForm], {0.15, 0.}, {
        GrayLevel[0.], 
        AbsoluteThickness[0.125]}}, {
       NCache[
        Rational[3, 2], 1.5], 
       FormBox["\"\"", TraditionalForm], {0.15, 0.}, {
        GrayLevel[0.], 
        AbsoluteThickness[0.125]}}, {
       NCache[
        Rational[5, 2], 2.5], 
       FormBox["\"\"", TraditionalForm], {0.15, 0.}, {
        GrayLevel[0.], 
        AbsoluteThickness[0.125]}}, {3, 
       FormBox["\"\"", TraditionalForm], {0.15, 0.}, {
        GrayLevel[0.], 
        AbsoluteThickness[0.125]}}, {
       NCache[
        Rational[7, 2], 3.5], 
       FormBox["\"\"", TraditionalForm], {0.15, 0.}, {
        GrayLevel[0.], 
        AbsoluteThickness[0.125]}}, {
       NCache[
        Rational[9, 2], 4.5], 
       FormBox["\"\"", TraditionalForm], {0.15, 0.}, {
        GrayLevel[0.], 
        AbsoluteThickness[0.125]}}, {5, 
       FormBox["\"\"", TraditionalForm], {0.15, 0.}, {
        GrayLevel[0.], 
        AbsoluteThickness[0.125]}}, {
       NCache[
        Rational[11, 2], 5.5], 
       FormBox["\"\"", TraditionalForm], {0.15, 0.}, {
        GrayLevel[0.], 
        AbsoluteThickness[0.125]}}, {
       NCache[
        Rational[13, 2], 6.5], 
       FormBox["\"\"", TraditionalForm], {0.15, 0.}, {
        GrayLevel[0.], 
        AbsoluteThickness[0.125]}}, {7, 
       FormBox["\"\"", TraditionalForm], {0.15, 0.}, {
        GrayLevel[0.], 
        AbsoluteThickness[0.125]}}, {
       NCache[
        Rational[15, 2], 7.5], 
       FormBox["\"\"", TraditionalForm], {0.15, 0.}, {
        GrayLevel[0.], 
        AbsoluteThickness[0.125]}}, {
       NCache[
        Rational[17, 2], 8.5], 
       FormBox["\"\"", TraditionalForm], {0.15, 0.}, {
        GrayLevel[0.], 
        AbsoluteThickness[0.125]}}, {9, 
       FormBox["\"\"", TraditionalForm], {0.15, 0.}, {
        GrayLevel[0.], 
        AbsoluteThickness[0.125]}}, {
       NCache[
        Rational[19, 2], 9.5], 
       FormBox["\"\"", TraditionalForm], {0.15, 0.}, {
        GrayLevel[0.], 
        AbsoluteThickness[0.125]}}, {
       NCache[
        Rational[21, 2], 10.5], 
       FormBox["\"\"", TraditionalForm], {0.15, 0.}, {
        GrayLevel[0.], 
        AbsoluteThickness[0.125]}}, {11, 
       FormBox["\"\"", TraditionalForm], {0.15, 0.}, {
        GrayLevel[0.], 
        AbsoluteThickness[0.125]}}, {
       NCache[
        Rational[23, 2], 11.5], 
       FormBox["\"\"", TraditionalForm], {0.15, 0.}, {
        GrayLevel[0.], 
        AbsoluteThickness[0.125]}}, {12, 
       FormBox["\"\"", TraditionalForm], {0.15, 0.}, {
        GrayLevel[0.], 
        AbsoluteThickness[0.125]}}}}, {None, None}},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  ImagePadding->{{1, 42}, {65, 4}},
  ImageSize->{Automatic, 475},
  Method->{
   "DefaultBoundaryStyle" -> Automatic, "DefaultPlotStyle" -> Automatic, 
    "ScalingFunctions" -> None},
  PlotRange->{{0, 1}, {0, 10}},
  PlotRangeClipping->True,
  PlotRangePadding->{{0, 0}, {0, 0}},
  Ticks->{Automatic, Automatic}]], "Output"]
}, Open  ]]
},
WindowSize->{1855, 1056},
WindowMargins->{{0, Automatic}, {Automatic, 0}},
PrintingCopies->1,
PrintingStartingPageNumber->1,
PrintingPageRange->{Automatic, Automatic},
PageHeaders->{{None, None, 
   Cell[
    TextData[{
     "RB", "-", "SFA", ":", " ", "Rotating", " ", "Bicircular", " ", "HHG", 
      " ", "in", " ", "the", " ", "Strong", " ", "Field", " ", 
      "Approximation", "|", "   ", 
      StyleBox[
       CounterBox["Page"], "PageNumber"]}], "Header", 
    CellMargins -> {{Inherited, 0}, {Inherited, Inherited}}]}, {None, None, 
   Cell[
    TextData[{
     "RB", "-", "SFA", ":", " ", "Rotating", " ", "Bicircular", " ", "HHG", 
      " ", "in", " ", "the", " ", "Strong", " ", "Field", " ", 
      "Approximation", "|", "   ", 
      StyleBox[
       CounterBox["Page"], "PageNumber"]}], "Header", 
    CellMargins -> {{Inherited, 0}, {Inherited, Inherited}}]}},
PageFooters->{{None, None, None}, {None, None, None}},
PageHeaderLines->{False, False},
PageFooterLines->{False, False},
PrintingOptions->{"FacingPages"->True,
"FirstPageFace"->Right,
"FirstPageFooter"->True,
"FirstPageHeader"->False,
"PaperOrientation"->"Portrait",
"PaperSize"->{594.75, 842.25},
"PostScriptOutputFile"->"~/Desktop/print.pdf",
"PrintingMargins"->{{19.84251968503, 19.84251968503}, {72., 72.}}},
PrivateNotebookOptions->{"FileOutlineCache"->False},
ShowSelection->True,
TrackCellChangeTimes->False,
FrontEndVersion->"10.0 for Linux x86 (64-bit) (June 27, 2014)",
StyleDefinitions->"Default.nb"
]

